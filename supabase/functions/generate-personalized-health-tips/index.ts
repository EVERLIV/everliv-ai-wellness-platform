
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0';

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface UserHealthProfile {
  name?: string;
  age?: number;
  gender?: string;
  healthGoals?: string[];
  currentIssues?: string[];
  activityLevel?: string;
  chronicConditions?: string[];
  preferences?: any;
}

interface ContextData {
  timeOfDay: string;
  dayOfWeek: string;
  season: string;
  userLocation?: string;
}

async function getUserHealthProfile(userId: string): Promise<UserHealthProfile> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: healthProfile } = await supabase
      .from('health_profiles')
      .select('profile_data')
      .eq('user_id', userId)
      .single();

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: goals } = await supabase
      .from('user_health_goals')
      .select('*')
      .eq('user_id', userId)
      .eq('is_active', true);

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: profile } = await supabase
      .from('profiles')
      .select('nickname, first_name')
      .eq('id', userId)
      .single();

    const profileData = healthProfile?.profile_data || {};
    
    return {
      name: profile?.nickname || profile?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      age: profileData.age,
      gender: profileData.gender,
      healthGoals: goals?.map(g => g.goal_type) || [],
      currentIssues: profileData.currentSymptoms || [],
      activityLevel: profileData.physicalActivity,
      chronicConditions: profileData.chronicConditions || [],
      preferences: profileData.recommendationSettings || {}
    };
  } catch (error) {
    console.error('Error fetching user profile:', error);
    return { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' };
  }
}

function getCurrentContext(): ContextData {
  const now = new Date();
  const hour = now.getHours();
  const dayOfWeek = now.toLocaleDateString('ru-RU', { weekday: 'long' });
  const month = now.getMonth();
  
  let timeOfDay = '–¥–µ–Ω—å';
  if (hour >= 5 && hour < 12) timeOfDay = '—É—Ç—Ä–æ';
  else if (hour >= 12 && hour < 17) timeOfDay = '–¥–µ–Ω—å';
  else if (hour >= 17 && hour < 22) timeOfDay = '–≤–µ—á–µ—Ä';
  else timeOfDay = '–Ω–æ—á—å';

  let season = '–≤–µ—Å–Ω–∞';
  if (month >= 2 && month <= 4) season = '–≤–µ—Å–Ω–∞';
  else if (month >= 5 && month <= 7) season = '–ª–µ—Ç–æ';
  else if (month >= 8 && month <= 10) season = '–æ—Å–µ–Ω—å';
  else season = '–∑–∏–º–∞';

  return {
    timeOfDay,
    dayOfWeek,
    season,
    userLocation: '–†–æ—Å—Å–∏—è'
  };
}

async function generatePersonalizedTip(profile: UserHealthProfile, context: ContextData): Promise<any> {
  const systemPrompt = `
–¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
- –í—Å–µ–≥–¥–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –≤—Ä–∞—á–æ–º –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
- –î–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–µ –∑–∞–º–µ–Ω—è–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏
- –£—á–∏—Ç—ã–≤–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
1. –ö—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –∏–º–µ–Ω–∏
2. –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
4. –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "id": "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π_id",
  "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏",
  "description": "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤)",
  "category": "–æ–¥–Ω–∞ –∏–∑: health, nutrition, exercise, sleep, stress, prevention",
  "priority": "high/medium/low",
  "action": "—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)",
  "actionType": "reminder/exercise/meditation/info"
}
`;

  const userPrompt = `
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:

–ò–ú–Ø: ${profile.name}
–í–û–ó–†–ê–°–¢: ${profile.age || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ü–û–õ: ${profile.gender || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–û–°–ù–û–í–ù–´–ï –¶–ï–õ–ò: ${profile.healthGoals?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
–¢–ï–ö–£–©–ò–ï –ü–†–û–ë–õ–ï–ú–´: ${profile.currentIssues?.join(', ') || '–Ω–µ—Ç'}
–£–†–û–í–ï–ù–¨ –ê–ö–¢–ò–í–ù–û–°–¢–ò: ${profile.activityLevel || '—Å—Ä–µ–¥–Ω–∏–π'}
–•–†–û–ù–ò–ß–ï–°–ö–ò–ï –ó–ê–ë–û–õ–ï–í–ê–ù–ò–Ø: ${profile.chronicConditions?.join(', ') || '–Ω–µ—Ç'}
–í–†–ï–ú–Ø –°–£–¢–û–ö: ${context.timeOfDay}
–î–ï–ù–¨ –ù–ï–î–ï–õ–ò: ${context.dayOfWeek}
–°–ï–ó–û–ù: ${context.season}

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏), –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç–æ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
`;

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.8,
        max_tokens: 300
      }),
    });

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    try {
      const tipData = JSON.parse(content);
      return {
        ...tipData,
        id: `tip-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        createdAt: new Date().toISOString()
      };
    } catch (parseError) {
      console.error('Failed to parse AI response:', content);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –ø–æ–¥—Å–∫–∞–∑–∫—É
      return generateFallbackTip(profile, context);
    }
  } catch (error) {
    console.error('Error calling OpenAI:', error);
    return generateFallbackTip(profile, context);
  }
}

function generateFallbackTip(profile: UserHealthProfile, context: ContextData): any {
  const tips = [
    {
      id: `fallback-${Date.now()}`,
      title: 'üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!',
      description: `${profile.name}, –Ω–∞—á–Ω–∏ –¥–µ–Ω—å —Å –≥–ª—É–±–æ–∫–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è –∏ —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã`,
      category: 'health',
      priority: 'medium',
      action: '–í—ã–ø–æ–ª–Ω–∏—Ç—å',
      actionType: 'reminder'
    },
    {
      id: `fallback-${Date.now()}-2`,
      title: 'üö∂‚Äç‚ôÄÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      description: '–°–¥–µ–ª–∞–π 10-–º–∏–Ω—É—Ç–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ –¥–ª—è –∑–∞—Ä—è–¥–∞ —ç–Ω–µ—Ä–≥–∏–∏',
      category: 'exercise',
      priority: 'medium',
      action: '–ù–∞—á–∞—Ç—å',
      actionType: 'exercise'
    },
    {
      id: `fallback-${Date.now()}-3`,
      title: 'üßò‚Äç‚ôÇÔ∏è –†–µ–ª–∞–∫—Å–∞—Ü–∏—è',
      description: '–ü–æ–ø—Ä–æ–±—É–π —Ç–µ—Ö–Ω–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è 4-7-8 –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞',
      category: 'stress',
      priority: 'low',
      action: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å',
      actionType: 'meditation'
    }
  ];

  return tips[Math.floor(Math.random() * tips.length)];
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { userId } = await req.json();

    if (!userId) {
      return new Response(
        JSON.stringify({ error: 'User ID is required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log('Generating personalized health tip for user:', userId);

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProfile = await getUserHealthProfile(userId);
    console.log('User profile:', userProfile);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const context = getCurrentContext();
    console.log('Context:', context);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    const tip = await generatePersonalizedTip(userProfile, context);
    console.log('Generated tip:', tip);

    return new Response(
      JSON.stringify({ tip }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Error in generate-personalized-health-tips function:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
