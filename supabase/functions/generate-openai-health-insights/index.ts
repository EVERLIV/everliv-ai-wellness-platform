import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface HealthInsight {
  id: string;
  category: 'predictive' | 'practical' | 'personalized';
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  confidence: number;
  scientificBasis: string;
  actionItems: string[];
  timeframe: string;
  riskFactors?: string[];
  benefits?: string[];
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('=== Health Insights Generation Started ===');
    
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    console.log('OPENAI_API_KEY available:', !!openAIApiKey);
    if (!openAIApiKey) {
      console.error('OPENAI_API_KEY not found in environment');
      throw new Error('OPENAI_API_KEY not found');
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    const requestBody = await req.json();
    console.log('üì• Request body:', requestBody);
    
    const { userId } = requestBody;

    if (!userId) {
      console.error('‚ùå User ID is missing from request');
      throw new Error('User ID is required');
    }

    console.log('üë§ Processing request for user:', userId);

    console.log('üîç Fetching AI health profile for user:', userId);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ AI –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: healthProfile, error } = await supabase
      .from('user_health_ai_profile')
      .select('*')
      .eq('user_id', userId)
      .maybeSingle();

    if (error) {
      console.error('Error fetching health profile:', error);
      throw new Error('Failed to fetch health profile');
    }

    if (!healthProfile) {
      console.log('‚ö†Ô∏è No health profile found, generating basic recommendations');
      
      const basicInsights: HealthInsight[] = [
        {
          id: 'basic-1',
          category: 'practical',
          title: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–¥–æ—Ä–æ–≤—å—è',
          description: '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.',
          priority: 'high',
          confidence: 100,
          scientificBasis: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
          actionItems: [
            '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–æ—Å—Ç, –≤–µ—Å)',
            '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∫—Ä–æ–≤–∏',
            '–£–∫–∞–∂–∏—Ç–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
            '–û–ø–∏—à–∏—Ç–µ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
          ],
          timeframe: '15-30 –º–∏–Ω—É—Ç'
        },
        {
          id: 'basic-2',
          category: 'personalized',
          title: '–†–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è',
          description: '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.',
          priority: 'medium',
          confidence: 95,
          scientificBasis: '–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã—è–≤–ª—è—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏, –∫–æ–≥–¥–∞ –æ–Ω–∏ –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–¥–∞—é—Ç—Å—è –ª–µ—á–µ–Ω–∏—é',
          actionItems: [
            '–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            '–†–µ–≥—É–ª—è—Ä–Ω–æ –∏–∑–º–µ—Ä—è–π—Ç–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
            '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞',
            '–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è'
          ],
          timeframe: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'
        },
        {
          id: 'basic-3',
          category: 'predictive',
          title: '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π',
          description: '–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.',
          priority: 'medium',
          confidence: 90,
          scientificBasis: '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º –∫ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è',
          actionItems: [
            '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π –≤–µ—Å',
            '–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é 150 –º–∏–Ω—É—Ç –≤ –Ω–µ–¥–µ–ª—é',
            '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–∏—Ç–∞–π—Ç–µ—Å—å',
            '–ò–∑–±–µ–≥–∞–π—Ç–µ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫'
          ],
          timeframe: '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'
        }
      ];

      return new Response(JSON.stringify({ 
        success: true, 
        insights: basicInsights,
        profileData: {
          age: null,
          bmi: null,
          lastAnalysis: null
        }
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const hasMinimalData = healthProfile.age || healthProfile.bmi || healthProfile.analyses_count > 0 || 
                          (healthProfile.biomarkers && healthProfile.biomarkers.length > 0);

    if (!hasMinimalData) {
      console.log('‚ö†Ô∏è Insufficient data in health profile, generating starter recommendations');
      
      const starterInsights: HealthInsight[] = [
        {
          id: 'starter-1',
          category: 'practical',
          title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –∫ –∑–¥–æ—Ä–æ–≤—å—é',
          description: '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.',
          priority: 'high',
          confidence: 100,
          scientificBasis: '–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑—Ä–∞—Å—Ç–µ, –≤–µ—Å–µ –∏ —Ä–æ—Å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è',
          actionItems: [
            '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ—Ñ–∏–ª—å" –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
            '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç –∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å',
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è',
            '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å'
          ],
          timeframe: '10-15 –º–∏–Ω—É—Ç'
        },
        {
          id: 'starter-2',
          category: 'personalized',
          title: '–ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫',
          description: '–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —É—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω—ã.',
          priority: 'medium',
          confidence: 95,
          scientificBasis: '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤',
          actionItems: [
            '–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            '–û—Ç–º–µ—á–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞',
            '–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è',
            '–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'
          ],
          timeframe: '5 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
        },
        {
          id: 'starter-3',
          category: 'predictive',
          title: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
          description: '–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è.',
          priority: 'medium',
          confidence: 90,
          scientificBasis: '–ë–∞–∑–æ–≤—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã—è–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞',
          actionItems: [
            '–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É',
            '–°–¥–∞–π—Ç–µ –æ–±—â–∏–π –∏ –±–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏',
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—É–ª—å—Å',
            '–ü—Ä–æ–π–¥–∏—Ç–µ –±–∞–∑–æ–≤–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É'
          ],
          timeframe: '1-2 –Ω–µ–¥–µ–ª–∏'
        }
      ];

      return new Response(JSON.stringify({ 
        success: true, 
        insights: starterInsights,
        profileData: {
          age: healthProfile.age,
          bmi: healthProfile.bmi,
          lastAnalysis: healthProfile.last_analysis_date
        }
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('üìä Health profile data:', {
      hasProfile: !!healthProfile,
      age: healthProfile.age,
      bmi: healthProfile.bmi,
      analysesCount: healthProfile.analyses_count,
      metricsCount: healthProfile.health_metrics_count_30d
    });

    const systemPrompt = `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∑–¥–æ—Ä–æ–≤—å—è. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–Ω—Å–∞–π—Ç—ã –ø–æ —Ç—Ä–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:

1. –ü–†–û–ì–ù–û–ó–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∏—Å–∫–æ–≤, —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π, –±—É–¥—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º
2. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
3. –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

–í–ê–ñ–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
- –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—É
- –£—á–∏—Ç—ã–≤–∞–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, BMI, –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã, –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
- –£–∫–∞–∑—ã–≤–∞–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ (confidence 0-100)
- –î–æ–±–∞–≤–ª—è–π –Ω–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –°–¢–†–û–ì–û JSON –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ HealthInsight:
{
  "id": "unique_id",
  "category": "predictive|practical|personalized", 
  "title": "–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
  "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "priority": "high|medium|low",
  "confidence": 85,
  "scientificBasis": "–ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
  "actionItems": ["–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 1", "–î–µ–π—Å—Ç–≤–∏–µ 2"],
  "timeframe": "2-4 –Ω–µ–¥–µ–ª–∏",
  "riskFactors": ["–§–∞–∫—Ç–æ—Ä —Ä–∏—Å–∫–∞"] (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ),
  "benefits": ["–ü–æ–ª—å–∑–∞"] (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
}
`;

    const userPrompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–π –∏–Ω—Å–∞–π—Ç—ã –ø–æ —Ç—Ä–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:

–î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
–í–æ–∑—Ä–∞—Å—Ç: ${healthProfile.age} –ª–µ—Ç
–ü–æ–ª: ${healthProfile.gender}
BMI: ${healthProfile.bmi}
–†–æ—Å—Ç: ${healthProfile.height} —Å–º
–í–µ—Å: ${healthProfile.avg_weight_30d} –∫–≥

–ë–ò–û–ú–ê–†–ö–ï–†–´: ${JSON.stringify(healthProfile.biomarkers)}

–û–ë–†–ê–ó –ñ–ò–ó–ù–ò (30 –¥–Ω–µ–π):
- –°–æ–Ω: ${healthProfile.avg_sleep_30d} —á/—Å—É—Ç–∫–∏
- –®–∞–≥–∏: ${healthProfile.avg_steps_30d}
- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: ${healthProfile.avg_exercise_30d} –º–∏–Ω/–¥–µ–Ω—å
- –°—Ç—Ä–µ—Å—Å: ${healthProfile.avg_stress_30d}/10
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${healthProfile.avg_mood_30d}/10
- –í–æ–¥–∞: ${healthProfile.avg_water_30d} –ª/–¥–µ–Ω—å

–ü–ò–¢–ê–ù–ò–ï:
- –ö–∞–ª–æ—Ä–∏–∏: ${healthProfile.avg_calories_30d} –∫–∫–∞–ª/–¥–µ–Ω—å
- –ë–µ–ª–∫–∏: ${healthProfile.avg_protein_30d}–≥
- –£–≥–ª–µ–≤–æ–¥—ã: ${healthProfile.avg_carbs_30d}–≥
- –ñ–∏—Ä—ã: ${healthProfile.avg_fat_30d}–≥

–ú–ï–î–ò–¶–ò–ù–°–ö–ê–Ø –ò–°–¢–û–†–ò–Ø:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤: ${healthProfile.analyses_count}
- –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: ${healthProfile.last_analysis_date}
- –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: ${healthProfile.medical_conditions?.join(', ') || '–ù–µ—Ç'}
- –ê–ª–ª–µ—Ä–≥–∏–∏: ${healthProfile.allergies?.join(', ') || '–ù–µ—Ç'}
- –õ–µ–∫–∞—Ä—Å—Ç–≤–∞: ${healthProfile.medications?.join(', ') || '–ù–µ—Ç'}

–¶–ï–õ–ò: ${healthProfile.profile_goals?.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

–°–æ–∑–¥–∞–π 6-9 –∏–Ω—Å–∞–π—Ç–æ–≤ (–ø–æ 2-3 –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏), —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.
`;

    console.log('ü§ñ Sending request to OpenAI...');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4.1-2025-04-14',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.7,
        max_tokens: 3000,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error:', errorText);
      throw new Error(`OpenAI API error: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    const content = data.choices[0].message.content;

    console.log('üìù OpenAI response received');

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    let insights: HealthInsight[];
    try {
      insights = JSON.parse(content);
      if (!Array.isArray(insights)) {
        throw new Error('Response is not an array');
      }
    } catch (parseError) {
      console.error('Error parsing OpenAI response:', parseError);
      console.log('Raw response:', content);
      
      // Fallback –∏–Ω—Å–∞–π—Ç—ã –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
      insights = [
        {
          id: 'fallback-1',
          category: 'practical',
          title: '–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          description: '–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          priority: 'medium',
          confidence: 50,
          scientificBasis: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞',
          actionItems: ['–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç'],
          timeframe: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ'
        }
      ];
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const validInsights = insights.filter(insight => 
      insight && 
      insight.category && 
      ['predictive', 'practical', 'personalized'].includes(insight.category) &&
      insight.title && 
      insight.description
    ).map(insight => ({
      ...insight,
      id: insight.id || `insight-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      confidence: Math.min(100, Math.max(0, insight.confidence || 70)),
      priority: insight.priority || 'medium',
      actionItems: insight.actionItems || [],
      timeframe: insight.timeframe || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    }));

    console.log('‚úÖ Generated insights:', {
      total: validInsights.length,
      predictive: validInsights.filter(i => i.category === 'predictive').length,
      practical: validInsights.filter(i => i.category === 'practical').length,
      personalized: validInsights.filter(i => i.category === 'personalized').length
    });

    return new Response(JSON.stringify({ 
      success: true, 
      insights: validInsights,
      profileData: {
        age: healthProfile.age,
        bmi: healthProfile.bmi,
        lastAnalysis: healthProfile.last_analysis_date
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in generate-openai-health-insights:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∏–Ω—Å–∞–π—Ç—ã –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
    const errorInsights = [
      {
        id: 'error-1',
        category: 'practical',
        title: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        priority: 'medium',
        confidence: 50,
        scientificBasis: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
        actionItems: ['–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'],
        timeframe: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ'
      }
    ];

    return new Response(JSON.stringify({ 
      success: true,
      insights: errorInsights,
      profileData: {
        age: null,
        bmi: null,
        lastAnalysis: null
      },
      error: error.message
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});