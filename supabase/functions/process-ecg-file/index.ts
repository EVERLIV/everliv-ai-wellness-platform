import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const anthropicApiKey = Deno.env.get('ANTHROPIC_API_KEY');

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { diagnosis, hasEcgFile, fileType } = await req.json();

    if (!diagnosis) {
      return new Response(
        JSON.stringify({ error: 'Diagnosis is required' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const authHeader = req.headers.get('Authorization')!;
    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);
    
    if (authError || !user) {
      throw new Error('Unauthorized');
    }

    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}`);
    console.log(`–î–∏–∞–≥–Ω–æ–∑: ${diagnosis}`);
    console.log(`–§–∞–π–ª –≠–ö–ì: ${hasEcgFile ? '–¥–∞' : '–Ω–µ—Ç'}, —Ç–∏–ø: ${fileType || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userProfile } = await supabase
      .from('user_health_ai_profile')
      .select('*')
      .eq('user_id', user.id)
      .single();

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã
    const { data: biomarkers } = await supabase
      .from('biomarker_history')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(10);

    // –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const { data: healthMetrics } = await supabase
      .from('daily_health_metrics')
      .select('*')
      .eq('user_id', user.id)
      .gte('date', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0])
      .order('date', { ascending: false });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
    const context = {
      userProfile: userProfile || {},
      recentBiomarkers: biomarkers || [],
      healthMetrics: healthMetrics || [],
      fileInfo: hasEcgFile ? { hasFile: true, type: fileType } : { hasFile: false }
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
    const recommendations = await generateRecommendations(diagnosis, context);

    return new Response(JSON.stringify({ 
      success: true, 
      recommendations,
      message: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ process-ecg-file:', error);
    return new Response(JSON.stringify({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞', 
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

async function generateRecommendations(diagnosis: string, context: any): Promise<any[]> {
  console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ–∑–∞:', diagnosis);
  console.log('–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(context, null, 2));

  if (!anthropicApiKey) {
    console.log('Anthropic API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ mock —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ mock —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–≥–Ω–æ–∑–∞
    const mockRecommendations = generateMockRecommendations(diagnosis, context);
    return mockRecommendations;
  }

  try {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Anthropic API...');
    
    const profileSummary = context.userProfile ? 
      `–í–æ–∑—Ä–∞—Å—Ç: ${context.userProfile.age || '–Ω–µ —É–∫–∞–∑–∞–Ω'}, 
       –ü–æ–ª: ${context.userProfile.gender || '–Ω–µ —É–∫–∞–∑–∞–Ω'},
       –ò–ú–¢: ${context.userProfile.bmi ? context.userProfile.bmi.toFixed(1) : '–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω'},
       –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: ${context.userProfile.medical_conditions?.join(', ') || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'},
       –ê–ª–ª–µ—Ä–≥–∏–∏: ${context.userProfile.allergies?.join(', ') || '–Ω–µ—Ç'},
       –õ–µ–∫–∞—Ä—Å—Ç–≤–∞: ${context.userProfile.medications?.join(', ') || '–Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç'}` : '–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';

    const biomarkersSummary = context.recentBiomarkers?.length > 0 ? 
      context.recentBiomarkers.map(b => `${b.biomarker_name}: ${b.value} ${b.unit}`).join(', ') : 
      '–ë–∏–æ–º–∞—Ä–∫–µ—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã';

    const healthMetricsSummary = context.healthMetrics?.length > 0 ? 
      `–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ 30 –¥–Ω–µ–π: 
       –°–æ–Ω: ${calculateAverage(context.healthMetrics, 'sleep_hours')} —á,
       –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${calculateAverage(context.healthMetrics, 'steps')} —à–∞–≥–æ–≤,
       –°—Ç—Ä–µ—Å—Å: ${calculateAverage(context.healthMetrics, 'stress_level')}/10,
       –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${calculateAverage(context.healthMetrics, 'mood_level')}/10` : 
      '–î–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': anthropicApiKey,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 2500,
        messages: [{
          role: 'user',
          content: `–¢—ã –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-—Ç–µ—Ä–∞–ø–µ–≤—Ç –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ. 

–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞.

–î–ò–ê–ì–ù–û–ó –í–†–ê–ß–ê: "${diagnosis}"

–î–ê–ù–ù–´–ï –ü–ê–¶–ò–ï–ù–¢–ê:
üìä –ü—Ä–æ—Ñ–∏–ª—å: ${profileSummary}

ü©∏ –ë–∏–æ–º–∞—Ä–∫–µ—Ä—ã: ${biomarkersSummary}

üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è: ${healthMetricsSummary}

üî¨ –≠–ö–ì —Ñ–∞–π–ª: ${context.fileInfo.hasFile ? `–ó–∞–≥—Ä—É–∂–µ–Ω (${context.fileInfo.type})` : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –°–æ–∑–¥–∞–π 5-7 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
2. –£—á–∏—Ç—ã–≤–∞–π –í–°–ï –¥–∞–Ω–Ω—ã–µ: –¥–∏–∞–≥–Ω–æ–∑ + –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã + –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è + –Ω–∞–ª–∏—á–∏–µ –≠–ö–ì
3. –î–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞ –∞—Å–ø–µ–∫—Ç–∞—Ö
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º–∏
5. –£–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–¢–û–õ–¨–ö–û JSON, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞):
[
  {
    "title": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
    "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Å—Ä–æ–∫–∏.",
    "category": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥|–ü–∏—Ç–∞–Ω–∏–µ|–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å|–õ–µ—á–µ–Ω–∏–µ|–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏|–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
    "priority": "high|medium|low"
  }
]

–ü–†–ò–û–†–ò–¢–ï–¢–´:
- high: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ–º
- medium: –≤–∞–∂–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
- low: –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è

–ù–ï –ù–ê–ó–ù–ê–ß–ê–ô –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.`
        }]
      })
    });

    if (!response.ok) {
      console.error('–û—à–∏–±–∫–∞ Anthropic API:', response.status, await response.text());
      throw new Error(`API error: ${response.status}`);
    }

    const data = await response.json();
    console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Anthropic API');
    
    const content = data.content[0]?.text;
    
    if (content) {
      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ ```json)
        const jsonMatch = content.match(/\[[\s\S]*\]/);
        const jsonString = jsonMatch ? jsonMatch[0] : content;
        
        const recommendations = JSON.parse(jsonString);
        console.log('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', recommendations.length);
        return recommendations;
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç API:', parseError);
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:', content);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Anthropic API:', error);
  }

  // Fallback –∫ —É–ª—É—á—à–µ–Ω–Ω—ã–º mock —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
  return generateMockRecommendations(diagnosis, context);
}

function generateMockRecommendations(diagnosis: string, context: any): any[] {
  const recommendations = [];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ–∑ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const diagnosisLower = diagnosis.toLowerCase();
  
  // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏–∞–≥–Ω–æ–∑–∞
  if (diagnosisLower.includes('–≥–∏–ø–µ—Ä—Ç–æ–Ω') || diagnosisLower.includes('–¥–∞–≤–ª–µ–Ω–∏–µ')) {
    recommendations.push({
      title: '–ö–æ–Ω—Ç—Ä–æ–ª—å –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è',
      description: `–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–∑–º–µ—Ä—è–π—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º. ${context.userProfile?.age > 60 ? '–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞: –º–µ–Ω–µ–µ 140/90 –º–º —Ä—Ç.—Å—Ç.' : '–¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –º–µ–Ω–µ–µ 130/80 –º–º —Ä—Ç.—Å—Ç.'}`,
      category: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
      priority: 'high'
    });
    
    recommendations.push({
      title: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞—Ç—Ä–∏—è',
      description: '–°–Ω–∏–∑—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–ª–∏ –¥–æ 5–≥ –≤ —Å—É—Ç–∫–∏. –ò—Å–∫–ª—é—á–∏—Ç–µ –∫–æ–ø—á–µ–Ω–æ—Å—Ç–∏, –∫–æ–Ω—Å–µ—Ä–≤—ã, –≥–æ—Ç–æ–≤—ã–µ —Å–æ—É—Å—ã.',
      category: '–ü–∏—Ç–∞–Ω–∏–µ',
      priority: 'high'
    });
  }
  
  if (diagnosisLower.includes('–∞—Ä–∏—Ç–º') || diagnosisLower.includes('—Å–µ—Ä–¥—Ü')) {
    recommendations.push({
      title: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∏—Ç–º–∞ —Å–µ—Ä–¥—Ü–∞',
      description: `${context.fileInfo.hasFile ? '–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –≠–ö–ì —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è' : '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è'} —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—É–ª—å—Å–∞ –∏ —Ä–∏—Ç–º–∞. –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö —Ä–∏—Ç–º–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.`,
      category: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
      priority: 'high'
    });
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤
  if (context.recentBiomarkers?.length > 0) {
    const hasElevatedCholesterol = context.recentBiomarkers.some(b => 
      b.biomarker_name.toLowerCase().includes('—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω') && b.value > 5.0
    );
    
    if (hasElevatedCholesterol) {
      recommendations.push({
        title: '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è —É—Ä–æ–≤–Ω—è —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞',
        description: '–í–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω. –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–º–µ–≥–∞-3, –æ–≤—Å—è–Ω–∫–∏, –æ—Ä–µ—Ö–æ–≤. –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã.',
        category: '–ü–∏—Ç–∞–Ω–∏–µ',
        priority: 'high'
      });
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è
  if (context.healthMetrics?.length > 0) {
    const avgSteps = calculateAverage(context.healthMetrics, 'steps');
    const avgSleep = calculateAverage(context.healthMetrics, 'sleep_hours');
    const avgStress = calculateAverage(context.healthMetrics, 'stress_level');
    
    if (avgSteps < 5000) {
      recommendations.push({
        title: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        description: `–í–∞—à–∞ —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${Math.round(avgSteps)} —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –¥–æ 8000-10000 —à–∞–≥–æ–≤. –ù–∞—á–Ω–∏—Ç–µ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ 20-30 –º–∏–Ω—É—Ç.`,
        category: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        priority: 'medium'
      });
    }
    
    if (avgSleep < 7) {
      recommendations.push({
        title: '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–Ω–∞',
        description: `–í–∞—à —Å—Ä–µ–¥–Ω–∏–π —Å–æ–Ω: ${avgSleep.toFixed(1)} —á–∞—Å–æ–≤. –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 7-9 —á–∞—Å–∞–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞. –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º, –∏–∑–±–µ–≥–∞–π—Ç–µ —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞.`,
        category: '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
        priority: 'medium'
      });
    }
    
    if (avgStress > 6) {
      recommendations.push({
        title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º',
        description: `–í–∞—à —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –ø–æ–≤—ã—à–µ–Ω (${avgStress.toFixed(1)}/10). –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏–ª–∏ –π–æ–≥—É –ø–æ 10-15 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.`,
        category: '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
        priority: 'medium'
      });
    }
  }

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (recommendations.length < 4) {
    recommendations.push({
      title: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
      description: '–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã –∫–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è.',
      category: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
      priority: 'medium'
    });
    
    recommendations.push({
      title: '–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
      description: '–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–π –¥–∏–µ—Ç—ã: –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π, —Ñ—Ä—É–∫—Ç–æ–≤, —Ä—ã–±—ã, —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.',
      category: '–ü–∏—Ç–∞–Ω–∏–µ',
      priority: 'medium'
    });
  }

  return recommendations.slice(0, 6); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 6 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
}

function calculateAverage(metrics: any[], field: string): number {
  if (!metrics?.length) return 0;
  
  const values = metrics
    .map(m => m[field])
    .filter(v => v !== null && v !== undefined && !isNaN(v));
    
  if (values.length === 0) return 0;
  
  return values.reduce((sum, val) => sum + Number(val), 0) / values.length;
}