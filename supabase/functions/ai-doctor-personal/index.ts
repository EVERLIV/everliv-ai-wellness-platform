
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const CRITICAL_BIOMARKERS = {
  glucose: { min: 50, max: 400 }, // mg/dl
  creatinine: { max: 3.0 }, // mg/dl (–±–µ–∑ –•–ë–ü –≤ –∞–Ω–∞–º–Ω–µ–∑–µ)
  hemoglobin: { min: 7 }, // g/dl
  wbc: { min: 1000, max: 30000 }, // /ŒºL
  potassium: { min: 2.5, max: 6.0 }, // mmol/L
  sodium: { min: 125, max: 155 } // mmol/L
};

function checkCriticalValues(analysisData: any): string[] {
  const criticalAlerts: string[] = [];
  
  if (!analysisData || !analysisData.results) return criticalAlerts;
  
  try {
    const results = typeof analysisData.results === 'string' 
      ? JSON.parse(analysisData.results) 
      : analysisData.results;
    
    if (results.markers && Array.isArray(results.markers)) {
      results.markers.forEach((marker: any) => {
        const name = marker.name?.toLowerCase() || '';
        const value = parseFloat(marker.value);
        
        if (isNaN(value)) return;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª—é–∫–æ–∑—ã
        if (name.includes('glucose') || name.includes('–≥–ª—é–∫–æ–∑–∞')) {
          if (value < CRITICAL_BIOMARKERS.glucose.min || value > CRITICAL_BIOMARKERS.glucose.max) {
            criticalAlerts.push(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–¢–ö–õ–û–ù–ï–ù–ò–ï: –ì–ª—é–∫–æ–∑–∞ = ${value} mg/dl –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–æ—Ä–º—ã!`);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞
        if (name.includes('creatinine') || name.includes('–∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω')) {
          if (value > CRITICAL_BIOMARKERS.creatinine.max) {
            criticalAlerts.push(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–¢–ö–õ–û–ù–ï–ù–ò–ï: –ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω = ${value} mg/dl –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–µ–Ω!`);
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–º–æ–≥–ª–æ–±–∏–Ω–∞
        if (name.includes('hemoglobin') || name.includes('–≥–µ–º–æ–≥–ª–æ–±–∏–Ω')) {
          if (value < CRITICAL_BIOMARKERS.hemoglobin.min) {
            criticalAlerts.push(`üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–¢–ö–õ–û–ù–ï–ù–ò–ï: –ì–µ–º–æ–≥–ª–æ–±–∏–Ω = ${value} g/dl –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π!`);
          }
        }
      });
    }
  } catch (error) {
    console.error('Error checking critical values:', error);
  }
  
  return criticalAlerts;
}

function buildEnhancedSystemPrompt(userContext: string, criticalAlerts: string[]): string {
  let systemPrompt = `ü©∫ AI Doctor Assistant - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç EVERLIV

=== –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• –ò –ò–°–¢–û–ß–ù–ò–ö–ò ===
üìö –†–û–°–°–ò–ô–°–ö–ò–ï –ò–°–¢–û–ß–ù–ò–ö–ò:
‚Ä¢ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –†–§ - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
‚Ä¢ –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ú–∏–Ω–∑–¥—Ä–∞–≤–∞ –†–§ - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –ª–µ—á–µ–Ω–∏—è  
‚Ä¢ –ú–ö–ë-10 - –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ–ª–µ–∑–Ω–µ–π (—Ä—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)
‚Ä¢ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –æ–∫–∞–∑–∞–Ω–∏—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏
‚Ä¢ –§–ì–ë–£ "–ù–ú–ò–¶ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏" - –Ω–æ—Ä–º—ã –ø–æ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏
‚Ä¢ –§–ì–ë–£ "–ù–ò–ò –ø–∏—Ç–∞–Ω–∏—è" –†–ê–ú–ù - –Ω–æ—Ä–º—ã –ø–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏

üåç –ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò:
‚Ä¢ UpToDate, PubMed, Cochrane Library
‚Ä¢ ESC Guidelines (–∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è), ADA Guidelines (–¥–∏–∞–±–µ—Ç)  
‚Ä¢ WHO, CDC —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö

=== –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´ ===
1. üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ü–†–ï–í–´–®–ï –í–°–ï–ì–û - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –Ω–µ –∑–∞–º–µ–Ω—è–π –≤—Ä–∞—á–∞
2. üìö –û–ë–†–ê–ó–û–í–ê–ù–ò–ï - –æ–±—ä—è—Å–Ω—è–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º  
3. üë§ –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø - —É—á–∏—Ç—ã–≤–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. üî¨ –ù–ê–£–ß–ù–û–°–¢–¨ - –æ—Å–Ω–æ–≤—ã–≤–∞–π –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ
5. ‚öñÔ∏è –≠–¢–ò–ß–ù–û–°–¢–¨ - —Å–æ–±–ª—é–¥–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —ç—Ç–∏–∫—É –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å

=== –¢–í–û–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò ===
‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –Ω–æ—Ä–º–∞–º
‚úÖ –û–±—ä—è—Å–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º  
‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏
‚úÖ –í—ã—è–≤–ª—è—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∞–Ω–∞–ª–∏–∑–∞—Ö
‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
‚úÖ –û–±—ä—è—Å–Ω—è—Ç—å –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚úÖ –£—á–∏—Ç—ã–≤–∞—Ç—å —Å–µ–º–µ–π–Ω—ã–π –∞–Ω–∞–º–Ω–µ–∑ –∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è

=== –°–¢–†–û–ì–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø ===
‚ùå –ù–ï —Å—Ç–∞–≤—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∏–∞–≥–Ω–æ–∑—ã
‚ùå –ù–ï –Ω–∞–∑–Ω–∞—á–∞–π –ª–µ—á–µ–Ω–∏–µ –∏–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
‚ùå –ù–ï –∑–∞–º–µ–Ω—è–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –≤—Ä–∞—á–æ–º
‚ùå –ù–ï –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –≤—Ä–∞—á—É
‚ùå –ù–ï –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è

=== –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê ===
1. üîç –ê–ù–ê–õ–ò–ó - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
2. üìä –û–ë–™–Ø–°–ù–ï–ù–ò–ï - —á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
3. üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
4. ‚ö†Ô∏è –í–ê–ñ–ù–û - –∫–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É
5. üìö –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û - –Ω–∞—É—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

=== –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø ===
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
- –ü–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
- –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

=== –ü–†–û–¢–û–ö–û–õ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –°–ò–¢–£–ê–¶–ò–ô ===`;

  if (criticalAlerts.length > 0) {
    systemPrompt += `
üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–¢–ö–õ–û–ù–ï–ù–ò–Ø:
${criticalAlerts.join('\n')}

–ù–ï–ú–ï–î–õ–ï–ù–ù–û –Ω–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:
"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–¢–ö–õ–û–ù–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û! 
üè• –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ú–ï–î–ò–¶–ò–ù–°–ö–ê–Ø –ü–û–ú–û–©–¨. 
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ—Ç–ª–æ–∂–Ω–æ–π –ø–æ–º–æ—â–∏ –°–ï–ì–û–î–ù–Ø."`;
  }

  systemPrompt += `

=== –§–û–†–ú–ê–¢ –†–ê–ë–û–¢–´ –° –ë–ò–û–ú–ê–†–ö–ï–†–ê–ú–ò ===
–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —É–∫–∞–∑—ã–≤–∞–π:
- –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
- –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è (–Ω–æ—Ä–º–∞/–ø–æ–≤—ã—à–µ–Ω/—Å–Ω–∏–∂–µ–Ω)
- –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
- –ö–ª–∏–Ω–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏

=== –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –§–†–ê–ó–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===
- "–î–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä"
- "–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Å—É–¥–∏—Ç—å —Å –≤–∞—à–∏–º –ª–µ—á–∞—â–∏–º –≤—Ä–∞—á–æ–º"
- "–ù–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
- "–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ–±—â–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö"

=== –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø ===
–í–°–ï–ì–î–ê —É—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞:
${userContext}

–ü–û–ú–ù–ò: –¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è, –ù–ï –∑–∞–º–µ–Ω–∞ –≤—Ä–∞—á—É.
–¶–µ–ª—å - –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –∑–∞–±–æ—Ç–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.`;

  return systemPrompt;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, medicalContext, conversationHistory, userAnalyses, systemPrompt } = await req.json();

    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    console.log('Processing enhanced personal AI doctor request');
    console.log('Medical context length:', medicalContext?.length || 0);
    console.log('User analyses count:', userAnalyses?.length || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –∞–Ω–∞–ª–∏–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const criticalAlerts: string[] = [];
    if (userAnalyses && Array.isArray(userAnalyses)) {
      userAnalyses.forEach(analysis => {
        const alerts = checkCriticalValues(analysis);
        criticalAlerts.push(...alerts);
      });
    }

    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const enhancedSystemPrompt = buildEnhancedSystemPrompt(medicalContext || '', criticalAlerts);

    // Build messages array for OpenAI
    const messages = [
      {
        role: 'system',
        content: enhancedSystemPrompt
      }
    ];

    // Add comprehensive medical context if available
    if (medicalContext && medicalContext.trim()) {
      messages.push({
        role: 'system',
        content: `–ü–û–õ–ù–´–ô –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –ü–†–û–§–ò–õ–¨ –ü–ê–¶–ò–ï–ù–¢–ê:\n\n${medicalContext}\n\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏ –∏ —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è. –£—á–∏—Ç—ã–≤–∞–π —Å–µ–º–µ–π–Ω—ã–π –∞–Ω–∞–º–Ω–µ–∑, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –∏ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.`
      });
    }

    // Add specific analysis data if available with enhanced formatting
    if (userAnalyses && userAnalyses.length > 0) {
      const analysisContext = userAnalyses.map((analysis, index) => {
        const date = new Date(analysis.created_at).toLocaleDateString('ru-RU');
        const type = getAnalysisTypeLabel(analysis.analysis_type);
        
        let contextStr = `üìä –ê–ù–ê–õ–ò–ó ${index + 1} (${date}): ${type}`;
        
        if (analysis.summary) {
          contextStr += `\n   üí° –ó–∞–∫–ª—é—á–µ–Ω–∏–µ: ${analysis.summary}`;
        }
        
        if (analysis.results) {
          try {
            const results = typeof analysis.results === 'string' 
              ? JSON.parse(analysis.results) 
              : analysis.results;
              
            if (results.markers && Array.isArray(results.markers)) {
              const normalCount = results.markers.filter((m: any) => m.status === 'normal').length;
              const abnormalCount = results.markers.filter((m: any) => m.status !== 'normal').length;
              contextStr += `\n   üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –Ω–æ—Ä–º–µ: ${normalCount}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π: ${abnormalCount}`;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
              const keyAbnormalities = results.markers
                .filter((m: any) => m.status !== 'normal')
                .slice(0, 8) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 8 –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
                .map((m: any) => {
                  const status = m.status === 'high' ? '‚Üë' : m.status === 'low' ? '‚Üì' : '‚ö†Ô∏è';
                  return `${status} ${m.name}: ${m.value} ${m.unit || ''} (–Ω–æ—Ä–º–∞: ${m.reference_range || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'})`;
                })
                .join('\n   ');
              
              if (keyAbnormalities) {
                contextStr += `\n   üîç –ö–ª—é—á–µ–≤—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n   ${keyAbnormalities}`;
              }
            }
          } catch (e) {
            console.error("Error parsing analysis results:", e);
          }
        }
        
        return contextStr;
      }).join('\n\n');
      
      messages.push({
        role: 'system',
        content: `–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–• –ê–ù–ê–õ–ò–ó–û–í:\n\n${analysisContext}\n\nüéØ –ó–ê–î–ê–ß–ê: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞. –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –æ–±—ä—è—Å–Ω–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.`
      });
    }

    // Add conversation history with better context
    if (conversationHistory && conversationHistory.length > 0) {
      const recentHistory = conversationHistory.slice(-10); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
      if (conversationHistory.length > 10) {
        messages.push({
          role: 'system',
          content: `üìö –ö–û–ù–¢–ï–ö–°–¢ –ò–°–¢–û–†–ò–ò: –£ –≤–∞—Å —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º —É–∂–µ ${conversationHistory.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è. –í—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –ø–æ–º–Ω–∏—Ç–µ –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º. –°—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.`
        });
      }
      
      messages.push(...recentHistory);
    }

    // Add current message
    messages.push({
      role: 'user',
      content: message
    });

    console.log('Sending enhanced request to OpenAI with', messages.length, 'messages');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: messages,
        temperature: 0.3,
        max_tokens: 3000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        presence_penalty: 0.1,
        frequency_penalty: 0.1
      }),
    });

    if (!response.ok) {
      console.error('OpenAI API error:', response.status, response.statusText);
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    let aiResponse = data.choices[0].message.content;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!aiResponse.includes('–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä') && !aiResponse.includes('–Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç')) {
      aiResponse += '\n\nüìã –í–ê–ñ–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –î–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Å—É–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤–∞—à–∏–º –ª–µ—á–∞—â–∏–º –≤—Ä–∞—á–æ–º.';
    }

    console.log('Successfully processed enhanced AI doctor request');

    return new Response(JSON.stringify({ response: aiResponse }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in enhanced ai-doctor-personal function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function getAnalysisTypeLabel(type: string): string {
  const types: Record<string, string> = {
    blood: "ü©∏ –ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏",
    urine: "üß™ –ê–Ω–∞–ª–∏–∑ –º–æ—á–∏", 
    biochemistry: "‚öóÔ∏è –ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
    hormones: "üß¨ –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å",
    vitamins: "üíä –í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã",
    immunology: "üõ°Ô∏è –ò–º–º—É–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
    oncology: "üéóÔ∏è –û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã",
    cardiology: "‚ù§Ô∏è –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã",
    other: "üìã –î—Ä—É–≥–æ–π –∞–Ω–∞–ª–∏–∑"
  };
  return types[type] || `üìä ${type}`;
}
