
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.0';

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface WeatherData {
  temperature: number;
  pressure: number;
  humidity: number;
  condition: string;
  city: string;
}

interface HealthProfile {
  age?: number;
  chronicConditions?: string[];
  medications?: string[];
  region?: string;
}

async function getWeatherData(city: string = 'Moscow'): Promise<WeatherData | null> {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=demo&units=metric`);
    
    if (!response.ok) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      return {
        temperature: Math.floor(Math.random() * 30) - 10,
        pressure: Math.floor(Math.random() * 50) + 740,
        humidity: Math.floor(Math.random() * 40) + 40,
        condition: ['sunny', 'cloudy', 'rainy', 'snowy'][Math.floor(Math.random() * 4)],
        city: city
      };
    }

    const data = await response.json();
    return {
      temperature: Math.round(data.main.temp),
      pressure: Math.round(data.main.pressure * 0.75), // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–º —Ä—Ç.—Å—Ç.
      humidity: data.main.humidity,
      condition: data.weather[0].main.toLowerCase(),
      city: data.name
    };
  } catch (error) {
    console.error('Weather API error:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
      temperature: Math.floor(Math.random() * 30) - 10,
      pressure: Math.floor(Math.random() * 50) + 740,
      humidity: Math.floor(Math.random() * 40) + 40,
      condition: ['sunny', 'cloudy', 'rainy', 'snowy'][Math.floor(Math.random() * 4)],
      city: city
    };
  }
}

async function getMagneticStormData(): Promise<{ level: string; regions: string[]; description: string }> {
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö
  const levels = ['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π'];
  const level = levels[Math.floor(Math.random() * levels.length)];
  
  const allRegions = [
    '–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
    '–°–∏–±–∏—Ä—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
    '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
    '–£—Ä–∞–ª—å—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥'
  ];
  
  const affectedRegions = level === '–≤—ã—Å–æ–∫–∏–π' 
    ? allRegions.slice(0, 4)
    : level === '—Å—Ä–µ–¥–Ω–∏–π' 
    ? allRegions.slice(0, 2)
    : [];
    
  return {
    level,
    regions: affectedRegions,
    description: level === '–≤—ã—Å–æ–∫–∏–π' 
      ? '–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∏–ª—å–Ω–∞—è –º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è'
      : level === '—Å—Ä–µ–¥–Ω–∏–π'
      ? '–í–æ–∑–º–æ–∂–Ω—ã —Å–ª–∞–±—ã–µ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –≤–æ–∑–º—É—â–µ–Ω–∏—è'
      : '–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–æ–∫–æ–π–Ω–∞—è'
  };
}

async function generateSmartTips(userId: string): Promise<any[]> {
  try {
    console.log('Generating smart tips for user:', userId);

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: healthProfile } = await supabase
      .from('health_profiles')
      .select('*')
      .eq('user_id', userId)
      .single();

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const weatherData = await getWeatherData(healthProfile?.city || 'Moscow');
    const magneticData = await getMagneticStormData();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
    const context = {
      weather: weatherData,
      magnetic: magneticData,
      userProfile: {
        age: healthProfile?.age || 30,
        region: healthProfile?.city || '–ú–æ—Å–∫–≤–∞',
        chronicConditions: healthProfile?.chronic_conditions || [],
        hasHypertension: healthProfile?.chronic_conditions?.includes('–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è') || false
      },
      currentTime: new Date().toLocaleString('ru-RU')
    };

    console.log('Context for AI:', context);

    const prompt = `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –°–æ–∑–¥–∞–π 2-3 —É–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

–ü–û–ì–û–î–ê:
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weatherData?.temperature}¬∞C
- –î–∞–≤–ª–µ–Ω–∏–µ: ${weatherData?.pressure} –º–º —Ä—Ç.—Å—Ç.
- –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${weatherData?.humidity}%
- –£—Å–ª–æ–≤–∏—è: ${weatherData?.condition}

–ú–ê–ì–ù–ò–¢–ù–ê–Ø –û–ë–°–¢–ê–ù–û–í–ö–ê:
- –£—Ä–æ–≤–µ–Ω—å: ${magneticData.level}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${magneticData.description}
- –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: ${magneticData.regions.join(', ')}

–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –í–æ–∑—Ä–∞—Å—Ç: ${context.userProfile.age}
- –†–µ–≥–∏–æ–Ω: ${context.userProfile.region}
- –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: ${context.userProfile.chronicConditions.join(', ') || '–Ω–µ—Ç'}
- –ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è: ${context.userProfile.hasHypertension ? '–¥–∞' : '–Ω–µ—Ç'}

–°–æ–∑–¥–∞–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
- id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
- title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏
- description: –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ –±–æ–ª–µ–µ 120 —Å–∏–º–≤–æ–ª–æ–≤)
- category: —Ç–∏–ø –ø–æ–¥—Å–∫–∞–∑–∫–∏ ('weather', 'magnetic', 'health', 'meditation')
- priority: –≤–∞–∂–Ω–æ—Å—Ç—å ('high', 'medium', 'low')
- action: —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
- actionType: —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ('reminder', 'exercise', 'meditation', 'info')

–ü–†–ê–í–ò–õ–ê:
1. –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏
2. –£—á–∏—Ç—ã–≤–∞–π –≤–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ
3. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö –¥–ª—è –ª—é–¥–µ–π —Å –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–µ–π
4. –î–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏/–¥—ã—Ö–∞–Ω–∏—é –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ
5. –°–æ–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
6. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤–æ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã, –º–∞–≥–Ω–∏—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 1500
      }),
    });

    const aiResponse = await response.json();
    console.log('AI Response:', aiResponse);

    if (!aiResponse.choices?.[0]?.message?.content) {
      throw new Error('Invalid AI response');
    }

    const tips = JSON.parse(aiResponse.choices[0].message.content);
    console.log('Generated tips:', tips);

    return Array.isArray(tips) ? tips : [];

  } catch (error) {
    console.error('Error generating smart tips:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return [
      {
        id: 'fallback-1',
        title: 'üå°Ô∏è –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–∞–≤–ª–µ–Ω–∏–µ–º',
        description: '–ü—Ä–∏ –ø–µ—Ä–µ–ø–∞–¥–∞—Ö –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä—è–π—Ç–µ —Å–≤–æ—ë –¥–∞–≤–ª–µ–Ω–∏–µ —á–∞—â–µ',
        category: 'weather',
        priority: 'medium',
        action: '–ò–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ',
        actionType: 'reminder'
      },
      {
        id: 'fallback-2', 
        title: 'üßò‚Äç‚ôÄÔ∏è –í—Ä–µ–º—è –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏',
        description: '–°–¥–µ–ª–∞–π—Ç–µ 5-–º–∏–Ω—É—Ç–Ω—É—é –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞',
        category: 'meditation',
        priority: 'low',
        action: '–ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é',
        actionType: 'meditation'
      }
    ];
  }
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { userId } = await req.json();

    if (!userId) {
      return new Response(
        JSON.stringify({ error: 'User ID is required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const tips = await generateSmartTips(userId);

    return new Response(
      JSON.stringify({ tips }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Error in smart-tips-ai function:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
