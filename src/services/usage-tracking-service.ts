
import { supabase } from "@/integrations/supabase/client";

export interface UsageData {
  id: string;
  user_id: string;
  feature_type: string;
  usage_count: number;
  period_start: string;
  period_end: string;
  created_at: string;
  updated_at: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º
const isPremiumUser = (userEmail: string): boolean => {
  return userEmail === 'hoaandrey@gmail.com';
};

export const getCurrentMonthUsage = async (userId: string, featureType: string): Promise<number> => {
  const now = new Date();
  const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
  const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);
  
  const { data, error } = await supabase
    .from('usage_tracking')
    .select('usage_count')
    .eq('user_id', userId)
    .eq('feature_type', featureType)
    .gte('period_start', firstDay.toISOString().split('T')[0])
    .lte('period_end', lastDay.toISOString().split('T')[0])
    .single();
  
  if (error && error.code !== 'PGRST116') {
    console.error('Error fetching usage:', error);
    return 0;
  }
  
  return data?.usage_count || 0;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ (—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ)
export const getTotalAnalysisUsage = async (userId: string): Promise<number> => {
  const textUsage = await getCurrentMonthUsage(userId, 'lab_analyses');
  const photoUsage = await getCurrentMonthUsage(userId, 'photo_lab_analyses');
  return textUsage + photoUsage;
};

export const incrementUsage = async (userId: string, featureType: string): Promise<void> => {
  const now = new Date();
  const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
  const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0);
  
  const periodStart = firstDay.toISOString().split('T')[0];
  const periodEnd = lastDay.toISOString().split('T')[0];
  
  // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
  const { data: existingData, error: selectError } = await supabase
    .from('usage_tracking')
    .select('id, usage_count')
    .eq('user_id', userId)
    .eq('feature_type', featureType)
    .eq('period_start', periodStart)
    .single();
  
  if (existingData) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    const { error } = await supabase
      .from('usage_tracking')
      .update({ 
        usage_count: existingData.usage_count + 1,
        updated_at: new Date().toISOString()
      })
      .eq('id', existingData.id);
    
    if (error) {
      console.error('Error updating usage:', error);
      throw error;
    }
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const { error } = await supabase
      .from('usage_tracking')
      .insert({
        user_id: userId,
        feature_type: featureType,
        usage_count: 1,
        period_start: periodStart,
        period_end: periodEnd
      });
    
    if (error) {
      console.error('Error creating usage record:', error);
      throw error;
    }
  }
};

export const checkUsageLimit = async (
  userId: string, 
  featureType: string, 
  planType: string,
  inputMethod?: 'text' | 'photo',
  userEmail?: string
): Promise<{ canUse: boolean; currentUsage: number; limit: number; message?: string }> => {
  
  console.log('üîç Checking usage limit:', { userId, featureType, planType, inputMethod, userEmail });
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è hoaandrey@gmail.com
  if (userEmail && isPremiumUser(userEmail)) {
    console.log('üéØ Premium user detected:', userEmail, 'giving unlimited access');
    return {
      canUse: true,
      currentUsage: 0,
      limit: 999,
      message: '–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø'
    };
  }
  
  // –î–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç
  if (featureType === 'lab_analyses' || featureType === 'photo_lab_analyses') {
    if (planType === 'premium') {
      // –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω: 15 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü (–æ–±—â–∏–π –ª–∏–º–∏—Ç)
      const totalUsage = await getTotalAnalysisUsage(userId);
      const limit = 15;
      
      console.log('üìä Premium analysis usage:', { totalUsage, limit, canUse: totalUsage < limit });
      
      return {
        canUse: totalUsage < limit,
        currentUsage: totalUsage,
        limit,
        message: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${totalUsage} –∏–∑ ${limit} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü`
      };
    } else {
      // –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω: 1 –∞–Ω–∞–ª–∏–∑ –≤ –º–µ—Å—è—Ü (–æ–±—â–∏–π –ª–∏–º–∏—Ç)
      const totalUsage = await getTotalAnalysisUsage(userId);
      const limit = 1;
      
      console.log('üìä Basic analysis usage:', { totalUsage, limit, canUse: totalUsage < limit });
      
      return {
        canUse: totalUsage < limit,
        currentUsage: totalUsage,
        limit,
        message: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${totalUsage} –∏–∑ ${limit} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü`
      };
    }
  }
  
  // –î–ª—è —á–∞—Ç–∞ —Å AI-–¥–æ–∫—Ç–æ—Ä–æ–º
  if (featureType === 'chat_messages') {
    const currentUsage = await getCurrentMonthUsage(userId, featureType);
    let limit = 0;
    
    if (planType === 'premium') {
      limit = 199; // –ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω: 199 —Å–æ–æ–±—â–µ–Ω–∏–π
    } else {
      limit = 99; // –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω: 99 —Å–æ–æ–±—â–µ–Ω–∏–π
    }
    
    console.log('üí¨ Chat usage:', { currentUsage, limit, canUse: currentUsage < limit, planType });
    
    return {
      canUse: currentUsage < limit,
      currentUsage,
      limit,
      message: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${currentUsage} –∏–∑ ${limit} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü`
    };
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
  const currentUsage = await getCurrentMonthUsage(userId, featureType);
  let limit = 0;
  
  switch (planType) {
    case 'basic':
      limit = 1; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
      break;
    case 'premium':
      limit = 999; // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
      break;
  }
  
  return {
    canUse: currentUsage < limit,
    currentUsage,
    limit
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
export const checkAnalyticsAccess = (planType: string): { canAccess: boolean; message?: string } => {
  console.log('üîç Checking analytics access for plan:', planType);
  
  if (planType === 'premium') {
    return {
      canAccess: true,
      message: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–µ'
    };
  } else {
    return {
      canAccess: false,
      message: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–µ. –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.'
    };
  }
};
