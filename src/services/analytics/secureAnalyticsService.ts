
import { toast } from "sonner";
import { CachedAnalytics } from "@/types/analytics";
import { generateEnhancedAnalytics } from "@/utils/enhancedAnalyticsGenerator";
import { fetchHealthProfileData, fetchAnalysesData, fetchChatsData, saveAnalyticsToDatabase } from "./analyticsDataService";
import { prepareHealthProfileForAnalysis } from "@/utils/healthProfileUtils";
import { ensureAnalyticsConsistency, logAnalyticsDifferences } from "@/utils/analyticsConsistency";
import { SecurityUtils } from "@/utils/securityUtils";
import { InputSanitizer } from "@/utils/inputSanitizer";

export const generateSecureRealTimeAnalytics = async (
  userId: string,
  hasHealthProfile: boolean,
  setAnalytics: (analytics: CachedAnalytics) => void
) => {
  // Security: Validate user ID
  if (!InputSanitizer.isValidUUID(userId)) {
    console.error('üîí Invalid user ID provided to analytics service');
    toast.error('–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return false;
  }

  // Security: Rate limiting
  const rateLimitKey = `analytics_${userId}`;
  if (!SecurityUtils.checkRateLimit(rateLimitKey, 3, 300000)) { // 3 requests per 5 minutes
    toast.error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return false;
  }

  if (!hasHealthProfile) {
    console.log('üîí No health profile, skipping analytics generation');
    return false;
  }

  try {
    console.log('üîí Starting secure analytics generation for user:', userId);

    // Security: Audit log
    SecurityUtils.auditLog('generate_analytics_start', userId);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const [rawHealthProfileData, analysesData, chatsData] = await Promise.all([
      fetchHealthProfileData(userId),
      fetchAnalysesData(userId),
      fetchChatsData(userId)
    ]);

    // Security: Validate data ownership (additional check)
    if (analysesData.some((analysis: any) => !analysis.created_at)) {
      console.warn('üîí Suspicious analysis data detected');
      SecurityUtils.auditLog('suspicious_analysis_data', userId);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const healthProfileData = prepareHealthProfileForAnalysis(rawHealthProfileData);

    console.log('üîí Secure data fetched for user:', userId, {
      hasProfile: !!healthProfileData,
      analysesCount: analysesData.length,
      chatsCount: chatsData.length
    });

    // Security: Check for suspicious patterns
    if (SecurityUtils.detectSuspiciousActivity({ 
      analysesCount: analysesData.length, 
      chatsCount: chatsData.length 
    })) {
      console.warn('üîí Suspicious activity pattern detected');
      SecurityUtils.auditLog('suspicious_activity', userId, {
        analysesCount: analysesData.length,
        chatsCount: chatsData.length
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å –ø–µ—Ä–µ–¥–∞—á–µ–π userId –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    const newAnalytics = await generateEnhancedAnalytics(
      analysesData,
      chatsData,
      true,
      healthProfileData,
      userId
    );

    if (!newAnalytics) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É');
    }

    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    const consistentAnalytics = ensureAnalyticsConsistency(newAnalytics);

    console.log('üîí Generated secure consistent analytics for user:', userId);

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–∑–ª–∏—á–∏–π
    logAnalyticsDifferences('secureAnalyticsService', consistentAnalytics, userId);

    // Security: Sanitize analytics before saving
    const sanitizedAnalytics = {
      ...consistentAnalytics,
      // Remove any potentially sensitive data
      raw_data: undefined,
      debug_info: undefined
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await saveAnalyticsToDatabase(userId, sanitizedAnalytics);
    
    setAnalytics(sanitizedAnalytics);
    
    // Security: Audit log success
    SecurityUtils.auditLog('generate_analytics_success', userId, {
      dataPoints: Object.keys(sanitizedAnalytics).length
    });
    
    toast.success('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    
    return true;
  } catch (error) {
    console.error('üîí Error generating secure analytics for user:', userId, error);
    
    // Security: Audit log error
    SecurityUtils.auditLog('generate_analytics_error', userId, {
      error: error instanceof Error ? error.message : 'Unknown error'
    });
    
    toast.error(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    return false;
  }
};
