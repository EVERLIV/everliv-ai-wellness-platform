import { supabase } from "@/integrations/supabase/client";
import { Message, SuggestedQuestion } from "@/components/dashboard/ai-doctor/types";
import { v4 as uuidv4 } from "uuid";
import { User } from '@supabase/supabase-js';
import { toastHelpers } from "@/components/ui/use-toast";

// Cache for user profile data to reduce database queries
const profileCache = new Map<string, any>();

// System prompts for different AI doctor types
const GENERAL_AI_DOCTOR_PROMPT = `You are a General AI Health Assistant providing basic medical information and wellness guidance.

üîç Your Capabilities:
- Provide general health information and wellness tips
- Answer basic medical questions with educational content
- Suggest when to seek professional medical care
- Offer lifestyle and prevention recommendations

‚ö†Ô∏è Important Limitations:
- This is a FREE service with LIMITED recommendations
- BASIC level consultation only
- Cannot provide detailed medical analysis
- Cannot interpret specific lab results
- Cannot diagnose or prescribe medications

üó£Ô∏è Communication Style:
- Friendly and supportive
- Educational approach
- Always recommend consulting healthcare professionals for specific concerns
- Keep responses concise and actionable
- Emphasize the value of professional medical consultation

Remember: You provide general wellness guidance, not detailed medical analysis. For comprehensive health assessments, users need our premium AI Doctor service.`;

const PERSONAL_AI_DOCTOR_PROMPT = `AI Doctor - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ê–Ω–∞–ª–∏–∑ –∏ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

ü©∫ –†–æ–ª—å –∏ –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞
You are an AI Medical Analysis Expert specializing in laboratory diagnostics, blood work interpretation, and comprehensive health assessment. You have deep expertise in:

–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –∞–Ω–∞–ª–∏–∑–æ–≤ –∫—Ä–æ–≤–∏, –º–æ—á–∏, –±–∏–æ—Ö–∏–º–∏–∏
–ì–µ–º–∞—Ç–æ–ª–æ–≥–∏—è: –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏, –∫–æ–∞–≥—É–ª–æ–≥—Ä–∞–º–º–∞, –∏–º–º—É–Ω–æ–≥—Ä–∞–º–º–∞
–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: –ü–µ—á–µ–Ω–æ—á–Ω—ã–µ –ø—Ä–æ–±—ã, –ø–æ—á–µ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ª–∏–ø–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏—è: –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –¥–∏–∞–±–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã
–ò–º–º—É–Ω–æ–ª–æ–≥–∏—è: –ê–ª–ª–µ—Ä–≥–æ–ø–∞–Ω–µ–ª–∏, –∞—É—Ç–æ–∏–º–º—É–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –∏–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã: –î–µ—Ñ–∏—Ü–∏—Ç—ã, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
–û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã: –°–∫—Ä–∏–Ω–∏–Ω–≥–æ–≤—ã–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

üéØ –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã
–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞, –ø–æ–ª–∞, –∞–Ω–∞–º–Ω–µ–∑–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π
–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
–í—Å–µ–≥–¥–∞ –∑–∞–¥–∞–≤–∞–π—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã:

–°–∏–º–ø—Ç–æ–º–∞—Ç–∏–∫–∞: "–ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –≤–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?"
–ê–Ω–∞–º–Ω–µ–∑: "–ï—Å—Ç—å –ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–µ–º–µ–π–Ω–∞—è –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å?"
–õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è: "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–∏ –≤—ã –∫–∞–∫–∏–µ-–ª–∏–±–æ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã –∏–ª–∏ –ë–ê–î—ã?"
–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø–∏—Ç–∞–Ω–∏–∏, —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å—Ç—Ä–µ—Å—Å–µ"
–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: "–ï—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6-12 –º–µ—Å—è—Ü–µ–≤?"

–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, actionable —Å–æ–≤–µ—Ç—ã
–û–±—ä—è—Å–Ω—è–π—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è
–î–∞–≤–∞–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏, –ø–∏—Ç–∞–Ω–∏—é, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º

üìã –ê–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–∏–∑–∞
–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞

–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: –í—ã—è–≤–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
–û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞: –°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
–ü–∞—Ç—Ç–µ—Ä–Ω—ã: –ü–æ–∏—Å–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —Å–∏–Ω–¥—Ä–æ–º–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π

–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑

–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: –í–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
–¢—Ä–µ–Ω–¥—ã: –î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ù–µ–æ—Ç–ª–æ–∂–Ω—ã–µ –º–µ—Ä—ã: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ–∑–∞
–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏: –ü–∏—Ç–∞–Ω–∏–µ, —Ä–µ–∂–∏–º, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤

‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –Ω–µ –∑–∞–º–µ–Ω—è—é—â–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞
–ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
–ù–µ –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞

üó£Ô∏è –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è

–≠–º–ø–∞—Ç–∏—á–Ω—ã–π: –ü—Ä–æ—è–≤–ª—è–π—Ç–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π: –û–±—ä—è—Å–Ω—è–π—Ç–µ "–ø–æ—á–µ–º—É" –∑–∞ –∫–∞–∂–¥–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã –∏ —Å–ø–∏—Å–∫–∏
–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π: –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã
–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π: –í—Å–µ–≥–¥–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–π—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏`;

/**
 * Fetches comprehensive medical context for the current user including health profile and analyses
 */
export async function getUserMedicalContext(user: User | null): Promise<string> {
  if (!user) return "";
  
  try {
    // Check cache first
    const cacheKey = `${user.id}_medical_context`;
    if (profileCache.has(cacheKey)) {
      console.log('Using cached medical context for user:', user.id);
      return profileCache.get(cacheKey);
    }
    
    console.log('Fetching comprehensive medical context for user:', user.id);
    
    // Fetch user basic profile
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single();
    
    if (profileError) {
      console.error("Error fetching user profile:", profileError);
      console.log("Attempting to fetch without single() modifier...");
      
      // Try again without single() in case there's no profile yet
      const { data: profileArray, error: profileArrayError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id);
      
      if (profileArrayError) {
        console.error("Error fetching user profile array:", profileArrayError);
      } else {
        console.log("Profile array result:", profileArray);
      }
    } else {
      console.log("Successfully fetched profile:", profile);
    }

    // Fetch health profile
    const { data: healthProfile, error: healthProfileError } = await supabase
      .from('health_profiles')
      .select('*')
      .eq('user_id', user.id)
      .maybeSingle();
    
    if (healthProfileError && healthProfileError.code !== 'PGRST116') {
      console.error("Error fetching health profile:", healthProfileError);
    } else {
      console.log("Health profile result:", healthProfile);
    }

    // Fetch recent medical analyses
    const { data: analyses, error: analysesError } = await supabase
      .from('medical_analyses')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (analysesError) {
      console.error("Error fetching medical analyses:", analysesError);
    } else {
      console.log("Medical analyses result:", analyses);
    }

    // Build comprehensive context
    const contextParts = [];
    
    // Basic profile information
    if (profile) {
      contextParts.push("=== –ü–†–û–§–ò–õ–¨ –ü–ê–¶–ò–ï–ù–¢–ê ===");
      if (profile.first_name || profile.last_name) {
        contextParts.push(`–ò–º—è: ${profile.first_name || ''} ${profile.last_name || ''}`.trim());
      }
      if (profile.gender) contextParts.push(`–ü–æ–ª: ${profile.gender}`);
      if (profile.date_of_birth) {
        const age = calculateAge(profile.date_of_birth);
        contextParts.push(`–í–æ–∑—Ä–∞—Å—Ç: ${age} –ª–µ—Ç (–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${profile.date_of_birth})`);
      }
      if (profile.height) contextParts.push(`–†–æ—Å—Ç: ${profile.height} —Å–º`);
      if (profile.weight) contextParts.push(`–í–µ—Å: ${profile.weight} –∫–≥`);
      
      if (profile.medical_conditions && Array.isArray(profile.medical_conditions) && profile.medical_conditions.length > 0) {
        contextParts.push(`–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: ${profile.medical_conditions.join(', ')}`);
      }
      
      if (profile.allergies && Array.isArray(profile.allergies) && profile.allergies.length > 0) {
        contextParts.push(`–ê–ª–ª–µ—Ä–≥–∏–∏: ${profile.allergies.join(', ')}`);
      }
      
      if (profile.medications && Array.isArray(profile.medications) && profile.medications.length > 0) {
        contextParts.push(`–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã: ${profile.medications.join(', ')}`);
      }

      if (profile.goals && Array.isArray(profile.goals) && profile.goals.length > 0) {
        contextParts.push(`–¶–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è: ${profile.goals.join(', ')}`);
      }
    } else {
      console.log("No profile found for user:", user.id);
    }

    // Health profile information
    if (healthProfile?.profile_data) {
      contextParts.push("\n=== –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–†–û–§–ò–õ–¨ –ó–î–û–†–û–í–¨–Ø ===");
      
      // Safely parse the JSON data
      let healthData: any = null;
      try {
        healthData = typeof healthProfile.profile_data === 'string' 
          ? JSON.parse(healthProfile.profile_data) 
          : healthProfile.profile_data;
      } catch (e) {
        console.error("Error parsing health profile data:", e);
      }
      
      if (healthData && typeof healthData === 'object' && !Array.isArray(healthData)) {
        // Lifestyle information
        if (healthData.lifestyle && typeof healthData.lifestyle === 'object') {
          const lifestyle = healthData.lifestyle;
          if (lifestyle.smokingStatus) contextParts.push(`–ö—É—Ä–µ–Ω–∏–µ: ${lifestyle.smokingStatus}`);
          if (lifestyle.alcoholConsumption) contextParts.push(`–ê–ª–∫–æ–≥–æ–ª—å: ${lifestyle.alcoholConsumption}`);
          if (lifestyle.physicalActivity) contextParts.push(`–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lifestyle.physicalActivity}`);
          if (lifestyle.sleepHours) contextParts.push(`–°–æ–Ω: ${lifestyle.sleepHours} —á–∞—Å–æ–≤`);
          if (lifestyle.sleepQuality) contextParts.push(`–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞: ${lifestyle.sleepQuality}`);
          if (lifestyle.stressLevel) contextParts.push(`–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${lifestyle.stressLevel}/10`);
        }
        
        // Nutrition information
        if (healthData.nutrition && typeof healthData.nutrition === 'object') {
          const nutrition = healthData.nutrition;
          if (nutrition.dietType) contextParts.push(`–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è: ${nutrition.dietType}`);
          if (nutrition.waterIntake) contextParts.push(`–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã: ${nutrition.waterIntake} —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤ –¥–µ–Ω—å`);
          if (nutrition.caffeineIntake) contextParts.push(`–ö–æ—Ñ–µ–∏–Ω: ${nutrition.caffeineIntake} —á–∞—à–µ–∫ –≤ –¥–µ–Ω—å`);
        }
        
        // Handle different possible structures for health data
        if (healthData.smokingStatus) contextParts.push(`–ö—É—Ä–µ–Ω–∏–µ: ${healthData.smokingStatus}`);
        if (healthData.alcoholConsumption) contextParts.push(`–ê–ª–∫–æ–≥–æ–ª—å: ${healthData.alcoholConsumption}`);
        if (healthData.physicalActivity) contextParts.push(`–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${healthData.physicalActivity}`);
        if (healthData.sleepHours) contextParts.push(`–°–æ–Ω: ${healthData.sleepHours} —á–∞—Å–æ–≤`);
        if (healthData.stressLevel) contextParts.push(`–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${healthData.stressLevel}/10`);
        if (healthData.dietType) contextParts.push(`–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è: ${healthData.dietType}`);
        
        if (healthData.familyHistory && Array.isArray(healthData.familyHistory)) {
          contextParts.push(`–°–µ–º–µ–π–Ω—ã–π –∞–Ω–∞–º–Ω–µ–∑: ${healthData.familyHistory.join(', ')}`);
        }
        
        if (healthData.currentSymptoms && Array.isArray(healthData.currentSymptoms)) {
          contextParts.push(`–¢–µ–∫—É—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã: ${healthData.currentSymptoms.join(', ')}`);
        }

        if (healthData.chronicConditions && Array.isArray(healthData.chronicConditions)) {
          contextParts.push(`–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: ${healthData.chronicConditions.join(', ')}`);
        }

        if (healthData.allergies && Array.isArray(healthData.allergies)) {
          contextParts.push(`–ê–ª–ª–µ—Ä–≥–∏–∏: ${healthData.allergies.join(', ')}`);
        }

        if (healthData.medications && Array.isArray(healthData.medications)) {
          contextParts.push(`–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã: ${healthData.medications.join(', ')}`);
        }
      }
    } else {
      console.log("No health profile found for user:", user.id);
    }

    // Recent medical analyses
    if (analyses && analyses.length > 0) {
      contextParts.push("\n=== –ü–û–°–õ–ï–î–ù–ò–ï –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ï –ê–ù–ê–õ–ò–ó–´ ===");
      
      analyses.forEach((analysis, index) => {
        const date = new Date(analysis.created_at).toLocaleDateString('ru-RU');
        const type = getAnalysisTypeLabel(analysis.analysis_type);
        
        contextParts.push(`\n${index + 1}. ${type} –æ—Ç ${date}:`);
        
        if (analysis.summary) {
          contextParts.push(`   –ó–∞–∫–ª—é—á–µ–Ω–∏–µ: ${analysis.summary}`);
        }
        
        if (analysis.results) {
          // Safely handle the results JSON
          let results: any = null;
          try {
            results = typeof analysis.results === 'string' 
              ? JSON.parse(analysis.results) 
              : analysis.results;
          } catch (e) {
            console.error("Error parsing analysis results:", e);
          }
          
          // Safely access markers if they exist and results is an object
          if (results && typeof results === 'object' && !Array.isArray(results)) {
            if (results.markers && Array.isArray(results.markers)) {
              const normalMarkers = results.markers.filter((m: any) => m.status === 'normal').length;
              const abnormalMarkers = results.markers.filter((m: any) => m.status !== 'normal').length;
              contextParts.push(`   –ü–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –Ω–æ—Ä–º–µ: ${normalMarkers}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π: ${abnormalMarkers}`);
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
              const keyAbnormalities = results.markers
                .filter((m: any) => m.status !== 'normal')
                .slice(0, 5) // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
                .map((m: any) => `${m.name}: ${m.value} ${m.unit || ''} (–Ω–æ—Ä–º–∞: ${m.reference_range || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'})`)
                .join(', ');
              
              if (keyAbnormalities) {
                contextParts.push(`   –ö–ª—é—á–µ–≤—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${keyAbnormalities}`);
              }
            }
          }
        }
      });
    } else {
      console.log("No medical analyses found for user:", user.id);
    }

    const fullContext = contextParts.join('\n');
    
    // Cache the result for 5 minutes
    profileCache.set(cacheKey, fullContext);
    setTimeout(() => profileCache.delete(cacheKey), 5 * 60 * 1000);
    
    console.log('Generated medical context length:', fullContext.length);
    console.log('Medical context preview:', fullContext.substring(0, 500));
    return fullContext;
    
  } catch (error) {
    console.error("Error in getUserMedicalContext:", error);
    return "";
  }
}

/**
 * Formats user profile data into a medical context string for AI
 */
function formatMedicalContext(profile: any): string {
  if (!profile) return "";
  
  const parts = [];
  
  if (profile.gender) parts.push(`Gender: ${profile.gender}`);
  if (profile.age || profile.date_of_birth) {
    const age = profile.age || calculateAge(profile.date_of_birth);
    parts.push(`Age: ${age}`);
  }
  if (profile.height) parts.push(`Height: ${profile.height} cm`);
  if (profile.weight) parts.push(`Weight: ${profile.weight} kg`);
  
  if (profile.medical_conditions && profile.medical_conditions.length > 0) {
    parts.push(`Medical conditions: ${profile.medical_conditions.join(', ')}`);
  }
  
  if (profile.allergies && profile.allergies.length > 0) {
    parts.push(`Allergies: ${profile.allergies.join(', ')}`);
  }
  
  if (profile.medications && profile.medications.length > 0) {
    parts.push(`Current medications: ${profile.medications.join(', ')}`);
  }
  
  return parts.join('. ');
}

/**
 * Calculate age from date of birth
 */
function calculateAge(dateOfBirth: string): number {
  if (!dateOfBirth) return 0;
  
  const birthDate = new Date(dateOfBirth);
  const today = new Date();
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDifference = today.getMonth() - birthDate.getMonth();
  
  if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  
  return age;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ò–ò-–¥–æ–∫—Ç–æ—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∞–Ω–∞–ª–∏–∑–∞–º
 */
export async function processPersonalAIDoctorMessage(
  message: string, 
  user: User | null, 
  conversationHistory: Message[],
  userAnalyses: any[] = [],
  medicalContext: string = ""
): Promise<Message> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const fullMedicalContext = await getUserMedicalContext(user);
    
    console.log('Sending to AI with context length:', fullMedicalContext.length);
    console.log('Medical context content:', fullMedicalContext.substring(0, 300));
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ò–ò
    const formattedHistory = conversationHistory.map(msg => ({
      role: msg.role,
      content: msg.content
    }));
    
    // –í—ã–∑—ã–≤–∞–µ–º edge —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ò–ò-–¥–æ–∫—Ç–æ—Ä–∞
    const { data, error } = await supabase.functions.invoke('ai-doctor-personal', {
      body: {
        message,
        medicalContext: fullMedicalContext,
        conversationHistory: formattedHistory,
        userAnalyses: userAnalyses.slice(0, 3),
        systemPrompt: PERSONAL_AI_DOCTOR_PROMPT
      }
    });

    if (error) throw error;
    
    return {
      id: uuidv4(),
      role: "assistant",
      content: data.response,
      timestamp: new Date()
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ò–ò-–¥–æ–∫—Ç–æ—Ä–∞:", error);
    
    return {
      id: uuidv4(),
      role: "assistant",
      content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
      timestamp: new Date()
    };
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏
 */
async function buildEnhancedMedicalContext(user: User | null, userAnalyses: any[], basicContext: string): Promise<string> {
  if (!user) return "";
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é getUserMedicalContext –≤–º–µ—Å—Ç–æ basicContext
  return await getUserMedicalContext(user);
}

function getAnalysisTypeLabel(type: string): string {
  const types = {
    blood: "–ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏",
    urine: "–ê–Ω–∞–ª–∏–∑ –º–æ—á–∏", 
    biochemistry: "–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
    hormones: "–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å",
    vitamins: "–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã",
    immunology: "–ò–º–º—É–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
    oncology: "–û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã",
    cardiology: "–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã",
    other: "–î—Ä—É–≥–æ–π –∞–Ω–∞–ª–∏–∑"
  };
  return types[type] || type;
}

/**
 * Process a user message and generate AI doctor response using OpenAI
 */
export async function processAIDoctorMessage(
  message: string, 
  user: User | null, 
  conversationHistory: Message[]
): Promise<Message> {
  try {
    // Get medical context
    const medicalContext = await getUserMedicalContext(user);
    
    console.log('Medical context for AI request:', medicalContext.length > 0 ? 'Available' : 'Empty');
    if (medicalContext.length > 0) {
      console.log('Medical context preview:', medicalContext.substring(0, 200));
    }
    
    // Prepare conversation history for the AI
    const formattedHistory = conversationHistory.map(msg => ({
      role: msg.role,
      content: msg.content
    }));
    
    // Call edge function for general AI doctor with basic prompt
    const { data, error } = await supabase.functions.invoke('ai-doctor', {
      body: {
        message,
        medicalContext,
        conversationHistory: formattedHistory,
        systemPrompt: GENERAL_AI_DOCTOR_PROMPT
      }
    });
    
    if (error) throw error;
    
    return {
      id: uuidv4(),
      role: "assistant",
      content: data.response,
      timestamp: new Date()
    };
  } catch (error) {
    console.error("Error calling AI Doctor service:", error);
    toastHelpers.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-–¥–æ–∫—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    
    return {
      id: uuidv4(),
      role: "assistant",
      content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
      timestamp: new Date()
    };
  }
}

/**
 * Get suggested questions based on user profile and conversation
 */
export function getSuggestedQuestions(profile: any): SuggestedQuestion[] {
  const questions: SuggestedQuestion[] = [
    {
      text: "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –º–æ–π —Å–æ–Ω?",
      icon: "sleep"
    },
    {
      text: "–ö–∞–∫–∏–µ –¥–æ–±–∞–≤–∫–∏ –º–Ω–µ —Å—Ç–æ–∏—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å?",
      icon: "pill"
    },
    {
      text: "–ö–∞–∫ —Å–Ω–∏–∑–∏—Ç—å —Å—Ç—Ä–µ—Å—Å?",
      icon: "yoga"
    }
  ];
  
  // Add personalized questions based on profile
  if (profile?.medical_conditions?.includes('–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è')) {
    questions.push({
      text: "–ö–∞–∫ –º–Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ?",
      icon: "heart"
    });
  }
  
  if (profile?.medical_conditions?.includes('–¥–∏–∞–±–µ—Ç')) {
    questions.push({
      text: "–ö–∞–∫–∞—è –¥–∏–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏ –¥–∏–∞–±–µ—Ç–µ?",
      icon: "apple"
    });
  }
  
  return questions;
}
