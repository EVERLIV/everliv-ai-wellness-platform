
import { supabase } from "@/integrations/supabase/client";
import { HealthProfileData } from "@/types/healthProfile";
import { toast } from "sonner";

export const healthProfileService = {
  async fetchHealthProfile(userId: string): Promise<HealthProfileData | null> {
    console.log('üîç Fetching health profile for user:', userId);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
      const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError || !sessionData.session) {
        console.error('‚ùå No valid session for health profile fetch:', sessionError);
        throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–Ω–æ–≤–∞');
      }

      if (sessionData.session.user.id !== userId) {
        console.error('‚ùå User ID mismatch in session');
        throw new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }

      console.log('‚úÖ Valid session found, fetching profile data...');

      const { data, error } = await supabase
        .from('health_profiles')
        .select('profile_data')
        .eq('user_id', userId)
        .maybeSingle();

      if (error) {
        console.error('‚ùå Database error fetching health profile:', error);
        if (error.code === 'PGRST116') {
          console.log('üì≠ No health profile found for user (not an error)');
          return null;
        }
        
        // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ RLS
        if (error.code === '42501' || error.message.includes('row-level security')) {
          console.error('üö´ RLS Policy violation during fetch');
          throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è');
        }
        
        throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
      }

      if (data?.profile_data) {
        console.log('‚úÖ Health profile loaded successfully');
        return data.profile_data as unknown as HealthProfileData;
      }

      console.log('üì≠ No health profile found for user');
      return null;
    } catch (error) {
      console.error('‚ùå Unexpected error fetching health profile:', error);
      if (error instanceof Error) {
        throw error;
      }
      throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  },

  async saveHealthProfile(healthProfile: HealthProfileData): Promise<boolean> {
    console.log('üíæ Starting health profile save process...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError || !sessionData.session) {
        console.error('‚ùå No valid session found:', sessionError);
        toast.error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–Ω–æ–≤–∞');
        return false;
      }

      const userId = sessionData.session.user.id;
      console.log('üíæ Saving health profile for user:', userId);

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!healthProfile.age || !healthProfile.gender || !healthProfile.height || !healthProfile.weight) {
        console.error('‚ùå Missing required fields in health profile');
        toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º lastUpdated –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (healthProfile.labResults) {
        healthProfile.labResults.lastUpdated = new Date().toISOString();
      }

      const profilePayload = {
        user_id: userId,
        profile_data: healthProfile as unknown as any,
        updated_at: new Date().toISOString()
      };

      console.log('üíæ Saving with payload structure ready');

      const { data, error } = await supabase
        .from('health_profiles')
        .upsert(profilePayload, {
          onConflict: 'user_id'
        })
        .select();

      if (error) {
        console.error('‚ùå Error saving health profile:', error);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ RLS
        if (error.code === '42501' || error.message.includes('row-level security')) {
          console.error('üö´ RLS Policy violation detected');
          toast.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –∏ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å–Ω–æ–≤–∞');
        } else if (error.code === '23505') {
          console.error('üîÑ Duplicate key error, trying update...');
          // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
          const { error: updateError } = await supabase
            .from('health_profiles')
            .update({ profile_data: healthProfile })
            .eq('user_id', userId);
            
          if (updateError) {
            console.error('‚ùå Update also failed:', updateError);
            toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
            return false;
          }
        } else {
          toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–¥–æ—Ä–æ–≤—å—è: ' + error.message);
        }
        return false;
      }

      console.log('‚úÖ Health profile saved successfully:', data);
      toast.success('–ü—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå Unexpected error saving health profile:', error);
      toast.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
      return false;
    }
  }
};
