
import { supabase } from "@/integrations/supabase/client";
import { sendMedicalNewsletterEmail } from "./email-service";

export interface NewsletterSubscription {
  id: string;
  user_id: string;
  email: string;
  is_active: boolean;
  frequency: 'weekly' | 'monthly';
  categories: string[];
  created_at: string;
  updated_at: string;
}

export interface NewsletterArticle {
  title: string;
  summary: string;
  url: string;
}

export interface NewsletterTip {
  icon: string;
  title: string;
  description: string;
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ newsletter
export const subscribeToNewsletter = async (
  userId: string,
  email: string,
  frequency: 'weekly' | 'monthly' = 'weekly',
  categories: string[] = ['general']
) => {
  try {
    const { data, error } = await supabase
      .from('newsletter_subscriptions')
      .insert({
        user_id: userId,
        email,
        frequency,
        categories,
        is_active: true
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ newsletter:', error);
    throw error;
  }
};

// –û—Ç–ø–∏—Å–∫–∞ –æ—Ç newsletter
export const unsubscribeFromNewsletter = async (userId: string) => {
  try {
    const { error } = await supabase
      .from('newsletter_subscriptions')
      .update({ is_active: false, updated_at: new Date().toISOString() })
      .eq('user_id', userId);

    if (error) throw error;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç newsletter:', error);
    throw error;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export const getNewsletterSubscription = async (userId: string) => {
  try {
    const { data, error } = await supabase
      .from('newsletter_subscriptions')
      .select('*')
      .eq('user_id', userId)
      .eq('is_active', true)
      .single();

    if (error && error.code !== 'PGRST116') throw error;
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ newsletter:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
export const updateNewsletterSubscription = async (
  userId: string,
  updates: Partial<Pick<NewsletterSubscription, 'frequency' | 'categories'>>
) => {
  try {
    const { data, error } = await supabase
      .from('newsletter_subscriptions')
      .update({ ...updates, updated_at: new Date().toISOString() })
      .eq('user_id', userId)
      .eq('is_active', true)
      .select()
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ newsletter:', error);
    throw error;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ newsletter –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
export const sendWeeklyNewsletter = async () => {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ newsletter...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
    const { data: subscriptions, error } = await supabase
      .from('newsletter_subscriptions')
      .select('*')
      .eq('is_active', true)
      .eq('frequency', 'weekly');

    if (error) throw error;

    if (!subscriptions || subscriptions.length === 0) {
      console.log('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userIds = subscriptions.map(sub => sub.user_id);
    const { data: profiles } = await supabase
      .from('profiles')
      .select('id, nickname')
      .in('id', userIds);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è newsletter
    const articles: NewsletterArticle[] = [
      {
        title: "–ù–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ longevity",
        summary: "–£—á–µ–Ω—ã–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–æ–≤—ã–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ —Å—Ç–∞—Ä–µ–Ω–∏—è –∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –∏—Ö –∑–∞–º–µ–¥–ª–µ–Ω–∏—è.",
        url: `${window.location.origin}/blog/longevity-research`
      },
      {
        title: "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞: –±—É–¥—É—â–µ–µ —É–∂–µ –∑–¥–µ—Å—å",
        summary: "–ö–∞–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ò–ò –º–µ–Ω—è—é—Ç –ø–æ–¥—Ö–æ–¥—ã –∫ –ª–µ—á–µ–Ω–∏—é –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.",
        url: `${window.location.origin}/blog/personalized-medicine`
      },
      {
        title: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–Ω–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è",
        summary: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        url: `${window.location.origin}/blog/sleep-optimization`
      }
    ];

    const tips: NewsletterTip[] = [
      {
        icon: "ü•ó",
        title: "–ü–∏—Ç–∞–Ω–∏–µ –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã",
        description: "–í–∫–ª—é—á–∏—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –±–æ–ª—å—à–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –±–æ–≥–∞—Ç—ã—Ö –º–∞–≥–Ω–∏–µ–º –∏ –≤–∏—Ç–∞–º–∏–Ω–æ–º D –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏."
      },
      {
        icon: "üèÉ‚Äç‚ôÇÔ∏è",
        title: "–ö–∞—Ä–¥–∏–æ –¥–ª—è –¥–æ–ª–≥–æ–ª–µ—Ç–∏—è",
        description: "15-20 –º–∏–Ω—É—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π –∫–∞—Ä–¥–∏–æ –Ω–∞–≥—Ä—É–∑–∫–∏ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞—é—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞."
      },
      {
        icon: "üßò",
        title: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º",
        description: "–ü—Ä–∞–∫—Ç–∏–∫–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –≤—Å–µ–≥–æ 10 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ç–∏–∑–æ–ª–∞ –Ω–∞ 23%."
      }
    ];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º newsletter –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
    const emailPromises = subscriptions.map(async (subscription) => {
      const profile = profiles?.find(p => p.id === subscription.user_id);
      const userName = profile?.nickname || subscription.email.split('@')[0];

      try {
        await sendMedicalNewsletterEmail(
          subscription.email,
          userName,
          articles,
          tips
        );
        console.log(`Newsletter sent to ${subscription.email}`);
      } catch (error) {
        console.error(`Failed to send newsletter to ${subscription.email}:`, error);
      }
    });

    await Promise.allSettled(emailPromises);
    console.log(`Newsletter –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${subscriptions.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ newsletter:', error);
    throw error;
  }
};
