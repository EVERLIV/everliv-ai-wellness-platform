
export interface WeatherInfo {
  temperature: number;
  pressure: number;
  humidity: number;
  condition: string;
  city: string;
  pressureChange: 'rising' | 'falling' | 'stable';
  healthImpact: 'low' | 'medium' | 'high';
}

export interface MagneticStormInfo {
  level: '–Ω–∏–∑–∫–∏–π' | '—Å—Ä–µ–¥–Ω–∏–π' | '–≤—ã—Å–æ–∫–∏–π';
  kIndex: number;
  regions: string[];
  description: string;
  healthWarnings: string[];
  startTime?: string;
  endTime?: string;
}

export interface HealthRecommendation {
  type: 'blood_pressure' | 'meditation' | 'exercise' | 'nutrition' | 'sleep';
  title: string;
  description: string;
  urgency: 'low' | 'medium' | 'high';
  conditions: string[];
}

class WeatherMagneticService {
  private static instance: WeatherMagneticService;
  private cache: Map<string, { data: any; timestamp: number }> = new Map();
  private readonly CACHE_DURATION = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

  static getInstance(): WeatherMagneticService {
    if (!WeatherMagneticService.instance) {
      WeatherMagneticService.instance = new WeatherMagneticService();
    }
    return WeatherMagneticService.instance;
  }

  private isCacheValid(key: string): boolean {
    const cached = this.cache.get(key);
    if (!cached) return false;
    return Date.now() - cached.timestamp < this.CACHE_DURATION;
  }

  private getCachedData<T>(key: string): T | null {
    if (this.isCacheValid(key)) {
      return this.cache.get(key)?.data as T;
    }
    return null;
  }

  private setCachedData(key: string, data: any): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  async getWeatherInfo(city: string = 'Moscow'): Promise<WeatherInfo> {
    const cacheKey = `weather_${city}`;
    const cached = this.getCachedData<WeatherInfo>(cacheKey);
    if (cached) return cached;

    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
      const baseTemp = Math.floor(Math.random() * 30) - 10;
      const basePressure = Math.floor(Math.random() * 50) + 740;
      
      const weatherInfo: WeatherInfo = {
        temperature: baseTemp,
        pressure: basePressure,
        humidity: Math.floor(Math.random() * 40) + 40,
        condition: ['sunny', 'cloudy', 'rainy', 'snowy'][Math.floor(Math.random() * 4)],
        city: city,
        pressureChange: basePressure > 750 ? 'rising' : basePressure < 740 ? 'falling' : 'stable',
        healthImpact: basePressure < 740 || basePressure > 760 ? 'high' : 
                     basePressure < 745 || basePressure > 755 ? 'medium' : 'low'
      };

      this.setCachedData(cacheKey, weatherInfo);
      return weatherInfo;
    } catch (error) {
      console.error('Error fetching weather info:', error);
      throw error;
    }
  }

  async getMagneticStormInfo(): Promise<MagneticStormInfo> {
    const cacheKey = 'magnetic_storm';
    const cached = this.getCachedData<MagneticStormInfo>(cacheKey);
    if (cached) return cached;

    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö
      const levels = ['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π'] as const;
      const level = levels[Math.floor(Math.random() * levels.length)];
      const kIndex = level === '–≤—ã—Å–æ–∫–∏–π' ? 6 : level === '—Å—Ä–µ–¥–Ω–∏–π' ? 4 : 2;
      
      const allRegions = [
        '–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤ÔøΩÔøΩÔøΩ–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–°–∏–±–∏—Ä—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
        '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
        '–£—Ä–∞–ª—å—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
        '–Æ–∂–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥'
      ];

      const affectedRegions = level === '–≤—ã—Å–æ–∫–∏–π' 
        ? allRegions.slice(0, 5)
        : level === '—Å—Ä–µ–¥–Ω–∏–π'
        ? allRegions.slice(0, 3)
        : allRegions.slice(0, 1);

      const healthWarnings = level === '–≤—ã—Å–æ–∫–∏–π'
        ? [
            '–õ—é–¥—è–º —Å –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–µ–π —Å–ª–µ–¥—É–µ—Ç —á–∞—â–µ –∏–∑–º–µ—Ä—è—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ',
            '–ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π',
            '–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏',
            '–ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã —Å—Ç—Ä–æ–≥–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏'
          ]
        : level === '—Å—Ä–µ–¥–Ω–∏–π'
        ? [
            '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º',
            '–ü—Ä–∏ –≥–æ–ª–æ–≤–Ω—ã—Ö –±–æ–ª—è—Ö –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ',
            '–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã'
          ]
        : [
            '–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–æ–∫–æ–π–Ω–∞—è',
            '–ú–æ–∂–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –æ–±—ã—á–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏'
          ];

      const stormInfo: MagneticStormInfo = {
        level,
        kIndex,
        regions: affectedRegions,
        description: level === '–≤—ã—Å–æ–∫–∏–π' 
          ? '–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∏–ª—å–Ω–∞—è –º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è'
          : level === '—Å—Ä–µ–¥–Ω–∏–π'
          ? '–í–æ–∑–º–æ–∂–Ω—ã —Å–ª–∞–±—ã–µ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—ã–µ –≤–æ–∑–º—É—â–µ–Ω–∏—è'
          : '–ú–∞–≥–Ω–∏—Ç–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–æ–∫–æ–π–Ω–∞—è',
        healthWarnings,
        startTime: level !== '–Ω–∏–∑–∫–∏–π' ? new Date().toISOString() : undefined,
        endTime: level !== '–Ω–∏–∑–∫–∏–π' ? new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() : undefined
      };

      this.setCachedData(cacheKey, stormInfo);
      return stormInfo;
    } catch (error) {
      console.error('Error fetching magnetic storm info:', error);
      throw error;
    }
  }

  generateHealthRecommendations(
    weatherInfo: WeatherInfo, 
    magneticInfo: MagneticStormInfo,
    userProfile?: { age?: number; conditions?: string[] }
  ): HealthRecommendation[] {
    const recommendations: HealthRecommendation[] = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–≤–ª–µ–Ω–∏—é
    if (weatherInfo.healthImpact === 'high' || magneticInfo.level === '–≤—ã—Å–æ–∫–∏–π') {
      recommendations.push({
        type: 'blood_pressure',
        title: 'ü©∫ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–∞–≤–ª–µ–Ω–∏—è',
        description: '–ò–∑–º–µ—Ä—å—Ç–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º',
        urgency: 'high',
        conditions: ['–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', '—Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è']
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    if (magneticInfo.level !== '–Ω–∏–∑–∫–∏–π' || weatherInfo.condition === 'rainy') {
      recommendations.push({
        type: 'meditation',
        title: 'üßò‚Äç‚ôÄÔ∏è –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞',
        description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –≥–ª—É–±–æ–∫–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è',
        urgency: 'medium',
        conditions: []
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (weatherInfo.temperature > 25) {
      recommendations.push({
        type: 'exercise',
        title: 'üå°Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏',
        description: '–í –∂–∞—Ä—É –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã',
        urgency: 'medium',
        conditions: []
      });
    } else if (weatherInfo.temperature < -10) {
      recommendations.push({
        type: 'exercise',
        title: '‚ùÑÔ∏è –†–∞–∑–º–∏–Ω–∫–∞ –≤–∞–∂–Ω–∞',
        description: '–í —Ö–æ–ª–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–∏–Ω–∞–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –Ω–∞ —É–ª–∏—Ü—É',
        urgency: 'medium',
        conditions: []
      });
    }

    return recommendations;
  }
}

export const weatherMagneticService = WeatherMagneticService.getInstance();
