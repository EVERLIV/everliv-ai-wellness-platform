
import { useState } from 'react';
import { ActivityLog } from '@/types/healthRecommendations';
import { useAuth } from '@/contexts/AuthContext';

export const useActivityLogger = () => {
  const { user } = useAuth();
  const [logs, setLogs] = useState<ActivityLog[]>([]);

  const logActivity = async (
    actionType: ActivityLog['action_type'],
    actionDescription: string,
    relatedId?: string,
    metadata?: Record<string, any>
  ) => {
    if (!user) return;

    const logEntry: ActivityLog = {
      id: crypto.randomUUID(),
      user_id: user.id,
      action_type: actionType,
      action_description: actionDescription,
      related_id: relatedId,
      metadata,
      timestamp: new Date().toISOString(),
    };

    console.log('üîç –ê–ö–¢–ò–í–ù–û–°–¢–¨:', {
      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user.id,
      –¥–µ–π—Å—Ç–≤–∏–µ: actionType,
      –æ–ø–∏—Å–∞–Ω–∏–µ: actionDescription,
      –≤—Ä–µ–º—è: logEntry.timestamp,
      —Å–≤—è–∑–∞–Ω–Ω—ã–π_–æ–±—ä–µ–∫—Ç: relatedId,
      –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: metadata
    });

    setLogs(prev => [logEntry, ...prev]);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞
    try {
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const existingLogs = JSON.parse(localStorage.getItem(`activity_logs_${user.id}`) || '[]');
      existingLogs.unshift(logEntry);
      localStorage.setItem(`activity_logs_${user.id}`, JSON.stringify(existingLogs.slice(0, 100))); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    }
  };

  const getActivityLogs = () => {
    if (!user) return [];
    
    try {
      const existingLogs = JSON.parse(localStorage.getItem(`activity_logs_${user.id}`) || '[]');
      return existingLogs as ActivityLog[];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
      return [];
    }
  };

  return {
    logActivity,
    getActivityLogs,
    logs
  };
};
