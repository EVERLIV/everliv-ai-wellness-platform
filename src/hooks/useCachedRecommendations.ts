import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { AnalyticsRecommendation } from '@/types/analyticsRecommendations';
import { SmartRecommendation } from '@/components/dashboard/recommendations/types';
import { toast } from '@/hooks/use-toast';

type RecommendationType = 'analytics' | 'dashboard';

interface CachedRecommendationsHook {
  recommendations: AnalyticsRecommendation[] | SmartRecommendation[];
  isLoading: boolean;
  isGenerating: boolean;
  regenerateRecommendations: () => Promise<void>;
  lastUpdated: Date | null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö—ç—à–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö (Unicode-safe)
const createSourceHash = (data: any): string => {
  try {
    if (!data || typeof data !== 'object') {
      return 'empty-data';
    }
    
    const hashData = JSON.stringify(data);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º encodeURIComponent –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Unicode —Å–∏–º–≤–æ–ª–æ–≤
    const safeString = encodeURIComponent(hashData);
    return btoa(safeString).slice(0, 32);
  } catch (error) {
    console.warn('Error creating source hash, using fallback:', error);
    // Fallback: –ø—Ä–æ—Å—Ç–æ–π —Ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
    return `fallback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }
};

export const useCachedRecommendations = (
  type: RecommendationType,
  sourceData: any,
  generatorFunction: () => Promise<any[]>
): CachedRecommendationsHook => {
  const { user } = useAuth();
  const [recommendations, setRecommendations] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isGenerating, setIsGenerating] = useState(false);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const loadCachedRecommendations = async () => {
    if (!user) return;

    try {
      setIsLoading(true);
      
      const { data, error } = await supabase
        .from('cached_recommendations')
        .select('*')
        .eq('user_id', user.id)
        .eq('recommendations_type', type)
        .maybeSingle();

      if (error && error.code !== 'PGRST116') {
        console.error('Error loading cached recommendations:', error);
        return;
      }

      if (data) {
        try {
          const currentHash = createSourceHash(sourceData);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç—É–∞–ª—å–Ω—ã –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (data.source_hash === currentHash) {
            setRecommendations(data.recommendations_data);
            setLastUpdated(new Date(data.updated_at));
            console.log(`‚úÖ Loaded cached ${type} recommendations:`, data.recommendations_data);
          } else {
            console.log(`üîÑ Source data changed for ${type}, generating new recommendations`);
            await generateNewRecommendations();
          }
        } catch (error) {
          console.error('Error processing cached data, regenerating:', error);
          await generateNewRecommendations();
        }
      } else {
        console.log(`üìù No cached recommendations found for ${type}, generating new ones`);
        await generateNewRecommendations();
      }
    } catch (error) {
      console.error('Error in loadCachedRecommendations:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const generateNewRecommendations = async () => {
    if (!user || !sourceData) {
      console.log(`‚ùå Cannot generate ${type} recommendations:`, { hasUser: !!user, hasSourceData: !!sourceData });
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è sourceData
    if (typeof sourceData !== 'object' || Object.keys(sourceData).length === 0) {
      console.warn(`‚ö†Ô∏è Invalid sourceData for ${type} recommendations:`, sourceData);
      return;
    }

    try {
      console.log(`üîÑ Generating new ${type} recommendations with data:`, sourceData);
      setIsGenerating(true);
      
      const newRecommendations = await generatorFunction();
      if (!newRecommendations || !Array.isArray(newRecommendations)) {
        console.error('Invalid recommendations data:', newRecommendations);
        return;
      }

      const newHash = createSourceHash(sourceData);
      const now = new Date();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      const { error } = await supabase
        .from('cached_recommendations')
        .upsert({
          user_id: user.id,
          recommendations_type: type,
          recommendations_data: newRecommendations,
          source_hash: newHash,
          updated_at: now.toISOString()
        }, {
          onConflict: 'user_id,recommendations_type'
        });

      if (error) {
        console.error('Error saving cached recommendations:', error);
        toast({
          title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∫—ç—à",
          variant: "destructive",
        });
        return;
      }

      setRecommendations(newRecommendations);
      setLastUpdated(now);
      
      console.log(`‚úÖ Generated and cached new ${type} recommendations:`, newRecommendations);
      
      toast({
        title: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        description: `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${newRecommendations.length} –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π`,
      });

    } catch (error) {
      console.error('Error generating recommendations:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  const regenerateRecommendations = async () => {
    await generateNewRecommendations();
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∏–ø–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (user && sourceData && Object.keys(sourceData).length > 0) {
      console.log(`üîÑ Loading ${type} recommendations for user`, { sourceData });
      loadCachedRecommendations();
    } else {
      console.log(`‚ö†Ô∏è Missing data for ${type} recommendations:`, { 
        hasUser: !!user, 
        hasSourceData: !!sourceData,
        sourceDataKeys: sourceData ? Object.keys(sourceData) : []
      });
      setIsLoading(false);
    }
  }, [user, type, JSON.stringify(sourceData)]); // –î–æ–±–∞–≤–ª—è–µ–º sourceData –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  return {
    recommendations,
    isLoading,
    isGenerating,
    regenerateRecommendations,
    lastUpdated
  };
};