
import { useState, useEffect } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { HealthProfileData } from "@/types/healthProfile";
import { healthProfileService } from "@/services/healthProfileService";
import { labResultsProcessor } from "@/utils/labResultsProcessor";
import { toast } from "sonner";

export const useHealthProfile = () => {
  const { user, isLoading: authLoading } = useAuth();
  const [healthProfile, setHealthProfile] = useState<HealthProfileData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isEditMode, setEditMode] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchHealthProfile = async () => {
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (authLoading) {
        console.log('üîÑ Waiting for auth to complete...');
        return;
      }

      if (!user) {
        console.log('‚ùå No authenticated user found');
        setHealthProfile(null);
        setIsLoading(false);
        setError(null); // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return;
      }

      console.log('‚úÖ User authenticated, fetching health profile for:', user.id);

      try {
        setIsLoading(true);
        setError(null);
        
        const profile = await healthProfileService.fetchHealthProfile(user.id);
        console.log('üìä Health profile fetched:', profile ? 'Found' : 'Not found');
        
        setHealthProfile(profile);
      } catch (error: any) {
        console.error('‚ùå Error fetching health profile:', error);
        setHealthProfile(null);
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–¥–æ—Ä–æ–≤—å—è';
        
        if (error.message?.includes('JWT')) {
          errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ';
        } else if (error.message?.includes('row-level security')) {
          errorMessage = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
        } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
          errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
        } else if (error.message) {
          errorMessage = error.message;
        }
        
        setError(errorMessage);
        
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast –¥–ª—è –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
        console.error('Health profile fetch error:', errorMessage);
      } finally {
        setIsLoading(false);
      }
    };

    fetchHealthProfile();
  }, [user, authLoading]);

  const updateHealthProfile = (updates: Partial<HealthProfileData>) => {
    console.log('üîÑ Updating health profile with:', updates);
    if (healthProfile) {
      const updatedProfile = { ...healthProfile, ...updates };
      setHealthProfile(updatedProfile);
    } else {
      // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const newProfile: HealthProfileData = {
        age: 25,
        gender: 'male',
        height: 170,
        weight: 70,
        exerciseFrequency: 0,
        stressLevel: 5,
        anxietyLevel: 5,
        waterIntake: 6,
        caffeineIntake: 1,
        sleepHours: 7,
        labResults: {},
        ...updates
      };
      setHealthProfile(newProfile);
    }
  };

  const saveHealthProfile = async () => {
    if (!user) {
      console.error('‚ùå Cannot save: no user logged in');
      const errorMsg = '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã';
      setError(errorMsg);
      toast.error(errorMsg);
      return false;
    }

    if (!healthProfile) {
      console.error('‚ùå Cannot save: no health profile data');
      const errorMsg = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
      setError(errorMsg);
      toast.error(errorMsg);
      return false;
    }

    console.log('üíæ Attempting to save health profile for user:', user.id);
    
    try {
      setError(null);
      const success = await healthProfileService.saveHealthProfile(healthProfile);
      if (success) {
        setEditMode(false);
        console.log('‚úÖ Health profile saved successfully');
        toast.success('–ü—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      }
      return success;
    } catch (error: any) {
      console.error('‚ùå Error in saveHealthProfile:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è';
      if (error.message?.includes('JWT')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ';
      } else if (error.message?.includes('row-level security')) {
        errorMessage = '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      setError(errorMessage);
      toast.error(errorMessage);
      return false;
    }
  };

  const updateLabResultsFromAnalysis = (analysisData: any) => {
    labResultsProcessor.updateLabResultsFromAnalysis(
      healthProfile, 
      analysisData, 
      updateHealthProfile
    );
  };

  return { 
    healthProfile, 
    isLoading: isLoading || authLoading, 
    error,
    setHealthProfile,
    isEditMode,
    setEditMode,
    updateHealthProfile,
    saveHealthProfile,
    updateLabResultsFromAnalysis
  };
};
