
import { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

export interface HealthGoal {
  id?: string;
  user_id: string;
  title: string;
  description?: string;
  category: string;
  priority: 'low' | 'medium' | 'high';
  is_custom: boolean;
  target_value?: number;
  unit?: string;
  progress_percentage: number;
  target_steps?: number;
  target_exercise_minutes?: number;
  target_sleep_hours?: number;
  target_water_intake?: number;
  target_stress_level?: number;
  target_weight?: number;
  goal_type: string;
  start_date: string;
  end_date?: string;
  is_active: boolean;
  created_at?: string;
  updated_at?: string;
}

export interface CustomGoalInput {
  title: string;
  description?: string;
  category: string;
  priority: 'low' | 'medium' | 'high';
  target_value?: number;
  unit?: string;
  start_date: string;
  end_date?: string;
}

export const GOAL_CATEGORIES = {
  // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  'biological_age': {
    name: '–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–æ–∑—Ä–∞—Å—Ç',
    icon: 'üß¨',
    color: 'purple'
  },
  'cardiovascular': {
    name: '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞',
    icon: '‚ù§Ô∏è',
    color: 'red'
  },
  'cognitive': {
    name: '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
    icon: 'üß†',
    color: 'blue'
  },
  'musculoskeletal': {
    name: '–ö–æ—Å—Ç–Ω–æ-–º—ã—à–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
    icon: 'üí™',
    color: 'orange'
  },
  'metabolism': {
    name: '–ú–µ—Ç–∞–±–æ–ª–∏–∑–º',
    icon: '‚ö°',
    color: 'yellow'
  },
  'immunity': {
    name: '–ò–º–º—É–Ω–∏—Ç–µ—Ç',
    icon: 'üõ°Ô∏è',
    color: 'green'
  },
  // –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  'nutrition_goals': {
    name: '–ü–∏—Ç–∞–Ω–∏–µ –∏ –¥–∏–µ—Ç–∞', 
    icon: 'ü•ó',
    color: 'green'
  },
  'mental_wellness': {
    name: '–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
    icon: 'üßò',
    color: 'indigo'
  },
  'social_health': {
    name: '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
    icon: 'üë•',
    color: 'pink'
  },
  'disease_prevention': {
    name: '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π',
    icon: 'ü©∫',
    color: 'teal'
  },
  'fitness': {
    name: '–§–∏—Ç–Ω–µ—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    icon: 'üèÉ',
    color: 'blue'
  },
  'sleep': {
    name: '–°–æ–Ω –∏ –æ—Ç–¥—ã—Ö', 
    icon: 'üò¥',
    color: 'purple'
  },
  'custom': {
    name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è',
    icon: '‚≠ê',
    color: 'gray'
  }
};

export const useHealthGoalsManager = () => {
  const { user } = useAuth();
  const [goals, setGoals] = useState<HealthGoal[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (user) {
      loadGoals();
    } else {
      setIsLoading(false);
    }
  }, [user]);

  const loadGoals = async () => {
    if (!user) return;

    try {
      setIsLoading(true);
      console.log('Loading health goals for user:', user.id);
      
      const { data, error } = await supabase
        .from('user_health_goals')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error loading goals:', error);
        throw error;
      }
      
      console.log('Loaded goals:', data);
      
      const transformedGoals: HealthGoal[] = (data || []).map(dbGoal => ({
        id: dbGoal.id,
        user_id: dbGoal.user_id,
        title: dbGoal.title || getDefaultTitle(dbGoal),
        description: dbGoal.description || `–¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ ${new Date(dbGoal.created_at).toLocaleDateString('ru-RU')}`,
        category: dbGoal.category || 'fitness',
        priority: (dbGoal.priority as 'low' | 'medium' | 'high') || 'medium',
        is_custom: dbGoal.is_custom || false,
        target_value: getTargetValue(dbGoal),
        unit: dbGoal.unit || getDefaultUnit(dbGoal),
        progress_percentage: dbGoal.progress_percentage || 0,
        target_steps: dbGoal.target_steps,
        target_exercise_minutes: dbGoal.target_exercise_minutes,
        target_sleep_hours: dbGoal.target_sleep_hours,
        target_water_intake: dbGoal.target_water_intake,
        target_stress_level: dbGoal.target_stress_level,
        target_weight: dbGoal.target_weight,
        goal_type: dbGoal.goal_type || 'custom',
        start_date: dbGoal.start_date,
        end_date: dbGoal.end_date,
        is_active: dbGoal.is_active,
        created_at: dbGoal.created_at,
        updated_at: dbGoal.updated_at
      }));
      
      setGoals(transformedGoals);

    } catch (error) {
      console.error('Error loading goals:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–π');
    } finally {
      setIsLoading(false);
    }
  };

  const getDefaultTitle = (dbGoal: any): string => {
    if (dbGoal.target_steps > 0) return '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —à–∞–≥–∏';
    if (dbGoal.target_exercise_minutes > 0) return '–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫';
    if (dbGoal.target_sleep_hours > 0) return '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞';
    if (dbGoal.target_water_intake > 0) return '–ü–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º';
    if (dbGoal.target_weight > 0) return '–¶–µ–ª–µ–≤–æ–π –≤–µ—Å';
    if (dbGoal.target_stress_level > 0) return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º';
    return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ü–µ–ª—å';
  };

  const getTargetValue = (dbGoal: any): number | undefined => {
    if (dbGoal.target_steps > 0) return dbGoal.target_steps;
    if (dbGoal.target_exercise_minutes > 0) return dbGoal.target_exercise_minutes;
    if (dbGoal.target_sleep_hours > 0) return dbGoal.target_sleep_hours;
    if (dbGoal.target_water_intake > 0) return dbGoal.target_water_intake;
    if (dbGoal.target_weight > 0) return dbGoal.target_weight;
    if (dbGoal.target_stress_level > 0) return dbGoal.target_stress_level;
    return undefined;
  };

  const getDefaultUnit = (dbGoal: any): string => {
    if (dbGoal.target_steps > 0) return '—à–∞–≥–æ–≤';
    if (dbGoal.target_exercise_minutes > 0) return '–º–∏–Ω—É—Ç';
    if (dbGoal.target_sleep_hours > 0) return '—á–∞—Å–æ–≤';
    if (dbGoal.target_water_intake > 0) return '—Å—Ç–∞–∫–∞–Ω–æ–≤';
    if (dbGoal.target_weight > 0) return '–∫–≥';
    if (dbGoal.target_stress_level > 0) return '—É—Ä–æ–≤–µ–Ω—å';
    return '';
  };

  const createCustomGoal = async (goalInput: CustomGoalInput): Promise<boolean> => {
    if (!user) {
      toast.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      return false;
    }

    try {
      console.log('Creating custom goal:', goalInput);
      
      const dataToSave = {
        user_id: user.id,
        title: goalInput.title,
        description: goalInput.description || '',
        category: goalInput.category,
        priority: goalInput.priority,
        is_custom: true,
        target_value: goalInput.target_value,
        unit: goalInput.unit || '',
        progress_percentage: 0,
        goal_type: 'custom',
        start_date: goalInput.start_date,
        end_date: goalInput.end_date || null,
        is_active: true,
        // –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª–µ–π
        target_steps: 0,
        target_exercise_minutes: 0,
        target_sleep_hours: 0,
        target_water_intake: 0,
        target_stress_level: 0,
        target_weight: null
      };

      console.log('Data to save:', dataToSave);

      const { data, error } = await supabase
        .from('user_health_goals')
        .insert(dataToSave)
        .select()
        .single();

      if (error) {
        console.error('Error creating custom goal:', error);
        throw error;
      }
      
      console.log('Custom goal created successfully:', data);
      await loadGoals();
      toast.success('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ü–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞');
      return true;
    } catch (error: any) {
      console.error('Error creating custom goal:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏');
      return false;
    }
  };

  const updateGoal = async (goalId: string, updates: Partial<CustomGoalInput>): Promise<boolean> => {
    if (!user) {
      toast.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      return false;
    }

    try {
      console.log('Updating goal:', goalId, updates);
      
      const { error } = await supabase
        .from('user_health_goals')
        .update({
          title: updates.title,
          description: updates.description,
          category: updates.category,
          priority: updates.priority,
          target_value: updates.target_value,
          unit: updates.unit,
          end_date: updates.end_date
        })
        .eq('id', goalId)
        .eq('user_id', user.id);

      if (error) {
        console.error('Error updating goal:', error);
        throw error;
      }
      
      await loadGoals();
      toast.success('–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      return true;
    } catch (error: any) {
      console.error('Error updating goal:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏');
      return false;
    }
  };

  const deleteGoal = async (goalId: string): Promise<boolean> => {
    if (!user) return false;

    try {
      console.log('Deleting goal:', goalId);
      
      const { error } = await supabase
        .from('user_health_goals')
        .update({ is_active: false })
        .eq('id', goalId)
        .eq('user_id', user.id);

      if (error) {
        console.error('Error deleting goal:', error);
        throw error;
      }
      
      await loadGoals();
      toast.success('–¶–µ–ª—å —É–¥–∞–ª–µ–Ω–∞');
      return true;
    } catch (error: any) {
      console.error('Error deleting goal:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏');
      return false;
    }
  };

  const toggleGoalStatus = async (goalId: string): Promise<boolean> => {
    if (!user) return false;

    try {
      const goal = goals.find(g => g.id === goalId);
      if (!goal) return false;

      const { error } = await supabase
        .from('user_health_goals')
        .update({ is_active: !goal.is_active })
        .eq('id', goalId)
        .eq('user_id', user.id);

      if (error) {
        console.error('Error toggling goal status:', error);
        throw error;
      }
      
      await loadGoals();
      toast.success(goal.is_active ? '–¶–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¶–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
      return true;
    } catch (error: any) {
      console.error('Error toggling goal status:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ü–µ–ª–∏');
      return false;
    }
  };

  return {
    goals: goals.filter(goal => goal.is_active),
    allGoals: goals,
    isLoading,
    createCustomGoal,
    updateGoal,
    deleteGoal,
    toggleGoalStatus,
    refetch: loadGoals,
    categories: GOAL_CATEGORIES
  };
};
