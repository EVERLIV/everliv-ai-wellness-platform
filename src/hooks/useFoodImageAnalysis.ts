
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

interface AnalysisResult {
  food_name: string;
  portion_size: string;
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
  confidence: number;
}

export const useFoodImageAnalysis = () => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const analyzeImage = async (imageFile: File): Promise<AnalysisResult | null> => {
    setIsAnalyzing(true);
    try {
      console.log('üì∑ useFoodImageAnalysis: Starting analysis for file:', imageFile.name, 'size:', imageFile.size);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
      if (imageFile.size > 10 * 1024 * 1024) {
        throw new Error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 10MB)');
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI
      const base64 = await fileToBase64(imageFile);
      const imageUrl = `data:${imageFile.type};base64,${base64}`;

      console.log('üì∑ useFoodImageAnalysis: Sending to edge function for analysis...');

      const { data, error } = await supabase.functions.invoke('analyze-food-image', {
        body: { imageUrl }
      });

      if (error) {
        console.error('üì∑ useFoodImageAnalysis: Supabase function error:', error);
        throw new Error(`–û—à–∏–±–∫–∞ Edge —Ñ—É–Ω–∫—Ü–∏–∏: ${error.message}`);
      }

      if (!data) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      if (!data.success) {
        throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      }

      console.log('üì∑ useFoodImageAnalysis: Analysis result:', data.analysis);
      toast.success('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!');
      
      return data.analysis;
    } catch (error) {
      console.error('üì∑ useFoodImageAnalysis: Error analyzing image:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      toast.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${errorMessage}`);
      
      return null;
    } finally {
      setIsAnalyzing(false);
    }
  };

  const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        const base64 = (reader.result as string).split(',')[1];
        resolve(base64);
      };
      reader.onerror = error => reject(error);
    });
  };

  return {
    analyzeImage,
    isAnalyzing
  };
};
