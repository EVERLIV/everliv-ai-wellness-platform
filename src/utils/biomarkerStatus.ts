// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–∏–æ–º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –Ω–æ—Ä–º—ã
export const calculateBiomarkerStatus = (
  value: string, 
  normalRange: string
): 'normal' | 'high' | 'low' => {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ - –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ —É–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã
  let cleanValue = value;
  if (typeof cleanValue === 'string') {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å
    const valueMatch = cleanValue.match(/^([0-9,.\s]+)/);
    if (valueMatch) {
      cleanValue = valueMatch[1].trim().replace(',', '.');
    }
  }
  
  const numericValue = parseFloat(cleanValue);
  
  // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∏–æ–º–∞—Ä–∫–µ—Ä–∞:', {
    originalValue: value,
    cleanValue,
    numericValue,
    normalRange,
    isValidNumber: !isNaN(numericValue)
  });
  
  if (isNaN(numericValue)) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ:', value);
    return 'normal';
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–æ—Ä–º
  
  // –§–æ—Ä–º–∞—Ç "X-Y" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "3-11 %" –∏–ª–∏ "120-150 –≥/–ª")
  if (normalRange.includes('-')) {
    const rangeParts = normalRange.split('-');
    if (rangeParts.length === 2) {
      const minStr = rangeParts[0].trim().replace(',', '.');
      const maxStr = rangeParts[1].trim().replace(',', '.');
      
      const minNormal = parseFloat(minStr);
      const maxNormal = parseFloat(maxStr);
      
      if (!isNaN(minNormal) && !isNaN(maxNormal)) {
        let status: 'normal' | 'high' | 'low';
        if (numericValue < minNormal) {
          status = 'low';
        } else if (numericValue > maxNormal) {
          status = 'high';
        } else {
          status = 'normal';
        }
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', {
          value: numericValue,
          min: minNormal,
          max: maxNormal,
          status,
          logic: `${numericValue} ${numericValue < minNormal ? '<' : numericValue > maxNormal ? '>' : '–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'} [${minNormal}-${maxNormal}]`
        });
        
        return status;
      }
    }
  }
  
  // –§–æ—Ä–º–∞—Ç ">X" (–Ω–∞–ø—Ä–∏–º–µ—Ä, ">1.0 –º–º–æ–ª—å/–ª")
  if (normalRange.startsWith('>')) {
    const thresholdStr = normalRange.substring(1).trim().replace(',', '.');
    const threshold = parseFloat(thresholdStr);
    if (!isNaN(threshold)) {
      const status = numericValue >= threshold ? 'normal' : 'low';
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ "–±–æ–ª—å—à–µ":', {
        value: numericValue,
        threshold,
        status,
        logic: `${numericValue} ${numericValue >= threshold ? '>=' : '<'} ${threshold}`
      });
      return status;
    }
  }
  
  // –§–æ—Ä–º–∞—Ç "<X" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "<5.0 –º–º–æ–ª—å/–ª")
  if (normalRange.startsWith('<')) {
    const thresholdStr = normalRange.substring(1).trim().replace(',', '.');
    const threshold = parseFloat(thresholdStr);
    if (!isNaN(threshold)) {
      const status = numericValue <= threshold ? 'normal' : 'high';
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ "–º–µ–Ω—å—à–µ":', {
        value: numericValue,
        threshold,
        status,
        logic: `${numericValue} ${numericValue <= threshold ? '<=' : '>'} ${threshold}`
      });
      return status;
    }
  }
  
  // –§–æ—Ä–º–∞—Ç "–¥–æ X" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–æ 4.0 –Ω–≥/–º–ª")
  if (normalRange.toLowerCase().includes('–¥–æ ')) {
    const match = normalRange.match(/–¥–æ\s*(\d+(?:[,.]?\d+)?)/i);
    if (match) {
      const threshold = parseFloat(match[1].replace(',', '.'));
      if (!isNaN(threshold)) {
        const status = numericValue <= threshold ? 'normal' : 'high';
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ "–¥–æ":', {
          value: numericValue,
          threshold,
          status,
          logic: `${numericValue} ${numericValue <= threshold ? '<=' : '>'} ${threshold}`
        });
        return status;
      }
    }
  }
  
  // –§–æ—Ä–º–∞—Ç "–≤—ã—à–µ X" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–≤—ã—à–µ 1.0 –º–º–æ–ª—å/–ª")
  if (normalRange.toLowerCase().includes('–≤—ã—à–µ ')) {
    const match = normalRange.match(/–≤—ã—à–µ\s*(\d+(?:[,.]?\d+)?)/i);
    if (match) {
      const threshold = parseFloat(match[1].replace(',', '.'));
      if (!isNaN(threshold)) {
        const status = numericValue >= threshold ? 'normal' : 'low';
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ "–≤—ã—à–µ":', {
          value: numericValue,
          threshold,
          status,
          logic: `${numericValue} ${numericValue >= threshold ? '>=' : '<'} ${threshold}`
        });
        return status;
      }
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'normal'
  console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ—Ä–º—É:', normalRange);
  return 'normal';
};