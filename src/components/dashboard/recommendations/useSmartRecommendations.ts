import { useHealthProfile } from '@/hooks/useHealthProfile';
import { supabase } from '@/integrations/supabase/client';
import { useCachedRecommendations } from '@/hooks/useCachedRecommendations';
import { SmartRecommendation } from './types';

export const useSmartRecommendations = () => {
  const { healthProfile } = useHealthProfile();

  // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const sourceData = {
    healthGoals: healthProfile?.healthGoals || [],
    userProfile: {
      age: healthProfile?.age,
      gender: healthProfile?.gender,
      weight: healthProfile?.weight,
      height: healthProfile?.height,
      exerciseFrequency: healthProfile?.exerciseFrequency,
      chronicConditions: healthProfile?.chronicConditions,
      medications: healthProfile?.medications,
      stressLevel: healthProfile?.stressLevel,
      sleepHours: healthProfile?.sleepHours
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const generateRecommendations = async (): Promise<SmartRecommendation[]> => {
    if (!healthProfile?.healthGoals || healthProfile.healthGoals.length === 0) {
      console.log('No health goals found for dashboard recommendations');
      return [];
    }

    console.log('üîÑ Generating dashboard recommendations for goals:', healthProfile.healthGoals);
    
    const { data, error } = await supabase.functions.invoke('generate-goal-recommendations', {
      body: sourceData
    });

    if (error) {
      console.error('Error generating dashboard recommendations:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const fallbackRecommendations: SmartRecommendation[] = [
        {
          id: 'fallback-1',
          title: '–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ 16:8',
          description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–∏—Ç–∞–Ω–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞',
          timeframe: '2-4 –Ω–µ–¥–µ–ª–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏',
          category: 'nutrition',
          priority: 'high',
          scientificBasis: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è 2023–≥ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ò–ì –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
          specificActions: [
            '–û–∫–Ω–æ –ø–∏—Ç–∞–Ω–∏—è: 12:00-20:00, –≥–æ–ª–æ–¥–∞–Ω–∏–µ: 20:00-12:00',
            '–ù–∞—á–Ω–∏—Ç–µ —Å 14:10, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥—è –∫ 16:8',
            '–ü–µ–π—Ç–µ –≤–æ–¥—É, —á–∞–π, –∫–æ—Ñ–µ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞ –≤ –ø–µ—Ä–∏–æ–¥ –≥–æ–ª–æ–¥–∞–Ω–∏—è',
            '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, –ø—Ä–∏ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–∏ - –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ'
          ]
        }
      ];
      return fallbackRecommendations;
    }

    if (!data?.recommendations || !Array.isArray(data.recommendations)) {
      console.log('No valid recommendations in response');
      return [];
    }

    console.log('‚úÖ Generated dashboard recommendations:', data.recommendations);
    return data.recommendations;
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const cachedRecommendations = useCachedRecommendations(
    'dashboard',
    sourceData,
    generateRecommendations
  );

  return {
    recommendations: cachedRecommendations.recommendations as SmartRecommendation[],
    isGenerating: cachedRecommendations.isGenerating,
    generateRecommendations: cachedRecommendations.regenerateRecommendations
  };
};