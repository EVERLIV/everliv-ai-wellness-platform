import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Upload, Heart, FileImage, Stethoscope, Lightbulb } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

interface Recommendation {
  id: string;
  title: string;
  description: string;
  category: string;
  priority: 'high' | 'medium' | 'low';
}

const ECGSynthesisWorkspace: React.FC = () => {
  const [ecgImage, setEcgImage] = useState<File | null>(null);
  const [diagnosis, setDiagnosis] = useState('');
  const [recommendations, setRecommendations] = useState<Recommendation[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setEcgImage(file);
      toast.success('–≠–ö–ì –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    }
  };

  const generateRecommendations = async () => {
    if (!diagnosis.trim()) {
      toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑');
      return;
    }

    setIsLoading(true);
    try {
      const { data, error } = await supabase.functions.invoke('ai-diagnostic-synthesis', {
        body: {
          diagnosis: diagnosis.trim(),
          hasEcgImage: !!ecgImage
        }
      });

      if (error) throw error;

      const mockRecommendations: Recommendation[] = [
        {
          id: '1',
          title: '–ö–æ–Ω—Ç—Ä–æ–ª—å –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è',
          description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ê–î —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º. –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –º–µ–Ω–µ–µ 130/80 –º–º —Ä—Ç.—Å—Ç.',
          category: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
          priority: 'high'
        },
        {
          id: '2',
          title: '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è',
          description: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–æ–ª–∏ –¥–æ 5–≥/—Å—É—Ç–∫–∏, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∫–∞–ª–∏—è (—Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏), –æ–º–µ–≥–∞-3 –∂–∏—Ä–Ω—ã—Ö –∫–∏—Å–ª–æ—Ç.',
          category: '–ü–∏—Ç–∞–Ω–∏–µ',
          priority: 'high'
        },
        {
          id: '3',
          title: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          description: '–ê—ç—Ä–æ–±–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ —É–º–µ—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ 150 –º–∏–Ω—É—Ç –≤ –Ω–µ–¥–µ–ª—é. –ù–∞—á–∏–Ω–∞—Ç—å —Å 10-15 –º–∏–Ω—É—Ç —Ö–æ–¥—å–±—ã.',
          category: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
          priority: 'medium'
        },
        {
          id: '4',
          title: '–ö–æ–Ω—Ç—Ä–æ–ª—å –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤',
          description: '–ê–Ω–∞–ª–∏–∑ –ª–∏–ø–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, HbA1c, –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞ —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –¥–∏—É—Ä–µ—Ç–∏–∫–æ–≤.',
          category: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
          priority: 'medium'
        },
        {
          id: '5',
          title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º',
          description: '–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏, –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏–ª–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π 10-15 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.',
          category: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
          priority: 'low'
        }
      ];

      setRecommendations(mockRecommendations);
      toast.success('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∑–¥–æ—Ä–æ–≤—å—è');
    } catch (error) {
      console.error('Error generating recommendations:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
    } finally {
      setIsLoading(false);
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'text-red-600 bg-red-50 border-red-200';
      case 'medium': return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'low': return 'text-green-600 bg-green-50 border-green-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getPriorityText = (priority: string) => {
    switch (priority) {
      case 'high': return '–í—ã—Å–æ–∫–∏–π';
      case 'medium': return '–°—Ä–µ–¥–Ω–∏–π';
      case 'low': return '–ù–∏–∑–∫–∏–π';
      default: return priority;
    }
  };

  return (
    <div className="space-y-8">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="text-center">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent mb-4">
          üî¨ –ò–ò –°–∏–Ω—Ç–µ–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        </h1>
        <p className="text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≠–ö–ì –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∑–¥–æ—Ä–æ–≤—å—è
        </p>
      </div>

      <div className="grid grid-cols-1 xl:grid-cols-2 gap-8 max-w-7xl mx-auto">
        {/* –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö */}
        <div className="space-y-8">
          <Card className="border-2 border-primary/20 shadow-lg hover:shadow-xl transition-shadow duration-300">
            <CardHeader className="pb-6">
              <CardTitle className="text-2xl font-bold text-primary flex items-center gap-3">
                <div className="p-2 bg-primary/10 rounded-lg">
                  <FileImage className="h-6 w-6" />
                </div>
                –ó–∞–≥—Ä—É–∑–∫–∞ –≠–ö–ì
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div className="border-2 border-dashed border-primary/30 rounded-xl p-8 text-center bg-gradient-to-br from-primary/5 to-purple-500/5 hover:from-primary/10 hover:to-purple-500/10 transition-colors duration-300">
                  <div className="p-4 bg-primary/10 rounded-full w-fit mx-auto mb-6">
                    <Upload className="h-12 w-12 text-primary" />
                  </div>
                  <div className="space-y-4">
                    <Label htmlFor="ecg-upload" className="cursor-pointer">
                      <Button variant="outline" size="lg" className="text-lg px-8 py-4 h-auto">
                        –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –≠–ö–ì
                      </Button>
                      <Input
                        id="ecg-upload"
                        type="file"
                        accept="image/*"
                        onChange={handleImageUpload}
                        className="hidden"
                      />
                    </Label>
                    <p className="text-sm text-muted-foreground">
                      PNG, JPG –¥–æ 10MB
                    </p>
                  </div>
                </div>
                {ecgImage && (
                  <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-200">
                    <div className="p-2 bg-green-100 rounded-lg">
                      <FileImage className="h-5 w-5 text-green-600" />
                    </div>
                    <span className="text-sm font-medium text-green-700">{ecgImage.name}</span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-purple-200 shadow-lg hover:shadow-xl transition-shadow duration-300">
            <CardHeader className="pb-6">
              <CardTitle className="text-2xl font-bold text-purple-600 flex items-center gap-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Heart className="h-6 w-6" />
                </div>
                –î–∏–∞–≥–Ω–æ–∑ –≤—Ä–∞—á–∞
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div>
                  <Label htmlFor="diagnosis" className="text-lg font-medium">–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑</Label>
                  <Textarea
                    id="diagnosis"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—á–µ—Å–∫–∞—è –±–æ–ª–µ–∑–Ω—å I —Å—Ç–µ–ø–µ–Ω–∏, –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–π —Ä–∏—Å–∫"
                    value={diagnosis}
                    onChange={(e) => setDiagnosis(e.target.value)}
                    rows={5}
                    className="mt-3 text-base min-h-[120px] border-2 focus:border-purple-300"
                  />
                </div>
                <Button 
                  onClick={generateRecommendations}
                  disabled={isLoading || !diagnosis.trim()}
                  size="lg"
                  className="w-full text-lg py-6 h-auto bg-gradient-to-r from-primary to-purple-600 hover:from-primary/90 hover:to-purple-600/90 transition-all duration-300 font-semibold"
                >
                  {isLoading ? (
                    <div className="flex items-center gap-2">
                      <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                      –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...
                    </div>
                  ) : (
                    <div className="flex items-center gap-2">
                      <Lightbulb className="h-5 w-5" />
                      –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    </div>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        <div>
          <Card className="border-2 border-orange-200 shadow-lg hover:shadow-xl transition-shadow duration-300">
            <CardHeader className="pb-6">
              <CardTitle className="text-2xl font-bold text-orange-600 flex items-center gap-3">
                <div className="p-2 bg-orange-100 rounded-lg">
                  <Lightbulb className="h-6 w-6" />
                </div>
                –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </CardTitle>
            </CardHeader>
            <CardContent>
              {recommendations.length === 0 ? (
                <div className="text-center py-12 text-muted-foreground">
                  <div className="p-6 bg-gradient-to-br from-orange-50 to-amber-50 rounded-2xl mb-6 w-fit mx-auto">
                    <Lightbulb className="h-16 w-16 mx-auto text-orange-400" />
                  </div>
                  <h3 className="text-xl font-semibold mb-2">–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É</h3>
                  <p className="text-lg">–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</p>
                </div>
              ) : (
                <div className="space-y-6">
                  {recommendations.map((rec, index) => (
                    <div
                      key={rec.id}
                      className={`p-6 rounded-xl border-2 ${getPriorityColor(rec.priority)} transform hover:scale-[1.02] transition-all duration-300 shadow-sm hover:shadow-md animate-fade-in`}
                      style={{ animationDelay: `${index * 100}ms` }}
                    >
                      <div className="flex items-start justify-between mb-4">
                        <h4 className="font-bold text-lg">{rec.title}</h4>
                        <span className="text-sm px-3 py-1 rounded-full bg-white/90 font-medium border">
                          {getPriorityText(rec.priority)}
                        </span>
                      </div>
                      <p className="text-base mb-4 leading-relaxed">{rec.description}</p>
                      <div className="flex items-center gap-2">
                        <div className="w-2 h-2 rounded-full bg-current opacity-60"></div>
                        <span className="text-sm font-medium opacity-75">
                          {rec.category}
                        </span>
                      </div>
                    </div>
                  ))}
                  
                  <div className="mt-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl border-2 border-blue-200">
                    <div className="flex items-center gap-3 mb-3">
                      <div className="p-2 bg-blue-100 rounded-lg">
                        <div className="text-xl">üìä</div>
                      </div>
                      <h4 className="text-lg font-bold text-blue-800">
                        –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∑–¥–æ—Ä–æ–≤—å—è
                      </h4>
                    </div>
                    <p className="text-base text-blue-700 leading-relaxed">
                      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤, –∏—Å—Ç–æ—Ä–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è, —Ç–µ–∫—É—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
                    </p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default ECGSynthesisWorkspace;