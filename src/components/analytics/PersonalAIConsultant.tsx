import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { 
  Brain, 
  Target, 
  AlertTriangle, 
  Apple, 
  Dumbbell, 
  Moon, 
  ClipboardList,
  TrendingUp,
  RefreshCw,
  Loader2,
  TestTube,
  Activity,
  Heart
} from 'lucide-react';
import { CachedAnalytics } from '@/types/analytics';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';

interface PersonalAIConsultantProps {
  analytics: CachedAnalytics;
  healthProfile: any;
}

interface AIConsultationResponse {
  currentAnalysis: string;
  goalsAssessment: string;
  biomarkerAnalysis: string;
  biomarkerRecommendations: string[];
  labTestRecommendations: string[];
  keyFindings: string[];
  nutritionRecommendations: string[];
  activityRecommendations: string[];
  lifestyleRecommendations: string[];
  actionPlan: string[];
  trackingMetrics: string[];
}

const PersonalAIConsultant: React.FC<PersonalAIConsultantProps> = ({
  analytics,
  healthProfile
}) => {
  const { user } = useAuth();
  const [consultation, setConsultation] = useState<AIConsultationResponse | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const generateConsultation = async () => {
    if (!analytics || !healthProfile || !user) {
      setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
      return;
    }

    setIsGenerating(true);
    setError(null);

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const consultationData = {
        healthScore: analytics.healthScore,
        riskLevel: analytics.riskLevel,
        biomarkers: [], // –ë—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã
        goals: healthProfile.healthGoals || [],
        userGoals: [], // –ë—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–ª–∏
        age: healthProfile.age,
        gender: healthProfile.gender,
        weight: healthProfile.weight,
        height: healthProfile.height,
        exerciseFrequency: healthProfile.exerciseFrequency,
        sleepHours: healthProfile.sleepHours,
        stressLevel: healthProfile.stressLevel,
        medicalConditions: healthProfile.medicalConditions || [],
        allergies: healthProfile.allergies || [],
        lastUpdated: analytics.lastUpdated
      };

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        console.log('üîç Loading biomarkers for user:', user.id);
        const { data: analyses } = await supabase
          .from('medical_analyses')
          .select('id')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false });

        console.log('üìä Found analyses:', analyses?.length || 0);

        if (analyses && analyses.length > 0) {
          const analysisIds = analyses.map(a => a.id);
          const { data: biomarkers } = await supabase
            .from('biomarkers')
            .select('*')
            .in('analysis_id', analysisIds)
            .order('created_at', { ascending: false });
          
          console.log('üß™ Found biomarkers:', biomarkers?.length || 0);
          consultationData.biomarkers = biomarkers || [];
        }
      } catch (error) {
        console.error('Error loading biomarkers:', error);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–ª–∏
      try {
        console.log('üéØ Loading user goals for user:', user.id);
        const { data: userGoals } = await supabase
          .from('user_health_goals')
          .select('*')
          .eq('user_id', user.id)
          .eq('is_active', true);
        
        console.log('üìù Found user goals:', userGoals?.length || 0);
        consultationData.userGoals = userGoals || [];
      } catch (error) {
        console.error('Error loading user goals:', error);
      }

      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
      const mockConsultation: AIConsultationResponse = {
        currentAnalysis: generateCurrentAnalysis(consultationData),
        goalsAssessment: generateGoalsAssessment(consultationData),
        biomarkerAnalysis: generateBiomarkerAnalysis(consultationData),
        biomarkerRecommendations: generateBiomarkerRecommendations(consultationData),
        labTestRecommendations: generateLabTestRecommendations(consultationData),
        keyFindings: generateKeyFindings(consultationData),
        nutritionRecommendations: generateNutritionRecommendations(consultationData),
        activityRecommendations: generateActivityRecommendations(consultationData),
        lifestyleRecommendations: generateLifestyleRecommendations(consultationData),
        actionPlan: generateActionPlan(consultationData),
        trackingMetrics: generateTrackingMetrics(consultationData)
      };

      setConsultation(mockConsultation);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
      console.error('Consultation generation error:', err);
    } finally {
      setIsGenerating(false);
    }
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const generateCurrentAnalysis = (data: any): string => {
    const bmi = data.weight / Math.pow(data.height / 100, 2);
    const bmiStatus = bmi < 18.5 ? '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å' : 
                     bmi < 25 ? '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å' : 
                     bmi < 30 ? '–∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å' : '–æ–∂–∏—Ä–µ–Ω–∏–µ';
    
    return `–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${data.healthScore}/100 (${data.riskLevel}). –ò–ú–¢: ${bmi.toFixed(1)} (${bmiStatus}). –°—Ä–µ–¥–Ω–∏–π —Å–æ–Ω: ${data.sleepHours}—á, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${data.exerciseFrequency} —Ä–∞–∑/–Ω–µ–¥–µ–ª—é, —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${data.stressLevel}/10.`;
  };

  const generateGoalsAssessment = (data: any): string => {
    const allGoals: string[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–ª–∏
    if (data.goals && data.goals.length > 0) {
      allGoals.push(...data.goals);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–ª–∏
    if (data.userGoals && data.userGoals.length > 0) {
      const userGoalTitles = data.userGoals.map((goal: any) => goal.title || goal.goal_type);
      allGoals.push(...userGoalTitles);
    }
    
    if (allGoals.length === 0) {
      return '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.';
    }
    
    const goalTranslations: Record<string, string> = {
      'weight_loss': '—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞',
      'muscle_gain': '–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
      'cardiovascular': '—É–ª—É—á—à–µ–Ω–∏–µ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è',
      'energy_boost': '–ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
      'sleep_improvement': '—É–ª—É—á—à–µ–Ω–∏–µ —Å–Ω–∞',
      'biological_age': '–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–æ–∑—Ä–∞—Å—Ç',
      'cognitive': '–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      'musculoskeletal': '–æ–ø–æ—Ä–Ω–æ-–¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
      'metabolism': '–º–µ—Ç–∞–±–æ–ª–∏–∑–º',
      'stress_reduction': '—Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞',
      'immunity_boost': '—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞',
      'longevity': '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏',
      'hormonal_balance': '–≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å',
      'digestive_health': '–∑–¥–æ—Ä–æ–≤—å–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è',
      'skin_health': '–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–∂–∏',
      'metabolic_health': '–º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      'bone_health': '–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ—Å—Ç–µ–π',
      'mental_health': '–ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      'detox': '–¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞',
      'athletic_performance': '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const translatedGoals = allGoals.map((goal: string) => goalTranslations[goal] || goal);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ü–µ–ª–µ–µ–π
    const standardGoalsCount = data.goals ? data.goals.length : 0;
    const userGoalsCount = data.userGoals ? data.userGoals.length : 0;
    
    let goalInfo = '';
    if (userGoalsCount > 0 && standardGoalsCount > 0) {
      goalInfo = ` (${standardGoalsCount} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö + ${userGoalsCount} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö)`;
    } else if (userGoalsCount > 0) {
      goalInfo = ` (${userGoalsCount} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö)`;
    }
    
    if (translatedGoals.length === 1) {
      return `–í–∞—à–∞ —Ü–µ–ª—å: ${translatedGoals[0]}${goalInfo}. –≠—Ç–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å –∑–∞ 3-6 –º–µ—Å—è—Ü–µ–≤ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ.`;
    } else {
      const primaryGoals = translatedGoals.slice(0, 3).join(', ');
      const additionalCount = Math.max(0, translatedGoals.length - 3);
      return `–í–∞—à–∏ —Ü–µ–ª–∏${goalInfo}: ${primaryGoals}${additionalCount > 0 ? ` –∏ –µ—â–µ ${additionalCount}` : ''}. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —ç—Ç–∏—Ö —Ü–µ–ª–µ–π –ø–æ–≤—ã—Å–∏—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.`;
    }
  };

  const generateKeyFindings = (data: any): string[] => {
    const findings: string[] = [];
    
    if (data.healthScore < 60) {
      findings.push('–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ª—É—á—à–µ–Ω–∏—é');
    }
    
    if (data.sleepHours < 7) {
      findings.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–Ω–∞ –º–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤');
    }
    
    if (data.exerciseFrequency < 3) {
      findings.push('–ù–∏–∑–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 3-4 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é');
    }
    
    if (data.stressLevel > 7) {
      findings.push('–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é');
    }
    
    return findings.length > 0 ? findings : ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏'];
  };

  const generateNutritionRecommendations = (data: any): string[] => {
    const recommendations: string[] = [];
    const bmi = data.weight / Math.pow(data.height / 100, 2);
    
    if (bmi > 25) {
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 300-500 –∫–∫–∞–ª/–¥–µ–Ω—å –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞');
      recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ –¥–æ 1.6-2.2–≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã');
    } else if (bmi < 18.5) {
      recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ 300-500 –∫–∫–∞–ª/–¥–µ–Ω—å');
      recommendations.push('–£–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ 2-2.5–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã');
    } else {
      recommendations.push('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–µ–ª–∫–∞');
    }
    
    recommendations.push('–í–∫–ª—é—á–∏—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω: –ª–∏—Å—Ç–æ–≤—ã–µ –æ–≤–æ—â–∏, –∂–∏—Ä–Ω—É—é —Ä—ã–±—É, –æ—Ä–µ—Ö–∏, —è–≥–æ–¥—ã');
    recommendations.push('–ò—Å–∫–ª—é—á–∏—Ç–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∏–∑–±—ã—Ç–æ–∫ —Å–∞—Ö–∞—Ä–∞, —Ç—Ä–∞–Ω—Å–∂–∏—Ä—ã');
    
    return recommendations;
  };

  const generateActivityRecommendations = (data: any): string[] => {
    const recommendations: string[] = [];
    
    if (data.exerciseFrequency < 3) {
      recommendations.push('–ù–∞—á–Ω–∏—Ç–µ —Å 3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 45-60 –º–∏–Ω—É—Ç');
      recommendations.push('–ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ –∫–∞—Ä–¥–∏–æ (2 —Ä–∞–∑–∞) –∏ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (2 —Ä–∞–∑–∞)');
    } else {
      recommendations.push('–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å');
    }
    
    recommendations.push('–•–æ–¥—å–±–∞: 8000-10000 —à–∞–≥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ');
    recommendations.push('–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –≤—Å–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü');
    recommendations.push('–ö–∞—Ä–¥–∏–æ: 150 –º–∏–Ω—É—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é');
    
    return recommendations;
  };

  const generateLifestyleRecommendations = (data: any): string[] => {
    const recommendations: string[] = [];
    
    if (data.sleepHours < 7) {
      recommendations.push(`–£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –¥–æ 7-9 —á–∞—Å–æ–≤ (—Å–µ–π—á–∞—Å: ${data.sleepHours}—á)`);
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º: –ª–æ–∂–∏—Ç–µ—Å—å –∏ –≤—Å—Ç–∞–≤–∞–π—Ç–µ –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è');
    }
    
    if (data.stressLevel > 6) {
      recommendations.push('–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏–ª–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 10-15 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ');
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º: –π–æ–≥–∞, –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ');
    }
    
    recommendations.push('–ü–µ–π—Ç–µ 2-2.5 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å');
    recommendations.push('–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —ç–∫—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ 1 —á–∞—Å –¥–æ —Å–Ω–∞');
    
    return recommendations;
  };

  const generateActionPlan = (data: any): string[] => {
    return [
      '–ù–µ–¥–µ–ª—è 1-2: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ',
      '–ù–µ–¥–µ–ª—è 3-4: –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤–Ω–µ–¥—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º',
      '–ù–µ–¥–µ–ª—è 5-6: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º, —É–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
      '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —á–µ—Ä–µ–∑ 6 –Ω–µ–¥–µ–ª—å: –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–∞'
    ];
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤
  const generateBiomarkerAnalysis = (data: any): string => {
    if (!data.biomarkers || !Array.isArray(data.biomarkers) || data.biomarkers.length === 0) {
      return '–ë–∏–æ–º–∞—Ä–∫–µ—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã –∑–¥–æ—Ä–æ–≤—å—è.';
    }

    const criticalBiomarkers = data.biomarkers.filter((b: any) => 
      b.status === 'critical' || b.status === 'high' || b.status === 'low'
    );
    
    const normalBiomarkers = data.biomarkers.filter((b: any) => b.status === 'normal');

    if (criticalBiomarkers.length === 0) {
      return `–ê–Ω–∞–ª–∏–∑ ${data.biomarkers.length} –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.`;
    }

    return `–ò–∑ ${data.biomarkers.length} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤ –≤—ã—è–≤–ª–µ–Ω–æ ${criticalBiomarkers.length} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è: ${criticalBiomarkers.map((b: any) => b.name).slice(0, 3).join(', ')}${criticalBiomarkers.length > 3 ? ' –∏ –¥—Ä.' : ''}. ${normalBiomarkers.length} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –Ω–æ—Ä–º–µ.`;
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–∏–æ–º–∞—Ä–∫–µ—Ä–∞–º
  const generateBiomarkerRecommendations = (data: any): string[] => {
    if (!data.biomarkers || data.biomarkers.length === 0) {
      return ['–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'];
    }

    const recommendations: string[] = [];
    
    data.biomarkers.forEach((biomarker: any) => {
      if (biomarker.status === 'high') {
        switch (biomarker.name.toLowerCase()) {
          case '—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –æ–±—â–∏–π':
          case '–ª–ø–Ω–ø':
            recommendations.push(`${biomarker.name} –ø–æ–≤—ã—à–µ–Ω (${biomarker.value}): –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã, —É–≤–µ–ª–∏—á—å—Ç–µ –æ–º–µ–≥–∞-3, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏`);
            break;
          case '–≥–ª—é–∫–æ–∑–∞':
            recommendations.push(`${biomarker.name} –ø–æ–≤—ã—à–µ–Ω–∞ (${biomarker.value}): –∏—Å–∫–ª—é—á–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–µ —É–≥–ª–µ–≤–æ–¥—ã, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ü–∏–∏, —É–≤–µ–ª–∏—á—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
            break;
          case '–≥–µ–º–æ–≥–ª–æ–±–∏–Ω':
            recommendations.push(`${biomarker.name} –ø–æ–≤—ã—à–µ–Ω (${biomarker.value}): —É–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º`);
            break;
          default:
            recommendations.push(`${biomarker.name} –ø–æ–≤—ã—à–µ–Ω (${biomarker.value}): —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞`);
        }
      } else if (biomarker.status === 'low') {
        switch (biomarker.name.toLowerCase()) {
          case '–≥–µ–º–æ–≥–ª–æ–±–∏–Ω':
            recommendations.push(`${biomarker.name} –ø–æ–Ω–∏–∂–µ–Ω (${biomarker.value}): —É–≤–µ–ª–∏—á—å—Ç–µ –∂–µ–ª–µ–∑–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –¥–æ–±–∞–≤—å—Ç–µ –≤–∏—Ç–∞–º–∏–Ω C`);
            break;
          case '–≤–∏—Ç–∞–º–∏–Ω d':
            recommendations.push(`${biomarker.name} –ø–æ–Ω–∏–∂–µ–Ω (${biomarker.value}): –±–æ–ª—å—à–µ —Å–æ–ª–Ω—Ü–∞, –¥–æ–±–∞–≤–∫–∏ –≤–∏—Ç–∞–º–∏–Ω–∞ D3 2000-4000 –ú–ï`);
            break;
          case 'b12':
            recommendations.push(`${biomarker.name} –ø–æ–Ω–∏–∂–µ–Ω (${biomarker.value}): –¥–æ–±–∞–≤—å—Ç–µ –º—è—Å–æ, —Ä—ã–±—É, –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ B12 –¥–æ–±–∞–≤–∫–∏`);
            break;
          default:
            recommendations.push(`${biomarker.name} –ø–æ–Ω–∏–∂–µ–Ω (${biomarker.value}): —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω—ã –¥–æ–±–∞–≤–∫–∏`);
        }
      }
    });

    return recommendations.length > 0 ? recommendations : ['–í—Å–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏'];
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º —Ç–µ—Å—Ç–∞–º
  const generateLabTestRecommendations = (data: any): string[] => {
    const recommendations: string[] = [];
    
    // –ë–∞–∑–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã
    if (!data.biomarkers || data.biomarkers.length < 10) {
      recommendations.push('–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ (–≥–µ–º–æ–≥–ª–æ–±–∏–Ω, —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã, –ª–µ–π–∫–æ—Ü–∏—Ç—ã, —Ç—Ä–æ–º–±–æ—Ü–∏—Ç—ã)');
      recommendations.push('–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–≥–ª—é–∫–æ–∑–∞, —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω, –ø–µ—á–µ–Ω–æ—á–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã)');
    }
    
    // –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if (data.age > 40) {
      recommendations.push('–ü–°–ê (–¥–ª—è –º—É–∂—á–∏–Ω) / –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å (–¥–ª—è –∂–µ–Ω—â–∏–Ω)');
      recommendations.push('–ö–∞–ª—å—Ü–∏–π –∏ —Ñ–æ—Å—Ñ–æ—Ä (–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ—Å—Ç–µ–π)');
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–ª–∏
    const allGoals = [...(data.goals || [])];
    if (data.userGoals) {
      allGoals.push(...data.userGoals.map((g: any) => g.goal_type || g.title?.toLowerCase()));
    }
    
    // –ù–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π
    if (allGoals.includes('cardiovascular') || allGoals.some(g => g?.includes('—Å–µ—Ä–¥—Ü–µ') || g?.includes('–¥–∞–≤–ª–µ–Ω–∏–µ'))) {
      recommendations.push('–õ–∏–ø–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–õ–ü–í–ü, –õ–ü–ù–ü, —Ç—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã)');
      recommendations.push('–ì–æ–º–æ—Ü–∏—Å—Ç–µ–∏–Ω, C-—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–ª–æ–∫');
    }
    
    if (allGoals.includes('metabolism') || allGoals.includes('weight_loss') || 
        allGoals.some(g => g?.includes('–≤–µ—Å') || g?.includes('–º–µ—Ç–∞–±–æ–ª–∏–∑–º'))) {
      recommendations.push('–ò–Ω—Å—É–ª–∏–Ω, HbA1c (–≥–ª–∏–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–º–æ–≥–ª–æ–±–∏–Ω)');
      recommendations.push('–¢–∏—Ä–µ–æ—Ç—Ä–æ–ø–Ω—ã–π –≥–æ—Ä–º–æ–Ω (–¢–¢–ì), T3, T4');
    }
    
    if (allGoals.includes('energy_boost') || data.stressLevel > 6 || 
        allGoals.some(g => g?.includes('—ç–Ω–µ—Ä–≥–∏—è') || g?.includes('—É—Å—Ç–∞–ª–æ—Å—Ç—å'))) {
      recommendations.push('–ö–æ—Ä—Ç–∏–∑–æ–ª, –í–∏—Ç–∞–º–∏–Ω D, B12, –∂–µ–ª–µ–∑–æ');
      recommendations.push('–§–µ—Ä—Ä–∏—Ç–∏–Ω, —Ñ–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞');
    }
    
    if (allGoals.some(g => g?.includes('–º—ã—à—Ü—ã') || g?.includes('—Å–ø–æ—Ä—Ç'))) {
      recommendations.push('–ö—Ä–µ–∞—Ç–∏–Ω–∫–∏–Ω–∞–∑–∞, –ª–∞–∫—Ç–∞—Ç–¥–µ–≥–∏–¥—Ä–æ–≥–µ–Ω–∞–∑–∞');
      recommendations.push('–¢–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω (–æ–±—â–∏–π –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π)');
    }
    
    // –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–ø—Ç–æ–º–æ–≤
    if (data.sleepHours < 7) {
      recommendations.push('–ú–µ–ª–∞—Ç–æ–Ω–∏–Ω, –º–∞–≥–Ω–∏–π –≤ —Å—ã–≤–æ—Ä–æ—Ç–∫–µ');
    }
    
    return recommendations.length > 0 ? recommendations : ['–†–µ–≥—É–ª—è—Ä–Ω—ã–π –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∏ –±–∏–æ—Ö–∏–º–∏—è (—Ä–∞–∑ –≤ 6 –º–µ—Å—è—Ü–µ–≤)'];
  };

  const generateTrackingMetrics = (data: any): string[] => {
    return [
      '–í–µ—Å (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ —É—Ç—Ä–∞–º)',
      '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ —à–∫–∞–ª–µ 1-10)',
      '–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)',
      '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)',
      '–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)'
    ];
  };

  useEffect(() => {
    generateConsultation();
  }, [analytics, healthProfile]);

  if (isGenerating) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin text-blue-500 mx-auto mb-3" />
          <p className="text-gray-600">–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-8">
        <AlertTriangle className="h-8 w-8 text-red-500 mx-auto mb-3" />
        <p className="text-red-600 mb-4">{error}</p>
        <Button onClick={generateConsultation} variant="outline">
          <RefreshCw className="h-4 w-4 mr-2" />
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </Button>
      </div>
    );
  }

  if (!consultation) {
    return null;
  }

  return (
    <div className="space-y-4">
            {/* –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">üìä</span>
                <h3 className="font-semibold text-gray-900">–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è</h3>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {consultation.currentAnalysis}
              </p>
            </div>

            <Separator />

            {/* –û—Ü–µ–Ω–∫–∞ —Ü–µ–ª–µ–π */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">üéØ</span>
                <h3 className="font-semibold text-gray-900">–û—Ü–µ–Ω–∫–∞ —Ü–µ–ª–µ–π</h3>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {consultation.goalsAssessment}
              </p>
            </div>

            <Separator />

            {/* –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">‚ö†Ô∏è</span>
                <h3 className="font-semibold text-gray-900">–ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏</h3>
              </div>
              <div className="space-y-2">
                {consultation.keyFindings.map((finding, index) => (
                  <div key={index} className="flex items-start gap-2">
                    <div className="w-1.5 h-1.5 bg-amber-500 rounded-full mt-2 flex-shrink-0" />
                    <p className="text-sm text-gray-700">{finding}</p>
                  </div>
                ))}
              </div>
            </div>

            <Separator />

            {/* –ê–Ω–∞–ª–∏–∑ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤ */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">üß™</span>
                <h3 className="font-semibold text-gray-900">–ê–Ω–∞–ª–∏–∑ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤</h3>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {consultation.biomarkerAnalysis}
              </p>
            </div>

            <Separator />

            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∏–æ–º–∞—Ä–∫–µ—Ä–∞–º */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">üíä</span>
                <h3 className="font-semibold text-gray-900">–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤</h3>
              </div>
              <div className="space-y-2">
                {consultation.biomarkerRecommendations.map((rec, index) => (
                  <div key={index} className="flex items-start gap-2">
                    <div className="w-1.5 h-1.5 bg-red-500 rounded-full mt-2 flex-shrink-0" />
                    <p className="text-sm text-gray-700">{rec}</p>
                  </div>
                ))}
              </div>
            </div>

            <Separator />

            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º —Ç–µ—Å—Ç–∞–º */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">üî¨</span>
                <h3 className="font-semibold text-gray-900">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞–Ω–∞–ª–∏–∑—ã</h3>
              </div>
              <div className="space-y-2">
                {consultation.labTestRecommendations.map((rec, index) => (
                  <div key={index} className="flex items-start gap-2">
                    <div className="w-1.5 h-1.5 bg-orange-500 rounded-full mt-2 flex-shrink-0" />
                    <p className="text-sm text-gray-700">{rec}</p>
                  </div>
                ))}
              </div>
            </div>

            <Separator />

            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">üçé</span>
                <h3 className="font-semibold text-gray-900">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é</h3>
              </div>
              <div className="space-y-2">
                {consultation.nutritionRecommendations.map((rec, index) => (
                  <div key={index} className="flex items-start gap-2">
                    <div className="w-1.5 h-1.5 bg-green-500 rounded-full mt-2 flex-shrink-0" />
                    <p className="text-sm text-gray-700">{rec}</p>
                  </div>
                ))}
              </div>
            </div>

            <Separator />

            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">üí™</span>
                <h3 className="font-semibold text-gray-900">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
              </div>
              <div className="space-y-2">
                {consultation.activityRecommendations.map((rec, index) => (
                  <div key={index} className="flex items-start gap-2">
                    <div className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0" />
                    <p className="text-sm text-gray-700">{rec}</p>
                  </div>
                ))}
              </div>
            </div>

            <Separator />

            {/* –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">üåô</span>
                <h3 className="font-semibold text-gray-900">–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏</h3>
              </div>
              <div className="space-y-2">
                {consultation.lifestyleRecommendations.map((rec, index) => (
                  <div key={index} className="flex items-start gap-2">
                    <div className="w-1.5 h-1.5 bg-purple-500 rounded-full mt-2 flex-shrink-0" />
                    <p className="text-sm text-gray-700">{rec}</p>
                  </div>
                ))}
              </div>
            </div>

            <Separator />

            {/* –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">üìã</span>
                <h3 className="font-semibold text-gray-900">–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ 4-6 –Ω–µ–¥–µ–ª—å</h3>
              </div>
              <div className="space-y-2">
                {consultation.actionPlan.map((step, index) => (
                   <div key={index} className="flex items-start gap-3 p-3 bg-gray-50">
                     <Badge variant="outline" className="flex-shrink-0">
                       {index + 1}
                     </Badge>
                     <p className="text-sm text-gray-700">{step}</p>
                   </div>
                ))}
              </div>
            </div>

            <Separator />

            {/* –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <span className="text-lg">üìà</span>
                <h3 className="font-semibold text-gray-900">–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</h3>
              </div>
              <div className="grid grid-cols-1 gap-2">
                {consultation.trackingMetrics.map((metric, index) => (
                   <div key={index} className="flex items-center gap-2 p-2 bg-blue-50">
                     <TrendingUp className="h-4 w-4 text-blue-500 flex-shrink-0" />
                     <p className="text-sm text-gray-700">{metric}</p>
                   </div>
                ))}
              </div>
            </div>
    </div>
  );
};

export default PersonalAIConsultant;