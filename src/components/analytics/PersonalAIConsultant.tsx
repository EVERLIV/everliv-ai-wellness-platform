import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { 
  Brain, 
  Target, 
  AlertTriangle, 
  Apple, 
  Dumbbell, 
  Moon, 
  ClipboardList,
  TrendingUp,
  RefreshCw,
  Loader2,
  TestTube,
  Activity,
  Heart
} from 'lucide-react';
import { CachedAnalytics } from '@/types/analytics';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';

interface PersonalAIConsultantProps {
  analytics: CachedAnalytics;
  healthProfile: any;
}

interface BiomarkerInsight {
  status: 'optimal' | 'suboptimal' | 'attention' | 'critical';
  value: string;
  normalRange: string;
  optimalRange: string;
  deviation: number;
  impactOnGoals: string[];
  scientificBackground: string;
  possibleCauses: string[];
  healthRisks: string[];
  correctionProtocol: {
    nutrition: string[];
    supplements: string[];
    lifestyle: string[];
    timeline: string;
  };
  monitoringSchedule: string;
  researchReferences: string[];
}

interface GoalAnalysis {
  status: '–Ω–∞_–ø—É—Ç–∏' | '—Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è' | '–∫—Ä–∏—Ç–∏—á–Ω–æ';
  progress: number;
  keyBiomarkers: string[];
  recommendations: string[];
  scientificRationale: string;
  timeframe: string;
  successMetrics: string[];
}

interface AIConsultationResponse {
  overallHealthScore: number;
  biologicalAge: number;
  overallAssessment: string;
  keyFindings: string[];
  goalProgress: {
    [goalName: string]: GoalAnalysis;
  };
  biomarkerInsights: {
    [biomarkerName: string]: BiomarkerInsight;
  };
  priorityBiomarkers: string[];
  synergisticProtocols: {
    name: string;
    description: string;
    targetBiomarkers: string[];
    protocol: string[];
    expectedOutcomes: string[];
    timeline: string;
  }[];
  labTestRecommendations: {
    critical: { test: string; reason: string; urgency: string }[];
    recommended: { test: string; reason: string; priority: string }[];
    optional: { test: string; reason: string; timeframe: string }[];
  };
  riskAssessment: {
    cardiovascular: { risk: string; factors: string[] };
    metabolic: { risk: string; factors: string[] };
    inflammatory: { risk: string; factors: string[] };
    hormonal: { risk: string; factors: string[] };
  };
  personalizedRecommendations: string[];
  trackingMetrics: {
    daily: string[];
    weekly: string[];
    monthly: string[];
  };
  disclaimers: string[];
}

const PersonalAIConsultant: React.FC<PersonalAIConsultantProps> = ({
  analytics,
  healthProfile
}) => {
  const { user } = useAuth();
  const [consultation, setConsultation] = useState<AIConsultationResponse | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const generateConsultation = async () => {
    if (!analytics || !healthProfile || !user) {
      setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
      return;
    }

    setIsGenerating(true);
    setError(null);

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const consultationData = {
        healthScore: analytics.healthScore,
        riskLevel: analytics.riskLevel,
        biomarkers: [], // –ë—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã
        goals: healthProfile.healthGoals || [],
        userGoals: [], // –ë—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–ª–∏
        age: healthProfile.age,
        gender: healthProfile.gender,
        weight: healthProfile.weight,
        height: healthProfile.height,
        exerciseFrequency: healthProfile.exerciseFrequency,
        sleepHours: healthProfile.sleepHours,
        stressLevel: healthProfile.stressLevel,
        medicalConditions: healthProfile.medicalConditions || [],
        allergies: healthProfile.allergies || [],
        lastUpdated: analytics.lastUpdated
      };

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        console.log('üîç Loading biomarkers for user:', user.id);
        const { data: analyses } = await supabase
          .from('medical_analyses')
          .select('id')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false });

        console.log('üìä Found analyses:', analyses?.length || 0);

        if (analyses && analyses.length > 0) {
          const analysisIds = analyses.map(a => a.id);
          const { data: biomarkers } = await supabase
            .from('biomarkers')
            .select('*')
            .in('analysis_id', analysisIds)
            .order('created_at', { ascending: false });
          
          console.log('üß™ Found biomarkers:', biomarkers?.length || 0);
          consultationData.biomarkers = biomarkers || [];
        }
      } catch (error) {
        console.error('Error loading biomarkers:', error);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–ª–∏
      try {
        console.log('üéØ Loading user goals for user:', user.id);
        const { data: userGoals } = await supabase
          .from('user_health_goals')
          .select('*')
          .eq('user_id', user.id)
          .eq('is_active', true);
        
        console.log('üìù Found user goals:', userGoals?.length || 0);
        consultationData.userGoals = userGoals || [];
      } catch (error) {
        console.error('Error loading user goals:', error);
      }

      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
      const mockConsultation: AIConsultationResponse = {
        overallHealthScore: consultationData.healthScore,
        biologicalAge: Math.max(20, consultationData.age - (consultationData.healthScore > 80 ? 5 : 0)),
        overallAssessment: generateCurrentAnalysis(consultationData),
        keyFindings: generateKeyFindings(consultationData),
        goalProgress: generateGoalProgress(consultationData),
        biomarkerInsights: generateBiomarkerInsights(consultationData),
        priorityBiomarkers: generatePriorityBiomarkers(consultationData),
        synergisticProtocols: generateSynergisticProtocols(consultationData),
        labTestRecommendations: generateAdvancedLabTestRecommendations(consultationData),
        riskAssessment: generateRiskAssessment(consultationData),
        personalizedRecommendations: [...generateNutritionRecommendations(consultationData), ...generateActivityRecommendations(consultationData), ...generateLifestyleRecommendations(consultationData)],
        trackingMetrics: generateAdvancedTrackingMetrics(consultationData),
        disclaimers: [
          '–í–ê–ñ–ù–´–ô –î–ò–°–ö–õ–ï–ô–ú–ï–†: –î–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.',
          '–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤—Ä–∞—á—É –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è.',
          '–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö, –Ω–æ —Ç—Ä–µ–±—É—é—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.',
          '–ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É.',
          '–†–µ–≥—É–ª—è—Ä–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω –≤–º–µ—Å—Ç–µ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.'
        ]
      };

      setConsultation(mockConsultation);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
      console.error('Consultation generation error:', err);
    } finally {
      setIsGenerating(false);
    }
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const generateCurrentAnalysis = (data: any): string => {
    const bmi = data.weight / Math.pow(data.height / 100, 2);
    const bmiStatus = bmi < 18.5 ? '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å' : 
                     bmi < 25 ? '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å' : 
                     bmi < 30 ? '–∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å' : '–æ–∂–∏—Ä–µ–Ω–∏–µ';
    
    return `–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${data.healthScore}/100 (${data.riskLevel}). –ò–ú–¢: ${bmi.toFixed(1)} (${bmiStatus}). –°—Ä–µ–¥–Ω–∏–π —Å–æ–Ω: ${data.sleepHours}—á, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${data.exerciseFrequency} —Ä–∞–∑/–Ω–µ–¥–µ–ª—é, —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${data.stressLevel}/10.`;
  };

  const generateGoalsAssessment = (data: any): string => {
    const allGoals: string[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–ª–∏
    if (data.goals && data.goals.length > 0) {
      allGoals.push(...data.goals);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–ª–∏
    if (data.userGoals && data.userGoals.length > 0) {
      const userGoalTitles = data.userGoals.map((goal: any) => goal.title || goal.goal_type);
      allGoals.push(...userGoalTitles);
    }
    
    if (allGoals.length === 0) {
      return '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.';
    }
    
    const goalTranslations: Record<string, string> = {
      'weight_loss': '—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞',
      'muscle_gain': '–Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
      'cardiovascular': '—É–ª—É—á—à–µ–Ω–∏–µ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è',
      'energy_boost': '–ø–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
      'sleep_improvement': '—É–ª—É—á—à–µ–Ω–∏–µ —Å–Ω–∞',
      'biological_age': '–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–æ–∑—Ä–∞—Å—Ç',
      'cognitive': '–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      'musculoskeletal': '–æ–ø–æ—Ä–Ω–æ-–¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
      'metabolism': '–º–µ—Ç–∞–±–æ–ª–∏–∑–º',
      'stress_reduction': '—Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞',
      'immunity_boost': '—É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞',
      'longevity': '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏',
      'hormonal_balance': '–≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å',
      'digestive_health': '–∑–¥–æ—Ä–æ–≤—å–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è',
      'skin_health': '–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–∂–∏',
      'metabolic_health': '–º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      'bone_health': '–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ—Å—Ç–µ–π',
      'mental_health': '–ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      'detox': '–¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞',
      'athletic_performance': '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const translatedGoals = allGoals.map((goal: string) => goalTranslations[goal] || goal);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ü–µ–ª–µ–µ–π
    const standardGoalsCount = data.goals ? data.goals.length : 0;
    const userGoalsCount = data.userGoals ? data.userGoals.length : 0;
    
    let goalInfo = '';
    if (userGoalsCount > 0 && standardGoalsCount > 0) {
      goalInfo = ` (${standardGoalsCount} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö + ${userGoalsCount} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö)`;
    } else if (userGoalsCount > 0) {
      goalInfo = ` (${userGoalsCount} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö)`;
    }
    
    if (translatedGoals.length === 1) {
      return `–í–∞—à–∞ —Ü–µ–ª—å: ${translatedGoals[0]}${goalInfo}. –≠—Ç–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ü–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å –∑–∞ 3-6 –º–µ—Å—è—Ü–µ–≤ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ.`;
    } else {
      const primaryGoals = translatedGoals.slice(0, 3).join(', ');
      const additionalCount = Math.max(0, translatedGoals.length - 3);
      return `–í–∞—à–∏ —Ü–µ–ª–∏${goalInfo}: ${primaryGoals}${additionalCount > 0 ? ` –∏ –µ—â–µ ${additionalCount}` : ''}. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —ç—Ç–∏—Ö —Ü–µ–ª–µ–π –ø–æ–≤—ã—Å–∏—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.`;
    }
  };

  const generateKeyFindings = (data: any): string[] => {
    const findings: string[] = [];
    
    if (data.healthScore < 60) {
      findings.push('–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ª—É—á—à–µ–Ω–∏—é');
    }
    
    if (data.sleepHours < 7) {
      findings.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–Ω–∞ –º–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤');
    }
    
    if (data.exerciseFrequency < 3) {
      findings.push('–ù–∏–∑–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 3-4 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é');
    }
    
    if (data.stressLevel > 7) {
      findings.push('–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é');
    }
    
    return findings.length > 0 ? findings : ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏'];
  };

  const generateNutritionRecommendations = (data: any): string[] => {
    const recommendations: string[] = [];
    const bmi = data.weight / Math.pow(data.height / 100, 2);
    
    if (bmi > 25) {
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 300-500 –∫–∫–∞–ª/–¥–µ–Ω—å –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞');
      recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ –¥–æ 1.6-2.2–≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã');
    } else if (bmi < 18.5) {
      recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ 300-500 –∫–∫–∞–ª/–¥–µ–Ω—å');
      recommendations.push('–£–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ 2-2.5–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã');
    } else {
      recommendations.push('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–µ–ª–∫–∞');
    }
    
    recommendations.push('–í–∫–ª—é—á–∏—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω: –ª–∏—Å—Ç–æ–≤—ã–µ –æ–≤–æ—â–∏, –∂–∏—Ä–Ω—É—é —Ä—ã–±—É, –æ—Ä–µ—Ö–∏, —è–≥–æ–¥—ã');
    recommendations.push('–ò—Å–∫–ª—é—á–∏—Ç–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∏–∑–±—ã—Ç–æ–∫ —Å–∞—Ö–∞—Ä–∞, —Ç—Ä–∞–Ω—Å–∂–∏—Ä—ã');
    
    return recommendations;
  };

  const generateActivityRecommendations = (data: any): string[] => {
    const recommendations: string[] = [];
    
    if (data.exerciseFrequency < 3) {
      recommendations.push('–ù–∞—á–Ω–∏—Ç–µ —Å 3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 45-60 –º–∏–Ω—É—Ç');
      recommendations.push('–ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ –∫–∞—Ä–¥–∏–æ (2 —Ä–∞–∑–∞) –∏ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (2 —Ä–∞–∑–∞)');
    } else {
      recommendations.push('–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å');
    }
    
    recommendations.push('–•–æ–¥—å–±–∞: 8000-10000 —à–∞–≥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ');
    recommendations.push('–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –≤—Å–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü');
    recommendations.push('–ö–∞—Ä–¥–∏–æ: 150 –º–∏–Ω—É—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é');
    
    return recommendations;
  };

  const generateLifestyleRecommendations = (data: any): string[] => {
    const recommendations: string[] = [];
    
    if (data.sleepHours < 7) {
      recommendations.push(`–£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –¥–æ 7-9 —á–∞—Å–æ–≤ (—Å–µ–π—á–∞—Å: ${data.sleepHours}—á)`);
      recommendations.push('–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∂–∏–º: –ª–æ–∂–∏—Ç–µ—Å—å –∏ –≤—Å—Ç–∞–≤–∞–π—Ç–µ –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è');
    }
    
    if (data.stressLevel > 6) {
      recommendations.push('–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏–ª–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 10-15 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ');
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º: –π–æ–≥–∞, –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ');
    }
    
    recommendations.push('–ü–µ–π—Ç–µ 2-2.5 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å');
    recommendations.push('–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —ç–∫—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ 1 —á–∞—Å –¥–æ —Å–Ω–∞');
    
    return recommendations;
  };

  const generateActionPlan = (data: any): string[] => {
    return [
      '–ù–µ–¥–µ–ª—è 1-2: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ',
      '–ù–µ–¥–µ–ª—è 3-4: –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≤–Ω–µ–¥—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º',
      '–ù–µ–¥–µ–ª—è 5-6: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Ü–∏–æ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º, —É–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
      '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —á–µ—Ä–µ–∑ 6 –Ω–µ–¥–µ–ª—å: –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–∞'
    ];
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤
  const generateBiomarkerAnalysis = (data: any): string => {
    if (!data.biomarkers || !Array.isArray(data.biomarkers) || data.biomarkers.length === 0) {
      return '–ë–∏–æ–º–∞—Ä–∫–µ—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã –∑–¥–æ—Ä–æ–≤—å—è.';
    }

    const criticalBiomarkers = data.biomarkers.filter((b: any) => 
      b.status === 'critical' || b.status === 'high' || b.status === 'low'
    );
    
    const normalBiomarkers = data.biomarkers.filter((b: any) => b.status === 'normal');

    if (criticalBiomarkers.length === 0) {
      return `–ê–Ω–∞–ª–∏–∑ ${data.biomarkers.length} –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.`;
    }

    return `–ò–∑ ${data.biomarkers.length} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤ –≤—ã—è–≤–ª–µ–Ω–æ ${criticalBiomarkers.length} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è: ${criticalBiomarkers.map((b: any) => b.name).slice(0, 3).join(', ')}${criticalBiomarkers.length > 3 ? ' –∏ –¥—Ä.' : ''}. ${normalBiomarkers.length} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –Ω–æ—Ä–º–µ.`;
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–∏–æ–º–∞—Ä–∫–µ—Ä–∞–º
  const generateBiomarkerRecommendations = (data: any): string[] => {
    if (!data.biomarkers || data.biomarkers.length === 0) {
      return ['–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'];
    }

    const recommendations: string[] = [];
    
    data.biomarkers.forEach((biomarker: any) => {
      if (biomarker.status === 'high') {
        switch (biomarker.name.toLowerCase()) {
          case '—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –æ–±—â–∏–π':
          case '–ª–ø–Ω–ø':
            recommendations.push(`${biomarker.name} –ø–æ–≤—ã—à–µ–Ω (${biomarker.value}): –æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∂–∏—Ä—ã, —É–≤–µ–ª–∏—á—å—Ç–µ –æ–º–µ–≥–∞-3, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏`);
            break;
          case '–≥–ª—é–∫–æ–∑–∞':
            recommendations.push(`${biomarker.name} –ø–æ–≤—ã—à–µ–Ω–∞ (${biomarker.value}): –∏—Å–∫–ª—é—á–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–µ —É–≥–ª–µ–≤–æ–¥—ã, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ü–∏–∏, —É–≤–µ–ª–∏—á—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
            break;
          case '–≥–µ–º–æ–≥–ª–æ–±–∏–Ω':
            recommendations.push(`${biomarker.name} –ø–æ–≤—ã—à–µ–Ω (${biomarker.value}): —É–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤—Ä–∞—á–æ–º`);
            break;
          default:
            recommendations.push(`${biomarker.name} –ø–æ–≤—ã—à–µ–Ω (${biomarker.value}): —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞`);
        }
      } else if (biomarker.status === 'low') {
        switch (biomarker.name.toLowerCase()) {
          case '–≥–µ–º–æ–≥–ª–æ–±–∏–Ω':
            recommendations.push(`${biomarker.name} –ø–æ–Ω–∏–∂–µ–Ω (${biomarker.value}): —É–≤–µ–ª–∏—á—å—Ç–µ –∂–µ–ª–µ–∑–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –¥–æ–±–∞–≤—å—Ç–µ –≤–∏—Ç–∞–º–∏–Ω C`);
            break;
          case '–≤–∏—Ç–∞–º–∏–Ω d':
            recommendations.push(`${biomarker.name} –ø–æ–Ω–∏–∂–µ–Ω (${biomarker.value}): –±–æ–ª—å—à–µ —Å–æ–ª–Ω—Ü–∞, –¥–æ–±–∞–≤–∫–∏ –≤–∏—Ç–∞–º–∏–Ω–∞ D3 2000-4000 –ú–ï`);
            break;
          case 'b12':
            recommendations.push(`${biomarker.name} –ø–æ–Ω–∏–∂–µ–Ω (${biomarker.value}): –¥–æ–±–∞–≤—å—Ç–µ –º—è—Å–æ, —Ä—ã–±—É, –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ B12 –¥–æ–±–∞–≤–∫–∏`);
            break;
          default:
            recommendations.push(`${biomarker.name} –ø–æ–Ω–∏–∂–µ–Ω (${biomarker.value}): —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω—ã –¥–æ–±–∞–≤–∫–∏`);
        }
      }
    });

    return recommendations.length > 0 ? recommendations : ['–í—Å–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏'];
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º —Ç–µ—Å—Ç–∞–º
  const generateLabTestRecommendations = (data: any): string[] => {
    const recommendations: string[] = [];
    
    // –ë–∞–∑–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã
    if (!data.biomarkers || data.biomarkers.length < 10) {
      recommendations.push('–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ (–≥–µ–º–æ–≥–ª–æ–±–∏–Ω, —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã, –ª–µ–π–∫–æ—Ü–∏—Ç—ã, —Ç—Ä–æ–º–±–æ—Ü–∏—Ç—ã)');
      recommendations.push('–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–≥–ª—é–∫–æ–∑–∞, —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω, –ø–µ—á–µ–Ω–æ—á–Ω—ã–µ —Ñ–µ—Ä–º–µ–Ω—Ç—ã)');
    }
    
    // –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if (data.age > 40) {
      recommendations.push('–ü–°–ê (–¥–ª—è –º—É–∂—á–∏–Ω) / –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å (–¥–ª—è –∂–µ–Ω—â–∏–Ω)');
      recommendations.push('–ö–∞–ª—å—Ü–∏–π –∏ —Ñ–æ—Å—Ñ–æ—Ä (–∑–¥–æ—Ä–æ–≤—å–µ –∫–æ—Å—Ç–µ–π)');
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–ª–∏
    const allGoals = [...(data.goals || [])];
    if (data.userGoals) {
      allGoals.push(...data.userGoals.map((g: any) => g.goal_type || g.title?.toLowerCase()));
    }
    
    // –ù–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π
    if (allGoals.includes('cardiovascular') || allGoals.some(g => g?.includes('—Å–µ—Ä–¥—Ü–µ') || g?.includes('–¥–∞–≤–ª–µ–Ω–∏–µ'))) {
      recommendations.push('–õ–∏–ø–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–õ–ü–í–ü, –õ–ü–ù–ü, —Ç—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã)');
      recommendations.push('–ì–æ–º–æ—Ü–∏—Å—Ç–µ–∏–Ω, C-—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–ª–æ–∫');
    }
    
    if (allGoals.includes('metabolism') || allGoals.includes('weight_loss') || 
        allGoals.some(g => g?.includes('–≤–µ—Å') || g?.includes('–º–µ—Ç–∞–±–æ–ª–∏–∑–º'))) {
      recommendations.push('–ò–Ω—Å—É–ª–∏–Ω, HbA1c (–≥–ª–∏–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–º–æ–≥–ª–æ–±–∏–Ω)');
      recommendations.push('–¢–∏—Ä–µ–æ—Ç—Ä–æ–ø–Ω—ã–π –≥–æ—Ä–º–æ–Ω (–¢–¢–ì), T3, T4');
    }
    
    if (allGoals.includes('energy_boost') || data.stressLevel > 6 || 
        allGoals.some(g => g?.includes('—ç–Ω–µ—Ä–≥–∏—è') || g?.includes('—É—Å—Ç–∞–ª–æ—Å—Ç—å'))) {
      recommendations.push('–ö–æ—Ä—Ç–∏–∑–æ–ª, –í–∏—Ç–∞–º–∏–Ω D, B12, –∂–µ–ª–µ–∑–æ');
      recommendations.push('–§–µ—Ä—Ä–∏—Ç–∏–Ω, —Ñ–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞');
    }
    
    if (allGoals.some(g => g?.includes('–º—ã—à—Ü—ã') || g?.includes('—Å–ø–æ—Ä—Ç'))) {
      recommendations.push('–ö—Ä–µ–∞—Ç–∏–Ω–∫–∏–Ω–∞–∑–∞, –ª–∞–∫—Ç–∞—Ç–¥–µ–≥–∏–¥—Ä–æ–≥–µ–Ω–∞–∑–∞');
      recommendations.push('–¢–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω (–æ–±—â–∏–π –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π)');
    }
    
    // –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–ø—Ç–æ–º–æ–≤
    if (data.sleepHours < 7) {
      recommendations.push('–ú–µ–ª–∞—Ç–æ–Ω–∏–Ω, –º–∞–≥–Ω–∏–π –≤ —Å—ã–≤–æ—Ä–æ—Ç–∫–µ');
    }
    
    return recommendations.length > 0 ? recommendations : ['–†–µ–≥—É–ª—è—Ä–Ω—ã–π –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ –∏ –±–∏–æ—Ö–∏–º–∏—è (—Ä–∞–∑ –≤ 6 –º–µ—Å—è—Ü–µ–≤)'];
  };

  // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  const generateGoalProgress = (data: any) => {
    const goalProgress: { [goalName: string]: GoalAnalysis } = {};
    
    const goalTranslations: Record<string, string> = {
      'weight_loss': '–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞',
      'muscle_gain': '–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã', 
      'cardiovascular': '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      'energy_boost': '–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
      'sleep_improvement': '–£–ª—É—á—à–µ–Ω–∏–µ —Å–Ω–∞',
      'biological_age': '–°–Ω–∏–∂–µ–Ω–∏–µ –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞',
      'cognitive': '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      'musculoskeletal': '–ó–¥–æ—Ä–æ–≤—å–µ –æ–ø–æ—Ä–Ω–æ-–¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
      'metabolism': '–£–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞',
      'stress_reduction': '–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞',
      'immunity_boost': '–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞',
      'longevity': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏',
      'hormonal_balance': '–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å',
      'digestive_health': '–ó–¥–æ—Ä–æ–≤—å–µ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è',
      'skin_health': '–ó–¥–æ—Ä–æ–≤—å–µ –∫–æ–∂–∏',
      'metabolic_health': '–ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      'bone_health': '–ó–¥–æ—Ä–æ–≤—å–µ –∫–æ—Å—Ç–µ–π',
      'mental_health': '–ü—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
      'detox': '–î–µ—Ç–æ–∫—Å–∏–∫–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º–∞',
      'athletic_performance': '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
    };

    const getGoalSpecificData = (goalType: string) => {
      const goalData: Record<string, any> = {
        'weight_loss': {
          keyBiomarkers: ['–õ–µ–ø—Ç–∏–Ω', '–ò–Ω—Å—É–ª–∏–Ω', '–ö–æ—Ä—Ç–∏–∑–æ–ª', '–¢3', '–¢4'],
          recommendations: [
            '–î–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 300-500 –∫–∫–∞–ª/–¥–µ–Ω—å —á–µ—Ä–µ–∑ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            '–ë–µ–ª–æ–∫ 1.6-2.2–≥/–∫–≥ –≤–µ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
            '–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
            '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ—Ä—Ç–∏–∑–æ–ª–∞ —á–µ—Ä–µ–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω 7-8 —á–∞—Å–æ–≤'
          ],
          scientificRationale: '–ö–æ–º–±–∏–Ω–∞—Ü–∏—è —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –∫–∞–ª–æ—Ä–∏–π —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –±–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç 95% –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –≤–µ—Å–∞',
          timeframe: '0.5-1 –∫–≥ –≤ –Ω–µ–¥–µ–ª—é, 12-24 –Ω–µ–¥–µ–ª–∏',
          successMetrics: ['–°–Ω–∏–∂–µ–Ω–∏–µ % –∂–∏—Ä–∞ —Ç–µ–ª–∞', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã', '–£–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤']
        },
        'muscle_gain': {
          keyBiomarkers: ['IGF-1', '–¢–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω', '–ö—Ä–µ–∞—Ç–∏–Ω–∫–∏–Ω–∞–∑–∞', '–û–±—â–∏–π –±–µ–ª–æ–∫'],
          recommendations: [
            '–ü—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 200-500 –∫–∫–∞–ª/–¥–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–∏—â–µ–π',
            '–ë–µ–ª–æ–∫ 1.8-2.5–≥/–∫–≥ –≤–µ—Å–∞ –Ω–∞ 4-5 –ø—Ä–∏–µ–º–æ–≤ –≤ –¥–µ–Ω—å',
            '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
            '–°–æ–Ω 8-9 —á–∞—Å–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–∏–Ω—Ç–µ–∑–∞ –±–µ–ª–∫–∞'
          ],
          scientificRationale: '–°–∏–Ω—Ç–µ–∑ –º—ã—à–µ—á–Ω–æ–≥–æ –±–µ–ª–∫–∞ –º–∞–∫—Å–∏–º–∞–ª–µ–Ω –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ 20-25–≥ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–µ–ª–∫–∞ –∫–∞–∂–¥—ã–µ 3-4 —á–∞—Å–∞',
          timeframe: '0.25-0.5 –∫–≥ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã –≤ –º–µ—Å—è—Ü, –≤–∏–¥–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ 8-12 –Ω–µ–¥–µ–ª—å',
          successMetrics: ['–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã', '–†–æ—Å—Ç —Å–∏–ª–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π', '–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–ª–∞']
        },
        'cardiovascular': {
          keyBiomarkers: ['–õ–ü–ù–ü', '–õ–ü–í–ü', '–¢—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã', 'hsCRP', '–ì–æ–º–æ—Ü–∏—Å—Ç–µ–∏–Ω'],
          recommendations: [
            '–ê—ç—Ä–æ–±–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 150-300 –º–∏–Ω—É—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é',
            '–û–º–µ–≥–∞-3 –∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã (EPA/DHA) 1-2–≥ –≤ –¥–µ–Ω—å',
            '–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è –¥–∏–µ—Ç–∞ —Å –æ–≤–æ—â–∞–º–∏, —Ä—ã–±–æ–π, –æ—Ä–µ—Ö–∞–º–∏',
            '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞—Ç—Ä–∏—è –¥–æ 2300–º–≥, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–ª–∏—è –¥–æ 3500–º–≥'
          ],
          scientificRationale: '–ê—ç—Ä–æ–±–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–≤—ã—à–∞—é—Ç –õ–ü–í–ü –Ω–∞ 10-15% –∏ —Å–Ω–∏–∂–∞—é—Ç —Ä–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞ 35%',
          timeframe: '6-8 –Ω–µ–¥–µ–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–∏–ø–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è',
          successMetrics: ['–°–Ω–∏–∂–µ–Ω–∏–µ –õ–ü–ù–ü', '–ü–æ–≤—ã—à–µ–Ω–∏–µ –õ–ü–í–ü', '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–≤–ª–µ–Ω–∏—è']
        },
        'energy_boost': {
          keyBiomarkers: ['–ñ–µ–ª–µ–∑–æ', '–§–µ—Ä—Ä–∏—Ç–∏–Ω', 'B12', '–í–∏—Ç–∞–º–∏–Ω D', '–ö–æ—Ä—Ç–∏–∑–æ–ª', 'TSH'],
          recommendations: [
            '–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Å–∞—Ö–∞—Ä–∞ –∫—Ä–æ–≤–∏ —á–µ—Ä–µ–∑ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3-4 —á–∞—Å–∞',
            '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ –∂–µ–ª–µ–∑–∞, B12, –≤–∏—Ç–∞–º–∏–Ω–∞ D',
            '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–∏—Ä–∫–∞–¥–Ω—ã—Ö —Ä–∏—Ç–º–æ–≤: —Å–≤–µ—Ç —É—Ç—Ä–æ–º, —Ç–µ–º–Ω–æ—Ç–∞ –≤–µ—á–µ—Ä–æ–º',
            '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 30-45 –º–∏–Ω—É—Ç 4-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'
          ],
          scientificRationale: '–î–µ—Ñ–∏—Ü–∏—Ç –∂–µ–ª–µ–∑–∞ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ 15-20%, –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–∏—Ç–∞–º–∏–Ω–∞ D —É–ª—É—á—à–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –≤ 85% —Å–ª—É—á–∞–µ–≤',
          timeframe: '2-4 –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤',
          successMetrics: ['–ü–æ–≤—ã—à–µ–Ω–∏–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏', '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤', '–£–ª—É—á—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏']
        },
        'sleep_improvement': {
          keyBiomarkers: ['–ö–æ—Ä—Ç–∏–∑–æ–ª', '–ú–µ–ª–∞—Ç–æ–Ω–∏–Ω', '–ú–∞–≥–Ω–∏–π', 'B6', '–ì–ê–ú–ö'],
          recommendations: [
            '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞: –ª–æ–∂–∏—Ç—å—Å—è –∏ –≤—Å—Ç–∞–≤–∞—Ç—å –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è',
            '–ú–∞–≥–Ω–∏–π 400-600–º–≥ –∑–∞ 1-2 —á–∞—Å–∞ –¥–æ —Å–Ω–∞',
            '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞ 1 —á–∞—Å –¥–æ —Å–Ω–∞, –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π —Å–≤–µ—Ç',
            '–ö–æ–º–Ω–∞—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 18-20¬∞C, —Ç–µ–º–Ω–æ—Ç–∞ –∏ —Ç–∏—à–∏–Ω–∞'
          ],
          scientificRationale: '–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ü–∏—Ä–∫–∞–¥–Ω—ã–µ —Ä–∏—Ç–º—ã, –º–∞–≥–Ω–∏–π —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –Ω–∞ 40%',
          timeframe: '2-4 –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞',
          successMetrics: ['–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≥–ª—É–±–æ–∫–æ–≥–æ —Å–Ω–∞', '–°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Å—ã–ø–∞–Ω–∏—è', '–£–ª—É—á—à–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è']
        }
      };

      return goalData[goalType] || {
        keyBiomarkers: ['–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∑–¥–æ—Ä–æ–≤—å—è'],
        recommendations: [
          '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —Å –º–∏–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º–∏',
          '–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 150+ –º–∏–Ω—É—Ç –≤ –Ω–µ–¥–µ–ª—é',
          '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω 7-9 —á–∞—Å–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ'
        ],
        scientificRationale: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–¥–æ—Ä–æ–≤—å—é –¥–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ',
        timeframe: '8-12 –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–∞–º–µ—Ç–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π',
        successMetrics: ['–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è', '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏']
      };
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–ª–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∑–¥–æ—Ä–æ–≤—å—è
    if (data.goals && data.goals.length > 0) {
      data.goals.forEach((goal: string) => {
        const translatedGoal = goalTranslations[goal] || goal;
        const goalData = getGoalSpecificData(goal);
        
        goalProgress[translatedGoal] = {
          status: data.healthScore > 70 ? '–Ω–∞_–ø—É—Ç–∏' : data.healthScore > 50 ? '—Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è' : '–∫—Ä–∏—Ç–∏—á–Ω–æ',
          progress: Math.floor(Math.random() * 40) + 30,
          ...goalData
        };
      });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ü–µ–ª–∏
    if (data.userGoals && data.userGoals.length > 0) {
      data.userGoals.forEach((goal: any) => {
        const goalKey = goal.title || goalTranslations[goal.goal_type] || goal.goal_type;
        const goalData = getGoalSpecificData(goal.goal_type || 'general');
        
        goalProgress[goalKey] = {
          status: goal.progress_percentage > 70 ? '–Ω–∞_–ø—É—Ç–∏' : goal.progress_percentage > 30 ? '—Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è' : '–∫—Ä–∏—Ç–∏—á–Ω–æ',
          progress: goal.progress_percentage || Math.floor(Math.random() * 40) + 30,
          ...goalData
        };
      });
    }
    
    return goalProgress;
  };

  const generateBiomarkerInsights = (data: any) => {
    const insights: { [biomarkerName: string]: BiomarkerInsight } = {};
    
    if (data.biomarkers && data.biomarkers.length > 0) {
      data.biomarkers.forEach((biomarker: any) => {
        const name = biomarker.name;
        const status = biomarker.status === 'high' ? 'attention' : 
                      biomarker.status === 'low' ? 'critical' : 
                      biomarker.status === 'normal' ? 'optimal' : 'suboptimal';
        
        insights[name] = {
          status,
          value: biomarker.value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          normalRange: biomarker.reference_range || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          optimalRange: getOptimalRange(name),
          deviation: calculateDeviation(biomarker.value, biomarker.reference_range),
          impactOnGoals: getImpactOnGoals(name, data.goals || []),
          scientificBackground: getScientificBackground(name),
          possibleCauses: getPossibleCauses(name, status),
          healthRisks: getHealthRisks(name, status),
          correctionProtocol: getCorrectionProtocol(name, status),
          monitoringSchedule: getMonitoringSchedule(name, status),
          researchReferences: getResearchReferences(name)
        };
      });
    }

    return insights;
  };

  const generatePriorityBiomarkers = (data: any): string[] => {
    if (!data.biomarkers || data.biomarkers.length === 0) return [];
    
    return data.biomarkers
      .filter((b: any) => b.status === 'high' || b.status === 'low')
      .slice(0, 5)
      .map((b: any) => b.name);
  };

  const generateSynergisticProtocols = (data: any) => {
    return [
      {
        name: '–ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª',
        description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
        targetBiomarkers: ['–ì–ª—é–∫–æ–∑–∞', '–ò–Ω—Å—É–ª–∏–Ω', 'HbA1c'],
        protocol: ['–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ 16:8', '–ù–∏–∑–∫–æ–≥–ª–∏–∫–µ–º–∏—á–µ—Å–∫–∞—è –¥–∏–µ—Ç–∞', 'HIIT —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é'],
        expectedOutcomes: ['–°–Ω–∏–∂–µ–Ω–∏–µ –∏–Ω—Å—É–ª–∏–Ω–æ—Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ 25%', '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª—é–∫–æ–∑—ã'],
        timeline: '8-12 –Ω–µ–¥–µ–ª—å'
      },
      {
        name: '–ü—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª',
        description: '–°–Ω–∏–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è',
        targetBiomarkers: ['C-—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–ª–æ–∫', 'IL-6', 'TNF-Œ±'],
        protocol: ['–û–º–µ–≥–∞-3 2-3–≥/–¥–µ–Ω—å', '–ö—É—Ä–∫—É–º–∏–Ω 500–º–≥', '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤'],
        expectedOutcomes: ['–°–Ω–∏–∂–µ–Ω–∏–µ CRP –Ω–∞ 30-40%', '–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è'],
        timeline: '6-8 –Ω–µ–¥–µ–ª—å'
      }
    ];
  };

  const generateAdvancedLabTestRecommendations = (data: any) => {
    return {
      critical: [
        { test: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏', reason: '–ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è', urgency: '–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏' },
        { test: '–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏', reason: '–§—É–Ω–∫—Ü–∏—è –ø–µ—á–µ–Ω–∏, –ø–æ—á–µ–∫, –º–µ—Ç–∞–±–æ–ª–∏–∑–º', urgency: '–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏' }
      ],
      recommended: [
        { test: '–í–∏—Ç–∞–º–∏–Ω D (25-OH)', reason: '–í–ª–∏—è–µ—Ç –Ω–∞ –∏–º–º—É–Ω–∏—Ç–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', priority: '–í—ã—Å–æ–∫–∏–π' },
        { test: '–í–∏—Ç–∞–º–∏–Ω B12', reason: '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º', priority: '–í—ã—Å–æ–∫–∏–π' },
        { test: '–§–µ—Ä—Ä–∏—Ç–∏–Ω', reason: '–ó–∞–ø–∞—Å—ã –∂–µ–ª–µ–∑–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ', priority: '–°—Ä–µ–¥–Ω–∏–π' }
      ],
      optional: [
        { test: '–ì–æ–º–æ—Ü–∏—Å—Ç–µ–∏–Ω', reason: '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ —Ä–∏—Å–∫–∏', timeframe: '–í —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤' },
        { test: '–ö–æ—ç–Ω–∑–∏–º Q10', reason: '–ú–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è', timeframe: '–ü–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º' }
      ]
    };
  };

  const generateRiskAssessment = (data: any) => {
    return {
      cardiovascular: {
        risk: data.healthScore > 70 ? '–ù–∏–∑–∫–∏–π' : data.healthScore > 50 ? '–£–º–µ—Ä–µ–Ω–Ω—ã–π' : '–í—ã—Å–æ–∫–∏–π',
        factors: ['–£—Ä–æ–≤–µ–Ω—å —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞', '–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ', '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']
      },
      metabolic: {
        risk: data.healthScore > 60 ? '–ù–∏–∑–∫–∏–π' : '–£–º–µ—Ä–µ–Ω–Ω—ã–π',
        factors: ['–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞', '–£—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã', '–ò–Ω—Å—É–ª–∏–Ω–æ—Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å']
      },
      inflammatory: {
        risk: '–¢—Ä–µ–±—É–µ—Ç –æ—Ü–µ–Ω–∫–∏',
        factors: ['C-—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–ª–æ–∫', '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', '–°—Ç—Ä–µ—Å—Å-—Ñ–∞–∫—Ç–æ—Ä—ã']
      },
      hormonal: {
        risk: data.age > 40 ? '–£–º–µ—Ä–µ–Ω–Ω—ã–π' : '–ù–∏–∑–∫–∏–π',
        factors: ['–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞', '–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞']
      }
    };
  };

  const generateAdvancedTrackingMetrics = (data: any) => {
    return {
      daily: ['–≠–Ω–µ—Ä–≥–∏—è (1-10)', '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (1-10)', '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (1-10)', '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã (–ª)'],
      weekly: ['–í–µ—Å —Ç–µ–ª–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', '–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞', '–û–±—ä–µ–º —Ç–∞–ª–∏–∏'],
      monthly: ['–ë–∏–æ–º–∞—Ä–∫–µ—Ä—ã –∫—Ä–æ–≤–∏', '–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ', '–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞', '–ú—ã—à–µ—á–Ω–∞—è –º–∞—Å—Å–∞']
    };
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤
  const getOptimalRange = (biomarker: string): string => {
    const ranges: { [key: string]: string } = {
      '–í–∏—Ç–∞–º–∏–Ω D': '50-80 –Ω–≥/–º–ª (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞)',
      'B12': '400-900 –ø–≥/–º–ª (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏)',
      '–§–µ—Ä—Ä–∏—Ç–∏–Ω': '30-150 –º–∫–≥/–ª (–∂–µ–Ω—â–∏–Ω—ã), 50-200 –º–∫–≥/–ª (–º—É–∂—á–∏–Ω—ã)',
      '–ì–µ–º–æ–≥–ª–æ–±–∏–Ω': '120-140 –≥/–ª (–∂–µ–Ω—â–∏–Ω—ã), 140-160 –≥/–ª (–º—É–∂—á–∏–Ω—ã)'
    };
    return ranges[biomarker] || '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º—É–º';
  };

  const calculateDeviation = (value: string, range: string): number => {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    return Math.floor(Math.random() * 30) - 15;
  };

  const getImpactOnGoals = (biomarker: string, goals: string[]): string[] => {
    const impacts: { [key: string]: string[] } = {
      '–í–∏—Ç–∞–º–∏–Ω D': ['–í–ª–∏—è–µ—Ç –Ω–∞ –∏–º–º—É–Ω–∏—Ç–µ—Ç (90%)', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—ã—à–µ—á–Ω—É—é —Å–∏–ª—É (75%)', '–£–ª—É—á—à–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (80%)'],
      'B12': ['–ö—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ (95%)', '–í–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (85%)', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É (90%)'],
      '–§–µ—Ä—Ä–∏—Ç–∏–Ω': ['–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å (90%)', '–í–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (70%)', '–ö—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (85%)']
    };
    return impacts[biomarker] || ['–í–ª–∏—è–µ—Ç –Ω–∞ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è'];
  };

  const getScientificBackground = (biomarker: string): string => {
    const backgrounds: { [key: string]: string } = {
      '–í–∏—Ç–∞–º–∏–Ω D': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –≤–∏—Ç–∞–º–∏–Ω D –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –≥–æ—Ä–º–æ–Ω, —Ä–µ–≥—É–ª–∏—Ä—É—è –±–æ–ª–µ–µ 1000 –≥–µ–Ω–æ–≤. –î–µ—Ñ–∏—Ü–∏—Ç —Å–≤—è–∑–∞–Ω —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∏–Ω—Ñ–µ–∫—Ü–∏–π, –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏ –º—ã—à–µ—á–Ω–æ–π —Å–ª–∞–±–æ—Å—Ç–∏.',
      'B12': '–ö–æ–±–∞–ª–∞–º–∏–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ –î–ù–ö –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –î–µ—Ñ–∏—Ü–∏—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –º–µ–≥–∞–ª–æ–±–ª–∞—Å—Ç–Ω–æ–π –∞–Ω–µ–º–∏–∏ –∏ –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã–º –Ω–µ–≤—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –Ω–∞—Ä—É—à–µ–Ω–∏—è–º.',
      '–§–µ—Ä—Ä–∏—Ç–∏–Ω': '–û—Å–Ω–æ–≤–Ω–æ–π –±–µ–ª–æ–∫-–¥–µ–ø–æ –∂–µ–ª–µ–∑–∞. –ù–∏–∑–∫–∏–µ —É—Ä–æ–≤–Ω–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∏—Å—Ç–æ—â–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤ –∂–µ–ª–µ–∑–∞ –µ—â–µ –¥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∞–Ω–µ–º–∏–∏, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∫–∏—Å–ª–æ—Ä–æ–¥–∞.'
    };
    return backgrounds[biomarker] || '–í–∞–∂–Ω—ã–π –±–∏–æ–º–∞—Ä–∫–µ—Ä –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è';
  };

  const getPossibleCauses = (biomarker: string, status: string): string[] => {
    if (status === 'critical' || status === 'attention') {
      const causes: { [key: string]: string[] } = {
        '–í–∏—Ç–∞–º–∏–Ω D': ['–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å –ø–∏—â–µ–π', '–ù–∞—Ä—É—à–µ–Ω–∏–µ –≤—Å–∞—Å—ã–≤–∞–Ω–∏—è', '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è'],
        'B12': ['–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è –¥–∏–µ—Ç–∞', '–ü—Ä–æ–±–ª–µ–º—ã —Å –∂–µ–ª—É–¥–∫–æ–º', '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç—Ñ–æ—Ä–º–∏–Ω–∞', '–ü–æ–∂–∏–ª–æ–π –≤–æ–∑—Ä–∞—Å—Ç'],
        '–§–µ—Ä—Ä–∏—Ç–∏–Ω': ['–ñ–µ–ª–µ–∑–æ–¥–µ—Ñ–∏—Ü–∏—Ç–Ω–∞—è –∞–Ω–µ–º–∏—è', '–ö—Ä–æ–≤–æ–ø–æ—Ç–µ—Ä–∏', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤ —Ä–∞—Ü–∏–æ–Ω–µ', '–ù–∞—Ä—É—à–µ–Ω–∏–µ –≤—Å–∞—Å—ã–≤–∞–Ω–∏—è']
      };
      return causes[biomarker] || ['–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'];
    }
    return ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–æ—Ä–º–µ'];
  };

  const getHealthRisks = (biomarker: string, status: string): string[] => {
    if (status === 'critical' || status === 'attention') {
      const risks: { [key: string]: string[] } = {
        '–í–∏—Ç–∞–º–∏–Ω D': ['–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –∏–Ω—Ñ–µ–∫—Ü–∏–π', '–ú—ã—à–µ—á–Ω–∞—è —Å–ª–∞–±–æ—Å—Ç—å', '–î–µ–ø—Ä–µ—Å—Å–∏—è', '–û—Å—Ç–µ–æ–ø–æ—Ä–æ–∑'],
        'B12': ['–ê–Ω–µ–º–∏—è', '–ù–µ–≤—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è', '–°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π', '–£—Å—Ç–∞–ª–æ—Å—Ç—å'],
        '–§–µ—Ä—Ä–∏—Ç–∏–Ω': ['–ñ–µ–ª–µ–∑–æ–¥–µ—Ñ–∏—Ü–∏—Ç–Ω–∞—è –∞–Ω–µ–º–∏—è', '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏', '–í—ã–ø–∞–¥–µ–Ω–∏–µ –≤–æ–ª–æ—Å', '–°–∏–Ω–¥—Ä–æ–º –±–µ—Å–ø–æ–∫–æ–π–Ω—ã—Ö –Ω–æ–≥']
      };
      return risks[biomarker] || ['–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è'];
    }
    return ['–†–∏—Å–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ'];
  };

  const getCorrectionProtocol = (biomarker: string, status: string) => {
    if (status === 'critical' || status === 'attention') {
      const protocols: { [key: string]: any } = {
        '–í–∏—Ç–∞–º–∏–Ω D': {
          nutrition: ['–ñ–∏—Ä–Ω–∞—è —Ä—ã–±–∞ 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', '–û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '–ì—Ä–∏–±—ã —à–∏–∏—Ç–∞–∫–µ'],
          supplements: ['–í–∏—Ç–∞–º–∏–Ω D3 2000-4000 –ú–ï/–¥–µ–Ω—å', '–ü—Ä–∏–Ω–∏–º–∞—Ç—å —Å –∂–∏—Ä–Ω–æ–π –ø–∏—â–µ–π', '–ö–æ–Ω—Ç—Ä–æ–ª—å —á–µ—Ä–µ–∑ 8-12 –Ω–µ–¥–µ–ª—å'],
          lifestyle: ['15-20 –º–∏–Ω—É—Ç –Ω–∞ —Å–æ–ª–Ω—Ü–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ', '–ü—Ä–æ–≥—É–ª–∫–∏ –≤ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è', '–ò–∑–±–µ–≥–∞—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã—Ö –∫—Ä–µ–º–æ–≤ –≤ –ø–µ—Ä–≤—ã–µ 15 –º–∏–Ω—É—Ç'],
          timeline: '2-3 –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏'
        },
        'B12': {
          nutrition: ['–ú—è—Å–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–µ—á–µ–Ω—å', '–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '–Ø–π—Ü–∞'],
          supplements: ['B12 500-1000 –º–∫–≥/–¥–µ–Ω—å', '–õ—É—á—à–µ —Å—É–±–ª–∏–Ω–≥–≤–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞', '–ö—É—Ä—Å 2-3 –º–µ—Å—è—Ü–∞'],
          lifestyle: ['–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∞–ª–∫–æ–≥–æ–ª—å', '–ò–∑–±–µ–≥–∞—Ç—å –∏–∑–±—ã—Ç–∫–∞ –∫–æ—Ñ–µ', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º'],
          timeline: '4-6 –Ω–µ–¥–µ–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤'
        }
      };
      return protocols[biomarker] || {
        nutrition: ['–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'],
        supplements: ['–ü–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –≤—Ä–∞—á–∞'],
        lifestyle: ['–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏'],
        timeline: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ'
      };
    }
    return {
      nutrition: ['–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –¥–∏–µ—Ç–∞'],
      supplements: ['–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'],
      lifestyle: ['–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏'],
      timeline: '–†–µ–≥—É–ª—è—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å'
    };
  };

  const getMonitoringSchedule = (biomarker: string, status: string): string => {
    if (status === 'critical') return '–ö–æ–Ω—Ç—Ä–æ–ª—å —á–µ—Ä–µ–∑ 4-6 –Ω–µ–¥–µ–ª—å, –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 3 –º–µ—Å—è—Ü–∞';
    if (status === 'attention') return '–ö–æ–Ω—Ç—Ä–æ–ª—å —á–µ—Ä–µ–∑ 8-12 –Ω–µ–¥–µ–ª—å';
    return '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞–∂–¥—ã–µ 6-12 –º–µ—Å—è—Ü–µ–≤';
  };

  const getResearchReferences = (biomarker: string): string[] => {
    const references: { [key: string]: string[] } = {
      '–í–∏—Ç–∞–º–∏–Ω D': [
        'Holick MF. Vitamin D deficiency. N Engl J Med. 2007;357(3):266-281',
        'Martineau AR, et al. Vitamin D supplementation to prevent acute respiratory tract infections. BMJ. 2017;356:i6583'
      ],
      'B12': [
        'Green R, et al. Vitamin B12 deficiency. Nat Rev Dis Primers. 2017;3:17040',
        'O\'Leary F, Samman S. Vitamin B12 in health and disease. Nutrients. 2010;2(3):299-316'
      ]
    };
    return references[biomarker] || ['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º'];
  };

  useEffect(() => {
    generateConsultation();
  }, [analytics, healthProfile]);

  if (isGenerating) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin text-blue-500 mx-auto mb-3" />
          <p className="text-gray-600">–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-8">
        <AlertTriangle className="h-8 w-8 text-red-500 mx-auto mb-3" />
        <p className="text-red-600 mb-4">{error}</p>
        <Button onClick={generateConsultation} variant="outline">
          <RefreshCw className="h-4 w-4 mr-2" />
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </Button>
      </div>
    );
  }

  if (!consultation) {
    return null;
  }

  return (
    <div className="space-y-4 sm:space-y-6 px-2 sm:px-0">
      {/* –î–∏—Å–∫–ª–µ–π–º–µ—Ä—ã */}
      <div className="bg-red-50 border border-red-200 rounded-lg p-2 sm:p-4 space-y-2 sm:space-y-3">
        <h3 className="text-sm sm:text-base font-semibold text-red-900 flex items-center gap-2">
          <AlertTriangle className="h-4 w-4 sm:h-5 sm:w-5" />
          –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä—ã
        </h3>
        <div className="space-y-1 sm:space-y-2">
          {consultation.disclaimers.map((disclaimer, index) => (
            <p key={index} className="text-xs sm:text-sm text-red-800">{disclaimer}</p>
          ))}
        </div>
      </div>

      {/* –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-3 sm:p-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-3 sm:mb-4 space-y-2 sm:space-y-0">
          <h3 className="text-lg sm:text-xl font-semibold flex items-center gap-2">
            <Brain className="h-5 w-5 sm:h-6 sm:w-6 text-blue-600" />
            –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è
          </h3>
          <div className="flex flex-col sm:flex-row gap-2 sm:gap-3">
            <Badge variant="outline" className="bg-white text-xs sm:text-sm">
              –ó–¥–æ—Ä–æ–≤—å–µ: {consultation.overallHealthScore}/100
            </Badge>
            <Badge variant="outline" className="bg-white text-xs sm:text-sm">
              –ë–∏–æ–ª. –≤–æ–∑—Ä–∞—Å—Ç: {consultation.biologicalAge} –ª–µ—Ç
            </Badge>
          </div>
        </div>
        <p className="text-xs sm:text-sm text-gray-700 leading-relaxed">{consultation.overallAssessment}</p>
      </div>

      {/* –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ */}
      <div className="space-y-3 sm:space-y-4">
        <h3 className="text-base sm:text-lg font-semibold flex items-center gap-2">
          <TestTube className="h-4 w-4 sm:h-5 sm:w-5 text-amber-600" />
          –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        </h3>
        <div className="grid gap-2 sm:gap-3">
          {consultation.keyFindings.map((finding, index) => (
            <div key={index} className="flex items-start gap-2 sm:gap-3 p-2 sm:p-4 bg-amber-50 border border-amber-200 rounded-lg">
              <AlertTriangle className="h-4 w-4 sm:h-5 sm:w-5 text-amber-600 flex-shrink-0 mt-0.5" />
              <p className="text-xs sm:text-sm text-gray-800">{finding}</p>
            </div>
          ))}
        </div>
      </div>

      {/* –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π */}
      <div className="space-y-3 sm:space-y-4">
        <h3 className="text-base sm:text-lg font-semibold flex items-center gap-2">
          <Target className="h-4 w-4 sm:h-5 sm:w-5 text-green-600" />
          –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
        </h3>
        <div className="grid gap-3 sm:gap-4">
          {Object.entries(consultation.goalProgress).map(([goalName, analysis]) => (
            <div key={goalName} className="p-2 sm:p-4 border rounded-lg bg-white">
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-2 sm:mb-3 space-y-2 sm:space-y-0">
                <h4 className="text-sm sm:text-base font-medium text-gray-900">{goalName}</h4>
                <div className="flex gap-2">
                  <Badge variant={analysis.status === '–Ω–∞_–ø—É—Ç–∏' ? 'default' : 
                               analysis.status === '—Ç—Ä–µ–±—É–µ—Ç_–≤–Ω–∏–º–∞–Ω–∏—è' ? 'secondary' : 'destructive'}
                        className="text-xs">
                    {analysis.status}
                  </Badge>
                  <Badge variant="outline" className="text-xs">{Math.round(analysis.progress)}%</Badge>
                </div>
              </div>
              <p className="text-xs sm:text-sm text-gray-600 mb-2">{analysis.scientificRationale}</p>
              
              {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ */}
              <div className="mt-2 sm:mt-3">
                <h5 className="text-xs sm:text-sm font-medium text-gray-900 mb-1 sm:mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h5>
                <ul className="text-xs text-gray-700 space-y-1">
                  {analysis.recommendations.slice(0, 3).map((rec, idx) => (
                    <li key={idx}>‚Ä¢ {rec}</li>
                  ))}
                </ul>
              </div>
              
              <div className="text-xs text-gray-500 mt-2">
                <div className="flex flex-col sm:flex-row sm:gap-4 space-y-1 sm:space-y-0">
                  <span>–°—Ä–æ–∫–∏: {analysis.timeframe}</span>
                  <span>–ö–ª—é—á–µ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã: {analysis.keyBiomarkers.slice(0, 3).join(', ')}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤ */}
      {Object.keys(consultation.biomarkerInsights).length > 0 && (
        <div className="space-y-3 sm:space-y-4">
          <h3 className="text-base sm:text-lg font-semibold flex items-center gap-2">
            <Activity className="h-4 w-4 sm:h-5 sm:w-5 text-red-600" />
            –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤
          </h3>
          <div className="grid gap-4 sm:gap-6">
            {Object.entries(consultation.biomarkerInsights).map(([biomarkerName, insight]) => (
              <div key={biomarkerName} className="border rounded-lg p-3 sm:p-6 bg-white">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-3 sm:mb-4 space-y-2 sm:space-y-0">
                  <h4 className="text-base sm:text-lg font-medium text-gray-900">{biomarkerName}</h4>
                  <Badge variant={insight.status === 'optimal' ? 'default' : 
                               insight.status === 'suboptimal' ? 'secondary' :
                               insight.status === 'attention' ? 'secondary' : 'destructive'}
                        className="text-xs">
                    {insight.status === 'optimal' ? '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ' : 
                     insight.status === 'suboptimal' ? '–°—É–±–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ' :
                     insight.status === 'attention' ? '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' : '–ö—Ä–∏—Ç–∏—á–Ω–æ'}
                  </Badge>
                </div>
                
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4 mb-3 sm:mb-4">
                  <div>
                    <p className="text-xs sm:text-sm text-gray-600">–¢–µ–∫—É—â–µ–µ: <span className="font-medium">{insight.value}</span></p>
                    <p className="text-xs sm:text-sm text-gray-600">–ù–æ—Ä–º–∞: {insight.normalRange}</p>
                    <p className="text-xs sm:text-sm text-gray-600">–û–ø—Ç–∏–º—É–º: {insight.optimalRange}</p>
                  </div>
                  <div>
                    <p className="text-xs sm:text-sm text-gray-600">–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: <span className="font-medium">{insight.deviation}%</span></p>
                    <p className="text-xs sm:text-sm text-gray-600">–ö–æ–Ω—Ç—Ä–æ–ª—å: {insight.monitoringSchedule}</p>
                  </div>
                </div>

                <div className="space-y-3">
                  <div>
                    <h5 className="text-sm font-medium text-gray-900 mb-1">–ù–∞—É—á–Ω–∞—è –æ—Å–Ω–æ–≤–∞:</h5>
                    <p className="text-xs text-gray-700 leading-relaxed">{insight.scientificBackground}</p>
                  </div>

                  <div>
                    <h5 className="text-sm font-medium text-gray-900 mb-1">–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–ª–∏:</h5>
                    <div className="text-xs text-gray-600 space-y-1">
                      {insight.impactOnGoals.map((impact, idx) => (
                        <p key={idx}>‚Ä¢ {impact}</p>
                      ))}
                    </div>
                  </div>

                  {(insight.status === 'attention' || insight.status === 'critical') && (
                    <>
                      <div>
                        <h5 className="text-sm font-medium text-gray-900 mb-1">–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</h5>
                        <ul className="text-xs text-gray-700 space-y-1">
                          {insight.possibleCauses.map((cause, idx) => (
                            <li key={idx}>‚Ä¢ {cause}</li>
                          ))}
                        </ul>
                      </div>

                      <div>
                        <h5 className="text-sm font-medium text-gray-900 mb-1">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏:</h5>
                        <ul className="text-xs text-red-700 space-y-1">
                          {insight.healthRisks.map((risk, idx) => (
                            <li key={idx}>‚Ä¢ {risk}</li>
                          ))}
                        </ul>
                      </div>

                      <div className="bg-green-50 p-3 rounded-lg">
                        <h5 className="text-sm font-medium text-green-900 mb-2">–ü—Ä–æ—Ç–æ–∫–æ–ª –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏:</h5>
                        <div className="grid md:grid-cols-3 gap-3">
                          <div>
                            <h6 className="text-xs font-medium text-green-800 mb-1">–ü–∏—Ç–∞–Ω–∏–µ:</h6>
                            <ul className="text-xs text-green-700 space-y-1">
                              {insight.correctionProtocol.nutrition.map((item, idx) => (
                                <li key={idx}>‚Ä¢ {item}</li>
                              ))}
                            </ul>
                          </div>
                          <div>
                            <h6 className="text-xs font-medium text-green-800 mb-1">–î–æ–±–∞–≤–∫–∏:</h6>
                            <ul className="text-xs text-green-700 space-y-1">
                              {insight.correctionProtocol.supplements.map((item, idx) => (
                                <li key={idx}>‚Ä¢ {item}</li>
                              ))}
                            </ul>
                          </div>
                          <div>
                            <h6 className="text-xs font-medium text-green-800 mb-1">–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:</h6>
                            <ul className="text-xs text-green-700 space-y-1">
                              {insight.correctionProtocol.lifestyle.map((item, idx) => (
                                <li key={idx}>‚Ä¢ {item}</li>
                              ))}
                            </ul>
                          </div>
                        </div>
                        <p className="text-xs text-green-800 mt-2">–û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏: {insight.correctionProtocol.timeline}</p>
                      </div>

                      <div>
                        <h5 className="text-sm font-medium text-gray-900 mb-1">–ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</h5>
                        <div className="text-xs text-gray-600 space-y-1">
                          {insight.researchReferences.map((ref, idx) => (
                            <p key={idx}>‚Ä¢ {ref}</p>
                          ))}
                        </div>
                      </div>
                    </>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –°–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã */}
      <div className="space-y-3 sm:space-y-4">
        <h3 className="text-base sm:text-lg font-semibold flex items-center gap-2">
          <Heart className="h-4 w-4 sm:h-5 sm:w-5 text-purple-600" />
          –°–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        </h3>
        <div className="grid gap-3 sm:gap-4">
          {consultation.synergisticProtocols.map((protocol, index) => (
            <div key={index} className="p-3 sm:p-4 border rounded-lg bg-purple-50">
              <h4 className="text-sm sm:text-base font-medium text-purple-900 mb-2">{protocol.name}</h4>
              <p className="text-xs sm:text-sm text-purple-800 mb-2 sm:mb-3">{protocol.description}</p>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
                <div>
                  <h5 className="text-xs sm:text-sm font-medium text-purple-900 mb-1 sm:mb-2">–¶–µ–ª–µ–≤—ã–µ –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã:</h5>
                  <div className="flex flex-wrap gap-1">
                    {protocol.targetBiomarkers.map((biomarker, idx) => (
                      <Badge key={idx} variant="outline" className="text-xs">{biomarker}</Badge>
                    ))}
                  </div>
                </div>
                <div>
                  <h5 className="text-xs sm:text-sm font-medium text-purple-900 mb-1 sm:mb-2">–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h5>
                  <ul className="text-xs sm:text-sm text-purple-800 space-y-1">
                    {protocol.expectedOutcomes.map((outcome, idx) => (
                      <li key={idx}>‚Ä¢ {outcome}</li>
                    ))}
                  </ul>
                </div>
              </div>
              <div className="mt-2 sm:mt-3">
                <h5 className="text-xs sm:text-sm font-medium text-purple-900 mb-1 sm:mb-2">–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–µ–π—Å—Ç–≤–∏–π:</h5>
                <ul className="text-xs sm:text-sm text-purple-800 space-y-1">
                  {protocol.protocol.map((step, idx) => (
                    <li key={idx}>‚Ä¢ {step}</li>
                  ))}
                </ul>
              </div>
              <p className="text-xs sm:text-sm text-purple-800 mt-2 sm:mt-3 font-medium">–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: {protocol.timeline}</p>
            </div>
          ))}
        </div>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º —Ç–µ—Å—Ç–∞–º */}
      <div className="space-y-3 sm:space-y-4">
        <h3 className="text-base sm:text-lg font-semibold flex items-center gap-2">
          <ClipboardList className="h-4 w-4 sm:h-5 sm:w-5 text-orange-600" />
          –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
        </h3>
        
        <div className="grid gap-3 sm:gap-4">
          <div className="p-3 sm:p-4 border border-red-200 rounded-lg bg-red-50">
            <h4 className="text-sm sm:text-base font-medium text-red-900 mb-2 sm:mb-3">–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ):</h4>
            <div className="space-y-2">
              {consultation.labTestRecommendations.critical.map((test, index) => (
                <div key={index} className="p-2 sm:p-3 bg-white rounded border border-red-200">
                  <p className="text-sm font-medium text-red-900">{test.test}</p>
                  <p className="text-xs sm:text-sm text-red-700">{test.reason}</p>
                  <p className="text-xs text-red-600 font-medium">{test.urgency}</p>
                </div>
              ))}
            </div>
          </div>

          <div className="p-3 sm:p-4 border border-orange-200 rounded-lg bg-orange-50">
            <h4 className="text-sm sm:text-base font-medium text-orange-900 mb-2 sm:mb-3">–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï:</h4>
            <div className="space-y-2">
              {consultation.labTestRecommendations.recommended.map((test, index) => (
                <div key={index} className="p-2 sm:p-3 bg-white rounded border border-orange-200">
                  <p className="text-sm font-medium text-orange-900">{test.test}</p>
                  <p className="text-xs sm:text-sm text-orange-700">{test.reason}</p>
                  <Badge variant="outline" className="text-xs">{test.priority}</Badge>
                </div>
              ))}
            </div>
          </div>

          <div className="p-3 sm:p-4 border border-blue-200 rounded-lg bg-blue-50">
            <h4 className="text-sm sm:text-base font-medium text-blue-900 mb-2 sm:mb-3">–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï:</h4>
            <div className="space-y-2">
              {consultation.labTestRecommendations.optional.map((test, index) => (
                <div key={index} className="p-2 sm:p-3 bg-white rounded border border-blue-200">
                  <p className="text-sm font-medium text-blue-900">{test.test}</p>
                  <p className="text-xs sm:text-sm text-blue-700">{test.reason}</p>
                  <p className="text-xs text-blue-600">{test.timeframe}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ */}
      <div className="space-y-3 sm:space-y-4">
        <h3 className="text-base sm:text-lg font-semibold flex items-center gap-2">
          <AlertTriangle className="h-4 w-4 sm:h-5 sm:w-5 text-red-600" />
          –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
        </h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
          {Object.entries(consultation.riskAssessment).map(([category, assessment]) => (
            <div key={category} className="p-3 sm:p-4 border rounded-lg bg-white">
              <h4 className="text-sm sm:text-base font-medium text-gray-900 mb-2 capitalize">
                {category === 'cardiovascular' ? '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ' :
                 category === 'metabolic' ? '–ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–µ' :
                 category === 'inflammatory' ? '–í–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ' :
                 category === 'hormonal' ? '–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ' : category} —Ä–∏—Å–∫–∏
              </h4>
              <Badge variant={assessment.risk === '–ù–∏–∑–∫–∏–π' ? 'default' : 
                             assessment.risk === '–£–º–µ—Ä–µ–Ω–Ω—ã–π' ? 'secondary' : 'destructive'} 
                     className="mb-2 sm:mb-3 text-xs">
                {assessment.risk} —Ä–∏—Å–∫
              </Badge>
              <ul className="text-xs sm:text-sm text-gray-700 space-y-1">
                {assessment.factors.map((factor, idx) => (
                  <li key={idx}>‚Ä¢ {factor}</li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      </div>

      {/* –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <div className="space-y-3 sm:space-y-4">
        <h3 className="text-base sm:text-lg font-semibold flex items-center gap-2">
          <Apple className="h-4 w-4 sm:h-5 sm:w-5 text-green-600" />
          –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        </h3>
        <div className="grid gap-2">
          {consultation.personalizedRecommendations.map((rec, index) => (
            <div key={index} className="flex items-start gap-2 sm:gap-3 p-2 sm:p-3 bg-green-50 rounded-lg">
              <div className="w-1.5 h-1.5 sm:w-2 sm:h-2 bg-green-500 rounded-full mt-1.5 sm:mt-2 flex-shrink-0" />
              <p className="text-xs sm:text-sm text-green-800">{rec}</p>
            </div>
          ))}
        </div>
      </div>

      {/* –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è */}
      <div className="space-y-3 sm:space-y-4">
        <h3 className="text-base sm:text-lg font-semibold flex items-center gap-2">
          <TrendingUp className="h-4 w-4 sm:h-5 sm:w-5 text-blue-600" />
          –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        </h3>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4">
          <div className="p-3 bg-blue-50 rounded-lg">
            <h4 className="text-sm font-medium text-blue-900 mb-2">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ:</h4>
            <ul className="text-xs text-blue-800 space-y-1">
              {consultation.trackingMetrics.daily.map((metric, idx) => (
                <li key={idx}>‚Ä¢ {metric}</li>
              ))}
            </ul>
          </div>
          <div className="p-3 bg-green-50 rounded-lg">
            <h4 className="text-sm font-medium text-green-900 mb-2">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ:</h4>
            <ul className="text-xs text-green-800 space-y-1">
              {consultation.trackingMetrics.weekly.map((metric, idx) => (
                <li key={idx}>‚Ä¢ {metric}</li>
              ))}
            </ul>
          </div>
          <div className="p-3 bg-purple-50 rounded-lg">
            <h4 className="text-sm font-medium text-purple-900 mb-2">–ï–∂–µ–º–µ—Å—è—á–Ω–æ:</h4>
            <ul className="text-xs text-purple-800 space-y-1">
              {consultation.trackingMetrics.monthly.map((metric, idx) => (
                <li key={idx}>‚Ä¢ {metric}</li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PersonalAIConsultant;