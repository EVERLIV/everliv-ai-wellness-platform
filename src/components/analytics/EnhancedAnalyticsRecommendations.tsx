import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertTriangle, Beaker, BookOpen, RefreshCw, ChevronDown, ChevronUp } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { AnalyticsRecommendation } from '@/types/analyticsRecommendations';
import { CachedAnalytics } from '@/types/analytics';

interface EnhancedAnalyticsRecommendationsProps {
  analytics: CachedAnalytics;
  healthProfile?: any;
}

const EnhancedAnalyticsRecommendations: React.FC<EnhancedAnalyticsRecommendationsProps> = ({
  analytics,
  healthProfile
}) => {
  const [recommendations, setRecommendations] = useState<AnalyticsRecommendation[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [expandedCards, setExpandedCards] = useState<Set<string>>(new Set());
  const [hasError, setHasError] = useState(false);

  const generateRecommendations = async () => {
    setIsGenerating(true);
    setHasError(false);
    
    try {
      console.log('üîÑ Generating enhanced analytics recommendations based on user goals...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Å–Ω–∞—á–∞–ª–∞
      const { data: testData, error: testError } = await supabase
        .from('health_profiles')
        .select('id')
        .limit(1);

      if (testError) {
        console.error('Supabase connection error:', testError);
        throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const requestData = {
        analytics: {
          ...analytics,
          healthScore: analytics.healthScore || 65,
          riskLevel: analytics.riskLevel || '—Å—Ä–µ–¥–Ω–∏–π',
          recommendations: analytics.recommendations || [],
          strengths: analytics.strengths || [],
          concerns: analytics.concerns || []
        },
        healthProfile: healthProfile || null,
        // –ü–µ—Ä–µ–¥–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞
        userGoals: healthProfile?.healthGoals || [],
        focusOnGoals: true // –§–ª–∞–≥ –¥–ª—è –ò–ò —á—Ç–æ–±—ã —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ü–µ–ª—è—Ö
      };

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      const { data, error } = await supabase.functions.invoke('generate-analytics-recommendations', {
        body: requestData
      });

      if (error) {
        console.error('Supabase function error:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const fallbackRecommendations = generateFallbackRecommendations(analytics, healthProfile?.healthGoals);
        setRecommendations(fallbackRecommendations);
        toast.warning('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –§—É–Ω–∫—Ü–∏—è –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
        return;
      }

      if (data?.recommendations && Array.isArray(data.recommendations)) {
        console.log('‚úÖ Received recommendations:', data.recommendations.length);
        setRecommendations(data.recommendations);
        toast.success('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –≥–æ—Ç–æ–≤—ã!');
      } else {
        console.log('No recommendations in response, using fallback');
        const fallbackRecommendations = generateFallbackRecommendations(analytics, healthProfile?.healthGoals);
        setRecommendations(fallbackRecommendations);
        toast.success('–ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã!');
      }
    } catch (error) {
      console.error('Error generating recommendations:', error);
      setHasError(true);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const fallbackRecommendations = generateFallbackRecommendations(analytics, healthProfile?.healthGoals);
      setRecommendations(fallbackRecommendations);
      toast.error('–û—à–∏–±–∫–∞ –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏. –ü–æ–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
    } finally {
      setIsGenerating(false);
    }
  };

  const generateFallbackRecommendations = (analytics: CachedAnalytics, userGoals?: string[]): AnalyticsRecommendation[] => {
    const score = analytics.healthScore || 65;
    const riskLevel = analytics.riskLevel || '—Å—Ä–µ–¥–Ω–∏–π';
    const goals = userGoals || [];
    
    console.log('Generating fallback recommendations for goals:', goals);
    
    const fallbacks: AnalyticsRecommendation[] = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (goals.includes('–ü–æ—Ö—É–¥–µ–Ω–∏–µ') || goals.includes('–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞')) {
      fallbacks.push({
        id: 'weight-loss-goal',
        title: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –ò–ì 16:8 —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–π —Ü–µ–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞',
        category: 'nutrition',
        priority: 'high',
        evidenceLevel: 'meta-analysis',
        safetyWarnings: [
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—Ä–∞—á–æ–º –ø—Ä–∏ –¥–∏–∞–±–µ—Ç–µ',
          '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –≤ –ø–µ—Ä–≤—ã–µ –Ω–µ–¥–µ–ª–∏',
          '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –≤ –ø–µ—Ä–∏–æ–¥—ã –≥–æ–ª–æ–¥–∞–Ω–∏—è'
        ],
        contraindications: [
          '–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è',
          '–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä—É–¥—å—é',
          '–ü—Ä–∏–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –µ–¥—ã'
        ],
        implementation: {
          steps: [
            '–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ 14:10 (14 —á–∞—Å–æ–≤ –≥–æ–ª–æ–¥–∞–Ω–∏—è, 10 —á–∞—Å–æ–≤ –ø–∏—Ç–∞–Ω–∏—è)',
            '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ 16:8 –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å',
            '–û–∫–Ω–æ –ø–∏—Ç–∞–Ω–∏—è: 12:00-20:00, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫',
            '–í –ø–µ—Ä–∏–æ–¥—ã –ø–∏—Ç–∞–Ω–∏—è: –±–µ–ª–∫–∏ (30%), –∫–ª–µ—Ç—á–∞—Ç–∫–∞ (40%), –∑–¥–æ—Ä–æ–≤—ã–µ –∂–∏—Ä—ã (30%)',
            '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤–µ—Å –∏ —ç–Ω–µ—Ä–≥–∏—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'
          ],
          duration: '4-6 –Ω–µ–¥–µ–ª—å –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
          frequency: '6 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é, 1 –¥–µ–Ω—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è',
          dosage: '–¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 300-500 –∫–∫–∞–ª –≤ –¥–µ–Ω—å'
        },
        scientificBasis: '–ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑ 2024–≥: –ò–ì 16:8 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 8-12% —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –∑–∞ 8 –Ω–µ–¥–µ–ª—å —É –ª—é–¥–µ–π —Å –ò–ú–¢ >25',
        biohackingLevel: 'intermediate'
      });
    }

    if (goals.includes('–£–ª—É—á—à–µ–Ω–∏–µ —Å–Ω–∞') || goals.includes('–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞')) {
      fallbacks.push({
        id: 'sleep-optimization-goal',
        title: '–ü—Ä–æ—Ç–æ–∫–æ–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–∏—Ä–∫–∞–¥–Ω—ã—Ö —Ä–∏—Ç–º–æ–≤',
        description: '–ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π —Ü–µ–ª–∏',
        category: 'sleep',
        priority: 'high',
        evidenceLevel: 'rct',
        safetyWarnings: [
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—Ä–∞—á–æ–º –ø—Ä–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö —Å–Ω–∞',
          '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å —Å –º–µ–ª–∞—Ç–æ–Ω–∏–Ω–æ–º –ø—Ä–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏',
          '–ù–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏'
        ],
        contraindications: [
          '–¢—è–∂–µ–ª—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–Ω–∞',
          '–ü—Ä–∏–µ–º –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç–æ–≤',
          '–ê—É—Ç–æ–∏–º–º—É–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è'
        ],
        implementation: {
          steps: [
            '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É (¬±15 –º–∏–Ω—É—Ç)',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–π —Å–≤–µ—Ç —É—Ç—Ä–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20-30 –º–∏–Ω—É—Ç',
            '–ò—Å–∫–ª—é—á–∏—Ç–µ —Å–∏–Ω–∏–π —Å–≤–µ—Ç –∑–∞ 2 —á–∞—Å–∞ –¥–æ —Å–Ω–∞',
            '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å–ø–∞–ª—å–Ω–∏ 18-19¬∞C',
            '–ú–µ–ª–∞—Ç–æ–Ω–∏–Ω 0.5-1–º–≥ –∑–∞ 60 –º–∏–Ω—É—Ç –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞'
          ],
          duration: '2-3 –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏',
          frequency: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–µ–∂–∏–º—É',
          dosage: '–º–µ–ª–∞—Ç–æ–Ω–∏–Ω: –Ω–∞—á–∏–Ω–∞—Ç—å —Å 0.5–º–≥'
        },
        scientificBasis: '–†–ö–ò 2024–≥: –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–∏—Ä–∫–∞–¥–Ω—ã—Ö —Ä–∏—Ç–º–æ–≤ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –Ω–∞ 65%',
        biohackingLevel: 'beginner'
      });
    }

    if (goals.includes('–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏') || goals.includes('–≠–Ω–µ—Ä–≥–∏—è')) {
      fallbacks.push({
        id: 'energy-boost-goal',
        title: '–ú–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–ª–µ—Ç–æ—á–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–µ–π —Ü–µ–ª—å—é',
        category: 'biohacking',
        priority: 'medium',
        evidenceLevel: 'observational',
        safetyWarnings: [
          '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–æ–∫',
          '–ö–æ–Ω—Ç—Ä–æ–ª—å –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –∫–æ—Ñ–µ–∏–Ω–∞',
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞ –ø—Ä–∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö'
        ],
        contraindications: [
          '–ù–∞—Ä—É—à–µ–Ω–∏—è —Ä–∏—Ç–º–∞ —Å–µ—Ä–¥—Ü–∞',
          '–ù–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è',
          '–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä–º–ª–µ–Ω–∏–µ'
        ],
        implementation: {
          steps: [
            '–ö–æ—ç–Ω–∑–∏–º Q10: 100-200–º–≥ —É—Ç—Ä–æ–º –≤–æ –≤—Ä–µ–º—è –µ–¥—ã',
            '–ù–ê–î+ –ø—Ä–µ–∫—É—Ä—Å–æ—Ä—ã (–Ω–∏–∫–æ—Ç–∏–Ω–∞–º–∏–¥ —Ä–∏–±–æ–∑–∏–¥): 250–º–≥ —É—Ç—Ä–æ–º',
            '–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞—É—Ç–æ—Ñ–∞–≥–∏–∏',
            '–•–æ–ª–æ–¥–Ω—ã–µ –¥—É—à–∏ 30-60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É—Ä–æ–≥–æ –∂–∏—Ä–∞',
            '–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –í–∏–º –•–æ—Ñ–∞ 10 –º–∏–Ω—É—Ç —É—Ç—Ä–æ–º'
          ],
          duration: '6-8 –Ω–µ–¥–µ–ª—å –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞',
          frequency: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ —É—Ç—Ä–æ–º, –≤—ã—Ö–æ–¥–Ω—ã–µ - –ø–æ –∂–µ–ª–∞–Ω–∏—é',
          dosage: 'CoQ10: 100-200–º–≥, NR: 250–º–≥'
        },
        scientificBasis: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è 2023-2024–≥–≥ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç 30-40% —É–ª—É—á—à–µ–Ω–∏–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ',
        biohackingLevel: 'advanced'
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ü–µ–ª–µ–π –Ω–µ—Ç
    if (goals.length === 0) {
      fallbacks.push({
        id: 'general-health-goal',
        title: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è',
        description: '–ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è',
        category: 'nutrition',
        priority: score < 70 ? 'high' : 'medium',
        evidenceLevel: 'meta-analysis',
        safetyWarnings: [
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—Ä–∞—á–æ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã',
          '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
          '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è'
        ],
        contraindications: [
          '–û—Å—Ç—Ä—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è',
          '–ù–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è'
        ],
        implementation: {
          steps: [
            '–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–≤–æ—â–µ–π –¥–æ 400-500–≥ –≤ –¥–µ–Ω—å',
            '–î–æ–±–∞–≤—å—Ç–µ 150 –º–∏–Ω—É—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é',
            '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–æ–Ω: 7-9 —á–∞—Å–æ–≤ –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è',
            '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º 10-15 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
            '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã –∫–∞–∂–¥—ã–µ 6-12 –º–µ—Å—è—Ü–µ–≤'
          ],
          duration: '12 –Ω–µ–¥–µ–ª—å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫',
          frequency: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
          dosage: '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏'
        },
        scientificBasis: '–î–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –∑–¥–æ—Ä–æ–≤—å—é',
        biohackingLevel: 'beginner'
      });
    }

    return fallbacks;
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (analytics && !recommendations.length && !isGenerating) {
      console.log('üéØ Auto-generating recommendations based on user goals on component mount');
      generateRecommendations();
    }
  }, [analytics, healthProfile?.healthGoals]);

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'nutrition': return 'bg-green-100 text-green-800';
      case 'exercise': return 'bg-blue-100 text-blue-800';
      case 'sleep': return 'bg-purple-100 text-purple-800';
      case 'stress': return 'bg-amber-100 text-amber-800';
      case 'supplements': return 'bg-teal-100 text-teal-800';
      case 'biohacking': return 'bg-indigo-100 text-indigo-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const toggleExpanded = (id: string) => {
    const newExpanded = new Set(expandedCards);
    if (newExpanded.has(id)) {
      newExpanded.delete(id);
    } else {
      newExpanded.add(id);
    }
    setExpandedCards(newExpanded);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <Beaker className="h-6 w-6 text-blue-600" />
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π
            {hasError && <AlertTriangle className="h-5 w-5 text-amber-500" />}
          </h2>
          <p className="text-gray-600 mt-1">
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò-–¥–æ–∫—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è
            {healthProfile?.healthGoals?.length > 0 && (
              <span className="text-blue-600 font-medium">
                {' '}‚Ä¢ –¶–µ–ª–∏: {healthProfile.healthGoals.join(', ')}
              </span>
            )}
            {hasError && ' (–±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)'}
          </p>
        </div>
        <Button
          onClick={generateRecommendations}
          disabled={isGenerating}
          variant="outline"
          className="flex items-center gap-2"
        >
          <RefreshCw className={`h-4 w-4 ${isGenerating ? 'animate-spin' : ''}`} />
          {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
        </Button>
      </div>

      {recommendations.length === 0 && !isGenerating && (
        <Card>
          <CardContent className="py-8 text-center">
            <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å"</p>
          </CardContent>
        </Card>
      )}

      {isGenerating && (
        <Card>
          <CardContent className="py-8 text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p className="text-gray-600">–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π...</p>
          </CardContent>
        </Card>
      )}

      <div className="grid gap-6">
        {recommendations.map((rec) => (
          <Card key={rec.id} className="overflow-hidden">
            <CardHeader className="pb-4">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <Badge className={getPriorityColor(rec.priority)}>
                      {rec.priority === 'critical' ? '–ö—Ä–∏—Ç–∏—á–Ω–æ' :
                       rec.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' :
                       rec.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    </Badge>
                    <Badge className={getCategoryColor(rec.category)}>
                      {rec.category === 'nutrition' ? '–ü–∏—Ç–∞–Ω–∏–µ' :
                       rec.category === 'exercise' ? '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' :
                       rec.category === 'sleep' ? '–°–æ–Ω' :
                       rec.category === 'stress' ? '–°—Ç—Ä–µ—Å—Å' :
                       rec.category === 'supplements' ? '–î–æ–±–∞–≤–∫–∏' : '–ë–∏–æ—Ö–∞–∫–∏–Ω–≥'}
                    </Badge>
                    <Badge variant="outline">
                      {rec.biohackingLevel === 'beginner' ? '–ù–∞—á–∞–ª—å–Ω—ã–π' :
                       rec.biohackingLevel === 'intermediate' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}
                    </Badge>
                  </div>
                  <CardTitle className="text-lg font-semibold mb-2">
                    {rec.title}
                  </CardTitle>
                  <p className="text-gray-600 text-sm">
                    {rec.description}
                  </p>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => toggleExpanded(rec.id)}
                  className="ml-4"
                >
                  {expandedCards.has(rec.id) ? 
                    <ChevronUp className="h-4 w-4" /> : 
                    <ChevronDown className="h-4 w-4" />
                  }
                </Button>
              </div>
            </CardHeader>

            {expandedCards.has(rec.id) && (
              <CardContent className="pt-0 space-y-4">
                {/* –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ */}
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2 flex items-center gap-2">
                    <BookOpen className="h-4 w-4" />
                    –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
                  </h4>
                  <p className="text-blue-800 text-sm">{rec.scientificBasis}</p>
                  <Badge variant="outline" className="mt-2 text-xs">
                    –£—Ä–æ–≤–µ–Ω—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {rec.evidenceLevel === 'meta-analysis' ? '–ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑' :
                                            rec.evidenceLevel === 'rct' ? '–†–ö–ò' :
                                            rec.evidenceLevel === 'observational' ? '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ–µ' : '–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ'}
                  </Badge>
                </div>

                {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
                {(rec.safetyWarnings?.length > 0 || rec.contraindications?.length > 0) && (
                  <div className="bg-amber-50 p-4 rounded-lg">
                    <h4 className="font-medium text-amber-900 mb-2 flex items-center gap-2">
                      <AlertTriangle className="h-4 w-4" />
                      –í–∞–∂–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    </h4>
                    {rec.safetyWarnings?.length > 0 && (
                      <div className="mb-2">
                        <p className="text-xs font-medium text-amber-800 mb-1">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</p>
                        <ul className="text-amber-800 text-sm space-y-1">
                          {rec.safetyWarnings.map((warning, idx) => (
                            <li key={idx} className="text-xs">‚Ä¢ {warning}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                    {rec.contraindications?.length > 0 && (
                      <div>
                        <p className="text-xs font-medium text-amber-800 mb-1">–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:</p>
                        <ul className="text-amber-800 text-sm space-y-1">
                          {rec.contraindications.map((contra, idx) => (
                            <li key={idx} className="text-xs">‚Ä¢ {contra}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                )}

                {/* –ü–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è */}
                <div className="bg-green-50 p-4 rounded-lg">
                  <h4 className="font-medium text-green-900 mb-3">–ü–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</h4>
                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-xs font-medium text-green-800 mb-2">–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω:</p>
                      <ol className="text-green-800 text-sm space-y-1">
                        {rec.implementation.steps.map((step, idx) => (
                          <li key={idx} className="text-xs">{idx + 1}. {step}</li>
                        ))}
                      </ol>
                    </div>
                    <div className="space-y-2">
                      <div>
                        <p className="text-xs font-medium text-green-800">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</p>
                        <p className="text-xs text-green-700">{rec.implementation.duration}</p>
                      </div>
                      <div>
                        <p className="text-xs font-medium text-green-800">–ß–∞—Å—Ç–æ—Ç–∞:</p>
                        <p className="text-xs text-green-700">{rec.implementation.frequency}</p>
                      </div>
                      {rec.implementation.dosage && (
                        <div>
                          <p className="text-xs font-medium text-green-800">–î–æ–∑–∏—Ä–æ–≤–∫–∞:</p>
                          <p className="text-xs text-green-700">{rec.implementation.dosage}</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </CardContent>
            )}
          </Card>
        ))}
      </div>

      {recommendations.length > 0 && (
        <div className="text-center text-sm text-gray-500 mt-6">
          –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleString('ru-RU')}
          {hasError && ' ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'}
        </div>
      )}
    </div>
  );
};

export default EnhancedAnalyticsRecommendations;
