
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertTriangle, Beaker, BookOpen, RefreshCw, ChevronDown, ChevronUp } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { AnalyticsRecommendation } from '@/types/analyticsRecommendations';
import { CachedAnalytics } from '@/types/analytics';

interface EnhancedAnalyticsRecommendationsProps {
  analytics: CachedAnalytics;
  healthProfile?: any;
}

const EnhancedAnalyticsRecommendations: React.FC<EnhancedAnalyticsRecommendationsProps> = ({
  analytics,
  healthProfile
}) => {
  const [recommendations, setRecommendations] = useState<AnalyticsRecommendation[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [expandedCards, setExpandedCards] = useState<Set<string>>(new Set());
  const [hasError, setHasError] = useState(false);

  const generateRecommendations = async () => {
    setIsGenerating(true);
    setHasError(false);
    
    try {
      console.log('üîÑ Generating enhanced analytics recommendations...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Å–Ω–∞—á–∞–ª–∞
      const { data: testData, error: testError } = await supabase
        .from('health_profiles')
        .select('id')
        .limit(1);

      if (testError) {
        console.error('Supabase connection error:', testError);
        throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      const { data, error } = await supabase.functions.invoke('generate-analytics-recommendations', {
        body: {
          analytics: {
            ...analytics,
            // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö
            healthScore: analytics.healthScore || 65,
            riskLevel: analytics.riskLevel || '—Å—Ä–µ–¥–Ω–∏–π',
            recommendations: analytics.recommendations || [],
            strengths: analytics.strengths || [],
            concerns: analytics.concerns || []
          },
          healthProfile: healthProfile || null
        }
      });

      if (error) {
        console.error('Supabase function error:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const fallbackRecommendations = generateFallbackRecommendations(analytics);
        setRecommendations(fallbackRecommendations);
        toast.warning('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –§—É–Ω–∫—Ü–∏—è –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
        return;
      }

      if (data?.recommendations && Array.isArray(data.recommendations)) {
        console.log('‚úÖ Received recommendations:', data.recommendations.length);
        setRecommendations(data.recommendations);
        toast.success('–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã!');
      } else {
        console.log('No recommendations in response, using fallback');
        const fallbackRecommendations = generateFallbackRecommendations(analytics);
        setRecommendations(fallbackRecommendations);
        toast.success('–ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã!');
      }
    } catch (error) {
      console.error('Error generating recommendations:', error);
      setHasError(true);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const fallbackRecommendations = generateFallbackRecommendations(analytics);
      setRecommendations(fallbackRecommendations);
      toast.error('–û—à–∏–±–∫–∞ –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏. –ü–æ–∫–∞–∑–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
    } finally {
      setIsGenerating(false);
    }
  };

  const generateFallbackRecommendations = (analytics: CachedAnalytics): AnalyticsRecommendation[] => {
    const score = analytics.healthScore || 65;
    const riskLevel = analytics.riskLevel || '—Å—Ä–µ–¥–Ω–∏–π';
    
    const fallbacks: AnalyticsRecommendation[] = [
      {
        id: 'fallback-1',
        title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–∏—Ä–∫–∞–¥–Ω—ã—Ö —Ä–∏—Ç–º–æ–≤',
        description: '–ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –∏ —ç–Ω–µ—Ä–≥–∏–∏ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ü–∏—é –±–∏–æ—Ä–∏—Ç–º–æ–≤',
        category: 'sleep',
        priority: score < 70 ? 'high' : 'medium',
        evidenceLevel: 'meta-analysis',
        safetyWarnings: [
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—Ä–∞—á–æ–º –ø—Ä–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö —Å–Ω–∞',
          '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å —Å –º–µ–ª–∞—Ç–æ–Ω–∏–Ω–æ–º –ø—Ä–∏ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä–º–ª–µ–Ω–∏–∏',
          '–ù–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏'
        ],
        contraindications: [
          '–¢—è–∂–µ–ª—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–Ω–∞ —Ç—Ä–µ–±—É—é—â–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ª–µ—á–µ–Ω–∏—è',
          '–ü—Ä–∏–µ–º –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç–æ–≤ (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–µ–ª–∞—Ç–æ–Ω–∏–Ω–æ–º)',
          '–ê—É—Ç–æ–∏–º–º—É–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è'
        ],
        implementation: {
          steps: [
            '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É (¬±30 –º–∏–Ω—É—Ç)',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Ä–∫–∏–π —Å–≤–µ—Ç —É—Ç—Ä–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15-30 –º–∏–Ω—É—Ç',
            '–ò—Å–∫–ª—é—á–∏—Ç–µ —Å–∏–Ω–∏–π —Å–≤–µ—Ç –∑–∞ 2 —á–∞—Å–∞ –¥–æ —Å–Ω–∞',
            '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —Å–ø–∞–ª—å–Ω–∏ 18-20¬∞C',
            '–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: –º–µ–ª–∞—Ç–æ–Ω–∏–Ω 0.5-3–º–≥ –∑–∞ 30-60 –º–∏–Ω –¥–æ —Å–Ω–∞'
          ],
          duration: '2-4 –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏',
          frequency: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–µ–∂–∏–º—É',
          dosage: '–º–µ–ª–∞—Ç–æ–Ω–∏–Ω: –Ω–∞—á–∏–Ω–∞—Ç—å —Å 0.5–º–≥, –º–∞–∫—Å–∏–º—É–º 3–º–≥'
        },
        scientificBasis: '–ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑—ã 2023-2024–≥–≥ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç 40-60% —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ –∫ —Ü–∏—Ä–∫–∞–¥–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–∏',
        biohackingLevel: 'beginner'
      },
      {
        id: 'fallback-2',
        title: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–∏—Ç–∞–Ω–∏—é —Å —É—á–µ—Ç–æ–º —Ö—Ä–æ–Ω–æ—Ç–∏–ø–∞ –∏ –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π',
        category: 'nutrition',
        priority: riskLevel === '–≤—ã—Å–æ–∫–∏–π' ? 'critical' : 'high',
        evidenceLevel: 'rct',
        safetyWarnings: [
          '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞ –ø—Ä–∏ –¥–∏–∞–±–µ—Ç–µ',
          '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –≤ –ø–µ—Ä–≤—ã–µ –Ω–µ–¥–µ–ª–∏',
          '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –≤ –ø–µ—Ä–∏–æ–¥—ã –≥–æ–ª–æ–¥–∞–Ω–∏—è'
        ],
        contraindications: [
          '–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è',
          '–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä—É–¥—å—é',
          '–î–µ—Ç—Å–∫–∏–π –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç',
          '–ü—Ä–∏–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö –µ–¥—ã'
        ],
        implementation: {
          steps: [
            '–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ 12:12 (12 —á–∞—Å–æ–≤ –µ–¥—ã, 12 —á–∞—Å–æ–≤ –≥–æ–ª–æ–¥–∞–Ω–∏—è)',
            '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ 14:10, –∑–∞—Ç–µ–º –∫ 16:8',
            '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞',
            '–í –ø–µ—Ä–∏–æ–¥—ã –ø–∏—Ç–∞–Ω–∏—è: –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –±–µ–ª–∫–∏ –∏ –∫–ª–µ—Ç—á–∞—Ç–∫—É',
            '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ'
          ],
          duration: '4-6 –Ω–µ–¥–µ–ª—å –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞',
          frequency: '5-6 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é, 1-2 –¥–Ω—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è',
          dosage: '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≥–æ–ª–æ–¥–∞–Ω–∏—è'
        },
        scientificBasis: '–†–ö–ò 2024–≥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç 8-12% —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∏–Ω—Å—É–ª–∏–Ω–æ—Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ò–ì',
        biohackingLevel: 'intermediate'
      }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è
    if (score < 60) {
      fallbacks.push({
        id: 'fallback-3',
        title: '–í—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (HIIT)',
        description: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä–¥–∏–æ–º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è',
        category: 'exercise',
        priority: 'high',
        evidenceLevel: 'meta-analysis',
        safetyWarnings: [
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞ –ø—Ä–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö —Å–µ—Ä–¥—Ü–∞',
          '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏',
          '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—É–ª—å—Å–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'
        ],
        contraindications: [
          '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è',
          '–ù–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è',
          '–û—Å—Ç—Ä—ã–µ –≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã'
        ],
        implementation: {
          steps: [
            '–†–∞–∑–º–∏–Ω–∫–∞ 5-10 –º–∏–Ω—É—Ç –ª–µ–≥–∫–æ–≥–æ –∫–∞—Ä–¥–∏–æ',
            '4 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: 30 —Å–µ–∫ –≤—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å + 90 —Å–µ–∫ –æ—Ç–¥—ã—Ö',
            '–ó–∞–º–∏–Ω–∫–∞ 5-10 –º–∏–Ω—É—Ç —Ä–∞—Å—Ç—è–∂–∫–∏',
            '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –¥–æ 8 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤',
            '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –ø—É–ª—å—Å: 85-95% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ'
        ],
        duration: '6-8 –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
        frequency: '2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é —Å –¥–Ω—è–º–∏ –æ—Ç–¥—ã—Ö–∞',
        dosage: '–Ω–∞—á–∏–Ω–∞—Ç—å —Å 15-20 –º–∏–Ω—É—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –¥–æ 30 –º–∏–Ω—É—Ç'
      },
      scientificBasis: '–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–∑–æ—Ä—ã 2023–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ HIIT –Ω–∞–¥ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –∫–∞—Ä–¥–∏–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è VO2max –∏ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞',
      biohackingLevel: 'intermediate'
      });
    }

    return fallbacks;
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (analytics && !recommendations.length && !isGenerating) {
      console.log('üéØ Auto-generating recommendations on component mount');
      generateRecommendations();
    }
  }, [analytics]);

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'nutrition': return 'bg-green-100 text-green-800';
      case 'exercise': return 'bg-blue-100 text-blue-800';
      case 'sleep': return 'bg-purple-100 text-purple-800';
      case 'stress': return 'bg-amber-100 text-amber-800';
      case 'supplements': return 'bg-teal-100 text-teal-800';
      case 'biohacking': return 'bg-indigo-100 text-indigo-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const toggleExpanded = (id: string) => {
    const newExpanded = new Set(expandedCards);
    if (newExpanded.has(id)) {
      newExpanded.delete(id);
    } else {
      newExpanded.add(id);
    }
    setExpandedCards(newExpanded);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <Beaker className="h-6 w-6 text-blue-600" />
            –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò-–¥–æ–∫—Ç–æ—Ä–∞
            {hasError && <AlertTriangle className="h-5 w-5 text-amber-500" />}
          </h2>
          <p className="text-gray-600 mt-1">
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –∏ –±–∏–æ—Ö–∞–∫–∏–Ω–≥–∞
            {hasError && ' (–±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)'}
          </p>
        </div>
        <Button
          onClick={generateRecommendations}
          disabled={isGenerating}
          variant="outline"
          className="flex items-center gap-2"
        >
          <RefreshCw className={`h-4 w-4 ${isGenerating ? 'animate-spin' : ''}`} />
          {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
        </Button>
      </div>

      {recommendations.length === 0 && !isGenerating && (
        <Card>
          <CardContent className="py-8 text-center">
            <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å"</p>
          </CardContent>
        </Card>
      )}

      {isGenerating && (
        <Card>
          <CardContent className="py-8 text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p className="text-gray-600">–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...</p>
          </CardContent>
        </Card>
      )}

      <div className="grid gap-6">
        {recommendations.map((rec) => (
          <Card key={rec.id} className="overflow-hidden">
            <CardHeader className="pb-4">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <Badge className={getPriorityColor(rec.priority)}>
                      {rec.priority === 'critical' ? '–ö—Ä–∏—Ç–∏—á–Ω–æ' :
                       rec.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' :
                       rec.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    </Badge>
                    <Badge className={getCategoryColor(rec.category)}>
                      {rec.category === 'nutrition' ? '–ü–∏—Ç–∞–Ω–∏–µ' :
                       rec.category === 'exercise' ? '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' :
                       rec.category === 'sleep' ? '–°–æ–Ω' :
                       rec.category === 'stress' ? '–°—Ç—Ä–µ—Å—Å' :
                       rec.category === 'supplements' ? '–î–æ–±–∞–≤–∫–∏' : '–ë–∏–æ—Ö–∞–∫–∏–Ω–≥'}
                    </Badge>
                    <Badge variant="outline">
                      {rec.biohackingLevel === 'beginner' ? '–ù–∞—á–∞–ª—å–Ω—ã–π' :
                       rec.biohackingLevel === 'intermediate' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}
                    </Badge>
                  </div>
                  <CardTitle className="text-lg font-semibold mb-2">
                    {rec.title}
                  </CardTitle>
                  <p className="text-gray-600 text-sm">
                    {rec.description}
                  </p>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => toggleExpanded(rec.id)}
                  className="ml-4"
                >
                  {expandedCards.has(rec.id) ? 
                    <ChevronUp className="h-4 w-4" /> : 
                    <ChevronDown className="h-4 w-4" />
                  }
                </Button>
              </div>
            </CardHeader>

            {expandedCards.has(rec.id) && (
              <CardContent className="pt-0 space-y-4">
                {/* –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ */}
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2 flex items-center gap-2">
                    <BookOpen className="h-4 w-4" />
                    –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
                  </h4>
                  <p className="text-blue-800 text-sm">{rec.scientificBasis}</p>
                  <Badge variant="outline" className="mt-2 text-xs">
                    –£—Ä–æ–≤–µ–Ω—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {rec.evidenceLevel === 'meta-analysis' ? '–ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑' :
                                            rec.evidenceLevel === 'rct' ? '–†–ö–ò' :
                                            rec.evidenceLevel === 'observational' ? '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ–µ' : '–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ'}
                  </Badge>
                </div>

                {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
                {(rec.safetyWarnings?.length > 0 || rec.contraindications?.length > 0) && (
                  <div className="bg-amber-50 p-4 rounded-lg">
                    <h4 className="font-medium text-amber-900 mb-2 flex items-center gap-2">
                      <AlertTriangle className="h-4 w-4" />
                      –í–∞–∂–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    </h4>
                    {rec.safetyWarnings?.length > 0 && (
                      <div className="mb-2">
                        <p className="text-xs font-medium text-amber-800 mb-1">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</p>
                        <ul className="text-amber-800 text-sm space-y-1">
                          {rec.safetyWarnings.map((warning, idx) => (
                            <li key={idx} className="text-xs">‚Ä¢ {warning}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                    {rec.contraindications?.length > 0 && (
                      <div>
                        <p className="text-xs font-medium text-amber-800 mb-1">–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:</p>
                        <ul className="text-amber-800 text-sm space-y-1">
                          {rec.contraindications.map((contra, idx) => (
                            <li key={idx} className="text-xs">‚Ä¢ {contra}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                )}

                {/* –ü–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è */}
                <div className="bg-green-50 p-4 rounded-lg">
                  <h4 className="font-medium text-green-900 mb-3">–ü–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</h4>
                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-xs font-medium text-green-800 mb-2">–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω:</p>
                      <ol className="text-green-800 text-sm space-y-1">
                        {rec.implementation.steps.map((step, idx) => (
                          <li key={idx} className="text-xs">{idx + 1}. {step}</li>
                        ))}
                      </ol>
                    </div>
                    <div className="space-y-2">
                      <div>
                        <p className="text-xs font-medium text-green-800">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</p>
                        <p className="text-xs text-green-700">{rec.implementation.duration}</p>
                      </div>
                      <div>
                        <p className="text-xs font-medium text-green-800">–ß–∞—Å—Ç–æ—Ç–∞:</p>
                        <p className="text-xs text-green-700">{rec.implementation.frequency}</p>
                      </div>
                      {rec.implementation.dosage && (
                        <div>
                          <p className="text-xs font-medium text-green-800">–î–æ–∑–∏—Ä–æ–≤–∫–∞:</p>
                          <p className="text-xs text-green-700">{rec.implementation.dosage}</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </CardContent>
            )}
          </Card>
        ))}
      </div>

      {recommendations.length > 0 && (
        <div className="text-center text-sm text-gray-500 mt-6">
          –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleString('ru-RU')}
          {hasError && ' ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'}
        </div>
      )}
    </div>
  );
};

export default EnhancedAnalyticsRecommendations;
