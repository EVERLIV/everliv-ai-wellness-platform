import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertTriangle, Beaker, BookOpen, RefreshCw, ChevronDown, ChevronUp, Wifi, WifiOff } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { AnalyticsRecommendation } from '@/types/analyticsRecommendations';
import { CachedAnalytics } from '@/types/analytics';

interface EnhancedAnalyticsRecommendationsProps {
  analytics: CachedAnalytics;
  healthProfile?: any;
}

const EnhancedAnalyticsRecommendations: React.FC<EnhancedAnalyticsRecommendationsProps> = ({
  analytics,
  healthProfile
}) => {
  const [recommendations, setRecommendations] = useState<AnalyticsRecommendation[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [expandedCards, setExpandedCards] = useState<Set<string>>(new Set());
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [lastAttempt, setLastAttempt] = useState<Date | null>(null);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  const generateRecommendations = async () => {
    setIsGenerating(true);
    setLastAttempt(new Date());
    
    try {
      console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      if (!isOnline) {
        console.log('üì¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
        const fallbackRecommendations = generateGoalsBasedRecommendations(analytics, healthProfile?.healthGoals);
        setRecommendations(fallbackRecommendations);
        toast.warning('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü–æ–∫–∞–∑–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const requestData = {
        analytics: {
          ...analytics,
          healthScore: analytics.healthScore || 65,
          riskLevel: analytics.riskLevel || '—Å—Ä–µ–¥–Ω–∏–π',
          recommendations: analytics.recommendations || [],
          strengths: analytics.strengths || [],
          concerns: analytics.concerns || []
        },
        healthProfile: healthProfile || null,
        userGoals: healthProfile?.healthGoals || [],
        focusOnGoals: true
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ü–µ–ª—è–º–∏:', healthProfile?.healthGoals);

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞')), 15000);
      });

      const requestPromise = supabase.functions.invoke('generate-analytics-recommendations', {
        body: requestData
      });

      const { data, error } = await Promise.race([requestPromise, timeoutPromise]) as any;

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ Supabase:', error);
        throw new Error(`–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
      }

      if (data?.recommendations && Array.isArray(data.recommendations)) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò:', data.recommendations.length);
        setRecommendations(data.recommendations);
        toast.success(`–ü–æ–ª—É—á–µ–Ω—ã ${data.recommendations.length} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –ò–ò-–¥–æ–∫—Ç–æ—Ä–∞!`);
      } else {
        console.log('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const fallbackRecommendations = generateGoalsBasedRecommendations(analytics, healthProfile?.healthGoals);
      setRecommendations(fallbackRecommendations);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—à–∏–±–∫–∏
      if (error instanceof Error && error.message.includes('–¢–∞–π–º–∞—É—Ç')) {
        toast.error('–°–µ—Ä–≤–µ—Ä –ò–ò –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–∫–∞–∑–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
      } else if (!isOnline) {
        toast.warning('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü–æ–∫–∞–∑–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
      } else {
        toast.info('–ò–ò-—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∫–∞–∑–∞–Ω—ã —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
      }
    } finally {
      setIsGenerating(false);
    }
  };

  const generateGoalsBasedRecommendations = (analytics: CachedAnalytics, userGoals?: string[]): AnalyticsRecommendation[] => {
    const score = analytics.healthScore || 65;
    const goals = userGoals || [];
    
    console.log('üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ü–µ–ª–µ–π:', goals);
    
    const recommendations: AnalyticsRecommendation[] = [];

    // –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
    if (goals.includes('cognitive')) {
      recommendations.push({
        id: 'cognitive-enhancement',
        title: '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ–Ω–∞—É–∫–∏',
        description: '–ù–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–∞–º—è—Ç–∏, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —è—Å–Ω–æ—Å—Ç–∏',
        category: 'biohacking',
        priority: 'high',
        evidenceLevel: 'meta-analysis',
        safetyWarnings: [
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –Ω–µ–≤—Ä–æ–ª–æ–≥–æ–º –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –Ω–æ–æ—Ç—Ä–æ–ø–æ–≤',
          '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä–æ–≤',
          '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –∞–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç–∞–º–∏'
        ],
        contraindications: [
          '–≠–ø–∏–ª–µ–ø—Å–∏—è –∏ —Å—É–¥–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
          '–ë–∏–ø–æ–ª—è—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
          '–ü—Ä–∏–µ–º –∞–Ω—Ç–∏–∫–æ–∞–≥—É–ª—è–Ω—Ç–æ–≤'
        ],
        implementation: {
          steps: [
            '–û–º–µ–≥–∞-3 (DHA): 1000-2000–º–≥ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏',
            '–õ—å–≤–∏–Ω–∞—è –≥—Ä–∏–≤–∞ (Hericium): 500-1000–º–≥ –¥–ª—è –Ω–µ–π—Ä–æ–≥–µ–Ω–µ–∑–∞',
            '–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ 16:8 –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ BDNF',
            '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –º–∞–π–Ω–¥—Ñ—É–ª–Ω–µ—Å—Å 20 –º–∏–Ω—É—Ç –¥–ª—è –Ω–µ–π—Ä–æ–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏',
            '–•–æ–ª–æ–¥–Ω—ã–µ –¥—É—à–∏ 2-3 –º–∏–Ω—É—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ—Ä–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞'
          ],
          duration: '8-12 –Ω–µ–¥–µ–ª—å –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π',
          frequency: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ —É—Ç—Ä–æ–º, –∫—Ä–æ–º–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö',
          dosage: 'DHA: 1000-2000–º–≥, –õ—å–≤–∏–Ω–∞—è –≥—Ä–∏–≤–∞: 500-1000–º–≥'
        },
        scientificBasis: '–ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑ 2024–≥: DHA + –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ –ø–æ–≤—ã—à–∞—é—Ç BDNF –Ω–∞ 200-300%',
        biohackingLevel: 'intermediate'
      });
    }

    // –°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ —Ü–µ–ª–∏
    if (goals.includes('cardiovascular')) {
      recommendations.push({
        id: 'cardiovascular-optimization',
        title: '–ö–∞—Ä–¥–∏–æ–º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
        category: 'exercise',
        priority: 'high',
        evidenceLevel: 'rct',
        safetyWarnings: [
          '–≠–ö–ì –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö',
          '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –¥–æ–±–∞–≤–æ–∫',
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞ –ø—Ä–∏ –∞—Ä–∏—Ç–º–∏–∏'
        ],
        contraindications: [
          '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è',
          '–ù–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è',
          '–ù–µ–¥–∞–≤–Ω–∏–π –∏–Ω—Ñ–∞—Ä–∫—Ç –º–∏–æ–∫–∞—Ä–¥–∞'
        ],
        implementation: {
          steps: [
            'HIIT —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 15-20 –º–∏–Ω—É—Ç',
            '–ö–æ—ç–Ω–∑–∏–º Q10: 100-200–º–≥ –¥–ª—è –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–π —Å–µ—Ä–¥—Ü–∞',
            '–ú–∞–≥–Ω–∏–π –≥–ª–∏—Ü–∏–Ω–∞—Ç: 400–º–≥ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º –¥–ª—è —Ä–∏—Ç–º–∞',
            '–ó–æ–Ω–∞ 2 –∫–∞—Ä–¥–∏–æ 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–æ 45 –º–∏–Ω—É—Ç',
            '–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ 4-7-8 –¥–ª—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∏—Ç–º–∞'
          ],
          duration: '6-8 –Ω–µ–¥–µ–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
          frequency: '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
          dosage: 'CoQ10: 100-200–º–≥, –ú–∞–≥–Ω–∏–π: 400–º–≥'
        },
        scientificBasis: '–†–ö–ò 2024–≥: HIIT + CoQ10 —É–ª—É—á—à–∞—é—Ç VO2max –Ω–∞ 15-25% –∑–∞ 8 –Ω–µ–¥–µ–ª—å',
        biohackingLevel: 'intermediate'
      });
    }

    // –û–±—â–∏–µ —Ü–µ–ª–∏ –∏–ª–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö
    if (goals.length === 0 || (!goals.includes('cognitive') && !goals.includes('cardiovascular'))) {
      recommendations.push({
        id: 'metabolic-health',
        title: '–ú–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
        description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ª—É—á—à–µ–Ω–∏—é —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞',
        category: 'nutrition',
        priority: score < 70 ? 'high' : 'medium',
        evidenceLevel: 'meta-analysis',
        safetyWarnings: [
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∞ –ø—Ä–∏ –¥–∏–∞–±–µ—Ç–µ',
          '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–ª—é–∫–æ–∑—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è',
          '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ–¥–∞–Ω–∏—è'
        ],
        contraindications: [
          '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç 1 —Ç–∏–ø–∞',
          '–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è',
          '–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –ª–∞–∫—Ç–∞—Ü–∏—è'
        ],
        implementation: {
          steps: [
            '–¶–∏—Ä–∫–∞–¥–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ: –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –¥–æ 19:00',
            '–•—Ä–æ–º –ø–∏–∫–æ–ª–∏–Ω–∞—Ç: 200–º–∫–≥ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Å—É–ª–∏–Ω—É',
            '–ê–ª—å—Ñ–∞-–ª–∏–ø–æ–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞: 300–º–≥ –¥–ª—è –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–π',
            '–ó–µ–ª–µ–Ω—ã–π —á–∞–π –º–∞—Ç—á–∞: 2-3 —á–∞—à–∫–∏ –¥–ª—è —Ç–µ—Ä–º–æ–≥–µ–Ω–µ–∑–∞',
            '–•–æ–ª–æ–¥–æ–≤–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è 10-15 –º–∏–Ω—É—Ç –¥–ª—è –±—É—Ä–æ–≥–æ –∂–∏—Ä–∞'
          ],
          duration: '4-6 –Ω–µ–¥–µ–ª—å –¥–ª—è –º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π',
          frequency: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
          dosage: '–•—Ä–æ–º: 200–º–∫–≥, –ê–õ–ö: 300–º–≥'
        },
        scientificBasis: '–ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑ 2024–≥: —Ü–∏—Ä–∫–∞–¥–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ + –¥–æ–±–∞–≤–∫–∏ —É–ª—É—á—à–∞—é—Ç –∏–Ω—Å—É–ª–∏–Ω–æ—Ä–µ–∑–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ 40%',
        biohackingLevel: 'beginner'
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è
    if (score < 60) {
      recommendations.push({
        id: 'foundational-health',
        title: '–ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è',
        description: '–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è',
        category: 'sleep',
        priority: 'critical',
        evidenceLevel: 'meta-analysis',
        safetyWarnings: [
          '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
          '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è',
          '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞ –ø—Ä–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö'
        ],
        contraindications: [
          '–û—Å—Ç—Ä—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è',
          '–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å—Ç–∞–¥–∏–∏ –æ–±–æ—Å—Ç—Ä–µ–Ω–∏—è'
        ],
        implementation: {
          steps: [
            '–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Å–Ω–∞: –ª–æ–∂–∏—Ç—å—Å—è –≤ 22:30-23:00',
            '–í–∏—Ç–∞–º–∏–Ω D3: 2000-4000 –ú–ï –¥–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞',
            '–ü—Ä–æ–±–∏–æ—Ç–∏–∫–∏: 10-50 –º–ª—Ä–¥ –ö–û–ï –¥–ª—è –º–∏–∫—Ä–æ–±–∏–æ–º–∞',
            '–ü—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–æ–ª–Ω—Ü–µ 30 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
            '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏'
          ],
          duration: '4-6 –Ω–µ–¥–µ–ª—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã',
          frequency: '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–µ–∂–∏–º—É',
          dosage: '–í–∏—Ç–∞–º–∏–Ω D3: 2000-4000 –ú–ï'
        },
        scientificBasis: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±–∑–æ—Ä—ã 2023-2024–≥–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –≤–∞–∂–Ω–æ—Å—Ç—å —Å–Ω–∞ –∏ –≤–∏—Ç–∞–º–∏–Ω–∞ D',
        biohackingLevel: 'beginner'
      });
    }

    return recommendations;
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (analytics && !recommendations.length && !isGenerating) {
      console.log('üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      generateRecommendations();
    }
  }, [analytics, healthProfile?.healthGoals]);

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'nutrition': return 'bg-green-100 text-green-800';
      case 'exercise': return 'bg-blue-100 text-blue-800';
      case 'sleep': return 'bg-purple-100 text-purple-800';
      case 'stress': return 'bg-amber-100 text-amber-800';
      case 'supplements': return 'bg-teal-100 text-teal-800';
      case 'biohacking': return 'bg-indigo-100 text-indigo-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const toggleExpanded = (id: string) => {
    const newExpanded = new Set(expandedCards);
    if (newExpanded.has(id)) {
      newExpanded.delete(id);
    } else {
      newExpanded.add(id);
    }
    setExpandedCards(newExpanded);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <Beaker className="h-6 w-6 text-blue-600" />
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò-–¥–æ–∫—Ç–æ—Ä–∞
            <div className="flex items-center gap-1 ml-2">
              {isOnline ? (
                <Wifi className="h-4 w-4 text-green-500" />
              ) : (
                <WifiOff className="h-4 w-4 text-red-500" />
              )}
            </div>
          </h2>
          <p className="text-gray-600 mt-1">
            {healthProfile?.healthGoals?.length > 0 ? (
              <span>
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π: <span className="text-blue-600 font-medium">
                  {healthProfile.healthGoals.map((goal: string) => {
                    switch(goal) {
                      case 'cognitive': return '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ';
                      case 'cardiovascular': return '–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ';
                      default: return goal;
                    }
                  }).join(', ')}
                </span>
              </span>
            ) : (
              '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã'
            )}
          </p>
          {lastAttempt && (
            <p className="text-xs text-gray-500 mt-1">
              –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: {lastAttempt.toLocaleTimeString('ru-RU')}
            </p>
          )}
        </div>
        <Button
          onClick={generateRecommendations}
          disabled={isGenerating}
          variant="outline"
          className="flex items-center gap-2"
        >
          <RefreshCw className={`h-4 w-4 ${isGenerating ? 'animate-spin' : ''}`} />
          {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
        </Button>
      </div>

      {recommendations.length === 0 && !isGenerating && (
        <Card>
          <CardContent className="py-8 text-center">
            <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</p>
          </CardContent>
        </Card>
      )}

      {isGenerating && (
        <Card>
          <CardContent className="py-8 text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p className="text-gray-600">
              {isOnline 
                ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò-–¥–æ–∫—Ç–æ—Ä–∞...' 
                : '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...'
              }
            </p>
          </CardContent>
        </Card>
      )}

      <div className="grid gap-6">
        {recommendations.map((rec) => (
          <Card key={rec.id} className="overflow-hidden">
            <CardHeader className="pb-4">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <Badge className={getPriorityColor(rec.priority)}>
                      {rec.priority === 'critical' ? '–ö—Ä–∏—Ç–∏—á–Ω–æ' :
                       rec.priority === 'high' ? '–í—ã—Å–æ–∫–∏–π' :
                       rec.priority === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    </Badge>
                    <Badge className={getCategoryColor(rec.category)}>
                      {rec.category === 'nutrition' ? '–ü–∏—Ç–∞–Ω–∏–µ' :
                       rec.category === 'exercise' ? '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' :
                       rec.category === 'sleep' ? '–°–æ–Ω' :
                       rec.category === 'stress' ? '–°—Ç—Ä–µ—Å—Å' :
                       rec.category === 'supplements' ? '–î–æ–±–∞–≤–∫–∏' : '–ë–∏–æ—Ö–∞–∫–∏–Ω–≥'}
                    </Badge>
                    <Badge variant="outline">
                      {rec.biohackingLevel === 'beginner' ? '–ù–∞—á–∞–ª—å–Ω—ã–π' :
                       rec.biohackingLevel === 'intermediate' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}
                    </Badge>
                  </div>
                  <CardTitle className="text-lg font-semibold mb-2">
                    {rec.title}
                  </CardTitle>
                  <p className="text-gray-600 text-sm">
                    {rec.description}
                  </p>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => toggleExpanded(rec.id)}
                  className="ml-4"
                >
                  {expandedCards.has(rec.id) ? 
                    <ChevronUp className="h-4 w-4" /> : 
                    <ChevronDown className="h-4 w-4" />
                  }
                </Button>
              </div>
            </CardHeader>

            {expandedCards.has(rec.id) && (
              <CardContent className="pt-0 space-y-4">
                {/* –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ */}
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2 flex items-center gap-2">
                    <BookOpen className="h-4 w-4" />
                    –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
                  </h4>
                  <p className="text-blue-800 text-sm">{rec.scientificBasis}</p>
                  <Badge variant="outline" className="mt-2 text-xs">
                    –£—Ä–æ–≤–µ–Ω—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {rec.evidenceLevel === 'meta-analysis' ? '–ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑' :
                                            rec.evidenceLevel === 'rct' ? '–†–ö–ò' :
                                            rec.evidenceLevel === 'observational' ? '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ–µ' : '–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ'}
                  </Badge>
                </div>

                {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
                {(rec.safetyWarnings?.length > 0 || rec.contraindications?.length > 0) && (
                  <div className="bg-amber-50 p-4 rounded-lg">
                    <h4 className="font-medium text-amber-900 mb-2 flex items-center gap-2">
                      <AlertTriangle className="h-4 w-4" />
                      –í–∞–∂–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    </h4>
                    {rec.safetyWarnings?.length > 0 && (
                      <div className="mb-2">
                        <p className="text-xs font-medium text-amber-800 mb-1">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</p>
                        <ul className="text-amber-800 text-sm space-y-1">
                          {rec.safetyWarnings.map((warning, idx) => (
                            <li key={idx} className="text-xs">‚Ä¢ {warning}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                    {rec.contraindications?.length > 0 && (
                      <div>
                        <p className="text-xs font-medium text-amber-800 mb-1">–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:</p>
                        <ul className="text-amber-800 text-sm space-y-1">
                          {rec.contraindications.map((contra, idx) => (
                            <li key={idx} className="text-xs">‚Ä¢ {contra}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                )}

                {/* –ü–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è */}
                <div className="bg-green-50 p-4 rounded-lg">
                  <h4 className="font-medium text-green-900 mb-3">–ü–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</h4>
                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-xs font-medium text-green-800 mb-2">–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω:</p>
                      <ol className="text-green-800 text-sm space-y-1">
                        {rec.implementation.steps.map((step, idx) => (
                          <li key={idx} className="text-xs">{idx + 1}. {step}</li>
                        ))}
                      </ol>
                    </div>
                    <div className="space-y-2">
                      <div>
                        <p className="text-xs font-medium text-green-800">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</p>
                        <p className="text-xs text-green-700">{rec.implementation.duration}</p>
                      </div>
                      <div>
                        <p className="text-xs font-medium text-green-800">–ß–∞—Å—Ç–æ—Ç–∞:</p>
                        <p className="text-xs text-green-700">{rec.implementation.frequency}</p>
                      </div>
                      {rec.implementation.dosage && (
                        <div>
                          <p className="text-xs font-medium text-green-800">–î–æ–∑–∏—Ä–æ–≤–∫–∞:</p>
                          <p className="text-xs text-green-700">{rec.implementation.dosage}</p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </CardContent>
            )}
          </Card>
        ))}
      </div>

      {recommendations.length > 0 && (
        <div className="text-center text-sm text-gray-500 mt-6 space-y-1">
          <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleString('ru-RU')}</p>
          <p className="flex items-center justify-center gap-2">
            {isOnline ? (
              <>
                <Wifi className="h-3 w-3 text-green-500" />
                <span>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ò–ò-—Å–µ—Ä–≤–∏—Å—É –∞–∫—Ç–∏–≤–Ω–æ</span>
              </>
            ) : (
              <>
                <WifiOff className="h-3 w-3 text-red-500" />
                <span>–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º ‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
              </>
            )}
          </p>
        </div>
      )}
    </div>
  );
};

export default EnhancedAnalyticsRecommendations;
