
import React, { useState } from "react";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Pill, Plus, X } from "lucide-react";
import { HealthProfileData } from "@/types/healthProfile";

interface MedicationsSectionProps {
  data: HealthProfileData;
  onChange: (updates: Partial<HealthProfileData>) => void;
}

const MedicationsSection: React.FC<MedicationsSectionProps> = ({ data, onChange }) => {
  const [customMedication, setCustomMedication] = useState("");

  const commonMedications = [
    { key: 'aspirin', label: '–ê—Å–ø–∏—Ä–∏–Ω (–∫–∞—Ä–¥–∏–æ–º–∞–≥–Ω–∏–ª)' },
    { key: 'metformin', label: '–ú–µ—Ç—Ñ–æ—Ä–º–∏–Ω' },
    { key: 'statins', label: '–°—Ç–∞—Ç–∏–Ω—ã (–∞—Ç–æ—Ä–≤–∞—Å—Ç–∞—Ç–∏–Ω, —Ä–æ–∑—É–≤–∞—Å—Ç–∞—Ç–∏–Ω)' },
    { key: 'ace_inhibitors', label: '–ò–Ω–≥–∏–±–∏—Ç–æ—Ä—ã –ê–ü–§ (–ª–∏–∑–∏–Ω–æ–ø—Ä–∏–ª, —ç–Ω–∞–ª–∞–ø—Ä–∏–ª)' },
    { key: 'beta_blockers', label: '–ë–µ—Ç–∞-–±–ª–æ–∫–∞—Ç–æ—Ä—ã (–±–∏—Å–æ–ø—Ä–æ–ª–æ–ª, –º–µ—Ç–æ–ø—Ä–æ–ª–æ–ª)' },
    { key: 'calcium_blockers', label: '–ë–ª–æ–∫–∞—Ç–æ—Ä—ã –∫–∞–ª—å—Ü–∏–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (–∞–º–ª–æ–¥–∏–ø–∏–Ω)' },
    { key: 'diuretics', label: '–î–∏—É—Ä–µ—Ç–∏–∫–∏ (–∏–Ω–¥–∞–ø–∞–º–∏–¥, –≥–∏–¥—Ä–æ—Ö–ª–æ—Ä—Ç–∏–∞–∑–∏–¥)' },
    { key: 'ppi', label: '–ò–Ω–≥–∏–±–∏—Ç–æ—Ä—ã –ø—Ä–æ—Ç–æ–Ω–Ω–æ–π –ø–æ–º–ø—ã (–æ–º–µ–ø—Ä–∞–∑–æ–ª, –ø–∞–Ω—Ç–æ–ø—Ä–∞–∑–æ–ª)' },
    { key: 'thyroid_hormones', label: '–ì–æ—Ä–º–æ–Ω—ã —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã (L-—Ç–∏—Ä–æ–∫—Å–∏–Ω)' },
    { key: 'insulin', label: '–ò–Ω—Å—É–ª–∏–Ω' },
    { key: 'warfarin', label: '–í–∞—Ä—Ñ–∞—Ä–∏–Ω' },
    { key: 'direct_anticoagulants', label: '–ü—Ä—è–º—ã–µ –∞–Ω—Ç–∏–∫–æ–∞–≥—É–ª—è–Ω—Ç—ã (—Ä–∏–≤–∞—Ä–æ–∫—Å–∞–±–∞–Ω, –∞–ø–∏–∫—Å–∞–±–∞–Ω)' },
    { key: 'antidepressants', label: '–ê–Ω—Ç–∏–¥–µ–ø—Ä–µ—Å—Å–∞–Ω—Ç—ã' },
    { key: 'nsaids', label: '–ù–ü–í–° (–∏–±—É–ø—Ä–æ—Ñ–µ–Ω, –¥–∏–∫–ª–æ—Ñ–µ–Ω–∞–∫)' },
    { key: 'contraceptives', label: '–û—Ä–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞—Ü–µ–ø—Ç–∏–≤—ã' },
    { key: 'vitamin_d', label: '–í–∏—Ç–∞–º–∏–Ω D' },
    { key: 'b12', label: '–í–∏—Ç–∞–º–∏–Ω B12' },
    { key: 'omega3', label: '–û–º–µ–≥–∞-3' },
    { key: 'magnesium', label: '–ú–∞–≥–Ω–∏–π' },
    { key: 'probiotics', label: '–ü—Ä–æ–±–∏–æ—Ç–∏–∫–∏' }
  ];

  const handleMedicationChange = (medication: string, checked: boolean) => {
    const currentMedications = data.medications || [];
    let newMedications;
    
    if (checked) {
      newMedications = [...currentMedications, medication];
    } else {
      newMedications = currentMedications.filter((m: string) => m !== medication);
    }
    
    onChange({ medications: newMedications });
  };

  const handleAddCustomMedication = () => {
    if (customMedication.trim()) {
      const currentMedications = data.medications || [];
      const newMedications = [...currentMedications, customMedication.trim()];
      onChange({ medications: newMedications });
      setCustomMedication("");
    }
  };

  const handleRemoveCustomMedication = (medicationToRemove: string) => {
    const currentMedications = data.medications || [];
    const newMedications = currentMedications.filter((m: string) => m !== medicationToRemove);
    onChange({ medications: newMedications });
  };

  const isCommonMedication = (medication: string) => {
    return commonMedications.some(med => med.key === medication);
  };

  const customMedications = (data.medications || []).filter(med => !isCommonMedication(med));

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Pill className="h-5 w-5" />
          –ü—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ */}
        <div className="space-y-3">
          <Label className="text-sm font-medium">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</Label>
          <div className="grid grid-cols-1 gap-2 max-h-60 overflow-y-auto">
            {commonMedications.map((medication) => (
              <div key={medication.key} className="flex items-center space-x-2">
                <Checkbox
                  id={medication.key}
                  checked={(data.medications || []).includes(medication.key)}
                  onCheckedChange={(checked) => handleMedicationChange(medication.key, !!checked)}
                />
                <Label htmlFor={medication.key} className="text-sm cursor-pointer">
                  {medication.label}
                </Label>
              </div>
            ))}
          </div>
        </div>

        {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ */}
        <div className="space-y-3">
          <Label className="text-sm font-medium">–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ</Label>
          <div className="flex gap-2">
            <Input
              value={customMedication}
              onChange={(e) => setCustomMedication(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  e.preventDefault();
                  handleAddCustomMedication();
                }
              }}
            />
            <Button 
              type="button"
              onClick={handleAddCustomMedication}
              disabled={!customMedication.trim()}
              size="sm"
            >
              <Plus className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ */}
        {customMedications.length > 0 && (
          <div className="space-y-3">
            <Label className="text-sm font-medium">–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞</Label>
            <div className="space-y-2">
              {customMedications.map((medication, index) => (
                <div key={`custom-${index}`} className="flex items-center justify-between p-2 bg-gray-50 rounded-md">
                  <span className="text-sm">{medication}</span>
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    onClick={() => handleRemoveCustomMedication(medication)}
                    className="h-6 w-6 p-0"
                  >
                    <X className="h-3 w-3" />
                  </Button>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
        <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
          <p className="text-xs text-blue-700">
            üí° <strong>–í–∞–∂–Ω–æ:</strong> –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è —Ç–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è. 
            –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –ò–ò —É—á–µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –¥–∞—Ç—å –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default MedicationsSection;
