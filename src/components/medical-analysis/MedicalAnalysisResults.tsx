import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle, TrendingUp, TrendingDown, Minus, ArrowLeft, Mail, Share, Save } from "lucide-react";
import { MedicalAnalysisResults as ResultsType } from "@/services/ai/medical-analysis";
import { toast } from "sonner";
import { useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/contexts/AuthContext";

interface MedicalAnalysisResultsProps {
  results: ResultsType | null;
  isAnalyzing: boolean;
  apiError?: string | null;
  onBack: () => void;
}

const MedicalAnalysisResults = ({ results, isAnalyzing, apiError, onBack }: MedicalAnalysisResultsProps) => {
  const { user } = useAuth();
  const [isSaving, setIsSaving] = useState(false);
  const [isSaved, setIsSaved] = useState(false);

  const handleShareResults = () => {
    if (navigator.share) {
      navigator.share({
        title: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - EVERLIV',
        text: `–ü–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ "${results?.analysisType}" —Å ${results?.markers.length} –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏`,
        url: window.location.href
      });
    } else {
      navigator.clipboard.writeText(window.location.href);
      toast.success('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }
  };

  const handleSaveResults = async () => {
    if (!results || !user?.id) {
      toast.error('–ù–µ —É–¥–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      return;
    }

    setIsSaving(true);
    console.log('üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:', {
      analysisType: results.analysisType,
      markersCount: results.markers.length,
      userId: user.id
    });

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–∏ —É–∂–µ –∞–Ω–∞–ª–∏–∑
      if (results.analysisId) {
        const { data: existingAnalysis } = await supabase
          .from('medical_analyses')
          .select('id')
          .eq('id', results.analysisId)
          .single();

        if (existingAnalysis) {
          console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', results.analysisId);
          setIsSaved(true);
          toast.success('–ê–Ω–∞–ª–∏–∑ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏');
          setIsSaving(false);
          return;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
      const analysisData = {
        user_id: user.id,
        analysis_type: results.analysisType,
        results: JSON.parse(JSON.stringify(results)) as any, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ Json —Ç–∏–ø—É
        summary: results.summary,
        input_method: 'text' as const,
        created_at: new Date().toISOString()
      };

      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞:', analysisData);

      const { data: savedAnalysis, error: analysisError } = await supabase
        .from('medical_analyses')
        .insert(analysisData)
        .select('id')
        .single();

      if (analysisError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞:', analysisError);
        throw analysisError;
      }

      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID:', savedAnalysis.id);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã
      if (results.markers && results.markers.length > 0) {
        const biomarkersData = results.markers.map(marker => ({
          analysis_id: savedAnalysis.id,
          name: marker.name,
          value: marker.value,
          reference_range: marker.normalRange,
          status: marker.status
        }));

        console.log('üß¨ –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–æ–º–∞—Ä–∫–µ—Ä—ã:', biomarkersData.length);

        const { error: biomarkersError } = await supabase
          .from('biomarkers')
          .insert(biomarkersData);

        if (biomarkersError) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤:', biomarkersError);
          // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        } else {
          console.log('‚úÖ –ë–∏–æ–º–∞—Ä–∫–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        }
      }

      setIsSaved(true);
      toast.success('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏!');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    } finally {
      setIsSaving(false);
    }
  };

  if (apiError) {
    return (
      <div className="space-y-6">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</AlertTitle>
          <AlertDescription>{apiError}</AlertDescription>
        </Alert>
        <div className="pt-4">
          <Button variant="outline" onClick={onBack} className="flex items-center gap-2">
            <ArrowLeft className="h-4 w-4" />
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö
          </Button>
        </div>
      </div>
    );
  }

  if (!results) {
    return null;
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'high':
        return <TrendingUp className="h-4 w-4 text-red-500" />;
      case 'low':
        return <TrendingDown className="h-4 w-4 text-amber-500" />;
      default:
        return <Minus className="h-4 w-4 text-green-500" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'high':
        return 'text-red-600 bg-red-50';
      case 'low':
        return 'text-amber-600 bg-amber-50';
      default:
        return 'text-green-600 bg-green-50';
    }
  };

  const getRiskLevelColor = (level: string) => {
    switch (level) {
      case 'high':
        return 'destructive';
      case 'medium':
        return 'secondary';
      default:
        return 'default';
    }
  };

  const getRiskLevelText = (level: string) => {
    switch (level) {
      case 'high':
        return '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫';
      case 'medium':
        return '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫';
      default:
        return '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫';
    }
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h2>
          <p className="text-gray-600">{results.analysisType}</p>
        </div>
        <div className="flex items-center gap-3">
          <Badge variant={getRiskLevelColor(results.riskLevel)} className="px-3 py-1">
            {getRiskLevelText(results.riskLevel)}
          </Badge>
          <Button 
            variant="outline" 
            onClick={handleSaveResults}
            disabled={isSaving || isSaved}
            className="flex items-center gap-2"
          >
            <Save className="h-4 w-4" />
            {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : isSaved ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </Button>
          <Button variant="outline" onClick={handleShareResults} className="flex items-center gap-2">
            <Share className="h-4 w-4" />
            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
          </Button>
          <Button variant="outline" onClick={onBack} className="flex items-center gap-2">
            <ArrowLeft className="h-4 w-4" />
            –ù–∞–∑–∞–¥
          </Button>
        </div>
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ */}
      {isSaved && (
        <Alert>
          <Save className="h-4 w-4" />
          <AlertTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</AlertTitle>
          <AlertDescription>
            –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã".
          </AlertDescription>
        </Alert>
      )}

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º email */}
      <Alert>
        <Mail className="h-4 w-4" />
        <AlertTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ—á—Ç—É</AlertTitle>
        <AlertDescription>
          –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
        </AlertDescription>
      </Alert>

      {/* –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üìã –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-gray-700">{results.summary}</p>
        </CardContent>
      </Card>

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π */}
      <Card>
        <CardHeader>
          <CardTitle>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å</TableHead>
                <TableHead>–ó–Ω–∞—á–µ–Ω–∏–µ</TableHead>
                <TableHead>–ù–æ—Ä–º–∞</TableHead>
                <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                <TableHead>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {results.markers.map((marker, index) => (
                <TableRow key={index}>
                  <TableCell className="font-medium">{marker.name}</TableCell>
                  <TableCell className="font-semibold">{marker.value}</TableCell>
                  <TableCell className="text-gray-500">{marker.normalRange}</TableCell>
                  <TableCell>
                    <div className={`flex items-center gap-2 px-2 py-1 rounded-full ${getStatusColor(marker.status)}`}>
                      {getStatusIcon(marker.status)}
                      <span className="text-xs font-medium">
                        {marker.status === 'high' ? '–í—ã—à–µ –Ω–æ—Ä–º—ã' : 
                         marker.status === 'low' ? '–ù–∏–∂–µ –Ω–æ—Ä–º—ã' : '–ù–æ—Ä–º–∞'}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell className="max-w-xs">
                    <div className="text-sm text-gray-700">{marker.recommendation}</div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–±–∞–≤–∫–∏ */}
      {results.supplements.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üíä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–±–∞–≤–∫–∏ –∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {results.supplements.map((supplement, index) => (
                <div key={index} className="border-l-4 border-blue-200 pl-4 py-2">
                  <div className="font-semibold text-gray-900">{supplement.name}</div>
                  <div className="text-sm text-gray-600 mt-1">{supplement.reason}</div>
                  <div className="text-xs text-blue-600 mt-2 font-medium">
                    –î–æ–∑–∏—Ä–æ–≤–∫–∞: {supplement.dosage}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã */}
      {results.followUpTests.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üî¨ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2">
              {results.followUpTests.map((test, index) => (
                <li key={index} className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  <span className="text-gray-700">{test}</span>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      )}

      {/* –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üéØ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-gray-700 leading-relaxed">{results.generalRecommendation}</p>
        </CardContent>
      </Card>

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞ */}
      <Alert>
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>–í–∞–∂–Ω–æ</AlertTitle>
        <AlertDescription>
          –î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö. 
          –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–∞—á–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 
          –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–µ—á–µ–Ω–∏—è.
        </AlertDescription>
      </Alert>
    </div>
  );
};

export default MedicalAnalysisResults;
