import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import AnalysisCard from "./AnalysisCard";
import EmptyAnalysisState from "./EmptyAnalysisState";
import { AnalysisItem } from "@/types/labAnalyses";

interface AnalysisHistoryProps {
  analysisHistory: AnalysisItem[];
  loadingHistory: boolean;
  onViewAnalysis: (analysisId: string) => void;
  onAddNewAnalysis: () => void;
  onRefresh?: () => void;
}

const AnalysisHistory: React.FC<AnalysisHistoryProps> = ({
  analysisHistory,
  loadingHistory,
  onViewAnalysis,
  onAddNewAnalysis,
  onRefresh = () => {},
}) => {
  console.log('üîç AnalysisHistory: Rendering with data:', {
    historyLength: analysisHistory?.length || 0,
    isLoading: loadingHistory,
    firstAnalysis: analysisHistory?.[0],
    allAnalyses: analysisHistory
  });

  const getAnalysisTypeLabel = (type: string) => {
    const types = {
      blood: "–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏",
      urine: "–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏", 
      biochemistry: "–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏",
      hormones: "–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å",
      vitamins: "–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã",
      immunology: "–ò–º–º—É–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
      oncology: "–û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã",
      cardiology: "–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã",
      lipids: "–õ–∏–ø–∏–¥–æ–≥—Ä–∞–º–º–∞",
      diabetes: "–ê–Ω–∞–ª–∏–∑—ã –Ω–∞ –¥–∏–∞–±–µ—Ç",
      thyroid: "–§—É–Ω–∫—Ü–∏—è —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã",
      other: "–î—Ä—É–≥–∏–µ –∞–Ω–∞–ª–∏–∑—ã"
    };
    return types[type] || type;
  };

  const getRiskIcon = (level: string) => {
    switch (level) {
      case 'high':
        return "üî¥";
      case 'medium':
        return "üü°";
      case 'low':
        return "üü¢";
      default:
        return "‚ö™";
    }
  };

  const getRiskColor = (level: string): "default" | "destructive" | "outline" | "secondary" => {
    switch (level) {
      case 'high':
        return 'destructive';
      case 'medium':
        return 'secondary';
      case 'low':
        return 'default';
      default:
        return 'outline';
    }
  };

  const getRiskText = (level: string) => {
    switch (level) {
      case 'high':
        return '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫';
      case 'medium':
        return '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫';
      case 'low':
        return '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫';
      default:
        return '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
    }
  };

  if (loadingHistory) {
    console.log('‚è≥ AnalysisHistory: Showing loading state');
    return (
      <div className="space-y-3">
        <div className="flex items-center justify-between">
          <h2 className="text-base font-semibold text-gray-900">–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤</h2>
          <div className="animate-pulse h-3 bg-gray-200 rounded w-20"></div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
          {[1, 2, 3, 4, 5, 6].map(i => (
            <Card key={i} className="animate-pulse rounded-none border-gray-200/80">
              <CardContent className="p-3">
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 bg-gray-200 rounded-none"></div>
                    <div className="flex-1">
                      <div className="h-3 bg-gray-200 rounded w-3/4 mb-1"></div>
                      <div className="h-2 bg-gray-200 rounded w-1/2"></div>
                    </div>
                  </div>
                  <div className="grid grid-cols-3 gap-1">
                    <div className="h-8 bg-gray-200 rounded-none"></div>
                    <div className="h-8 bg-gray-200 rounded-none"></div>
                    <div className="h-8 bg-gray-200 rounded-none"></div>
                  </div>
                  <div className="h-6 bg-gray-200 rounded-none"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (!analysisHistory || analysisHistory.length === 0) {
    console.log('üì≠ AnalysisHistory: Showing empty state');
    return <EmptyAnalysisState onAddAnalysis={onAddNewAnalysis} />;
  }

  console.log('‚úÖ AnalysisHistory: Rendering analyses grid with', analysisHistory.length, 'items');

  return (
    <div className="space-y-3">
      <div className="flex items-center justify-between">
        <h2 className="text-base font-semibold text-gray-900">–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤</h2>
        <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-none">
          {analysisHistory.length} {analysisHistory.length === 1 ? '–∞–Ω–∞–ª–∏–∑' : '–∞–Ω–∞–ª–∏–∑–æ–≤'}
        </span>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
        {analysisHistory.map((analysis, index) => {
          console.log(`üîç AnalysisHistory: Rendering analysis ${index + 1}:`, {
            id: analysis.id,
            type: analysis.analysis_type,
            markersCount: analysis.markers_count,
            hasResults: !!analysis.results
          });
          
          return (
            <AnalysisCard
              key={analysis.id}
              analysis={analysis}
              onViewAnalysis={onViewAnalysis}
              onRefresh={onRefresh}
              getAnalysisTypeLabel={getAnalysisTypeLabel}
              getRiskIcon={getRiskIcon}
              getRiskColor={getRiskColor}
              getRiskText={getRiskText}
            />
          );
        })}
      </div>
    </div>
  );
};

export default AnalysisHistory;
