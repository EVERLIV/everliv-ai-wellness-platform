
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Target, Plus, Sparkles, Calendar, Save } from 'lucide-react';
import { useHealthGoalsManager } from '@/hooks/useHealthGoalsManager';
import { useHealthProfile } from '@/hooks/useHealthProfile';
import { useCachedAnalytics } from '@/hooks/useCachedAnalytics';
import { toast } from 'sonner';

const SimpleGoalCreator: React.FC = () => {
  const [goalText, setGoalText] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [suggestedDate, setSuggestedDate] = useState('');
  const [isGeneratingDate, setIsGeneratingDate] = useState(false);
  
  const { createCustomGoal } = useHealthGoalsManager();
  const { healthProfile } = useHealthProfile();
  const { analytics } = useCachedAnalytics();

  const generateAIDate = async () => {
    if (!goalText.trim()) {
      toast.error('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏');
      return;
    }

    setIsGeneratingDate(true);
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–ª–∏
      const goalLower = goalText.toLowerCase();
      const today = new Date();
      let targetDate = new Date(today);

      if (goalLower.includes('–ø–æ—Ö—É–¥') || goalLower.includes('–≤–µ—Å')) {
        // –¶–µ–ª–∏ –ø–æ –≤–µ—Å—É - 3 –º–µ—Å—è—Ü–∞
        targetDate.setMonth(today.getMonth() + 3);
      } else if (goalLower.includes('–º—ã—à—Ü') || goalLower.includes('—Å–∏–ª')) {
        // –¶–µ–ª–∏ –ø–æ –º—ã—à—Ü–∞–º - 6 –º–µ—Å—è—Ü–µ–≤
        targetDate.setMonth(today.getMonth() + 6);
      } else if (goalLower.includes('–ø—Ä–∏–≤—ã—á–∫') || goalLower.includes('—Ä–µ–∂–∏–º')) {
        // –ü—Ä–∏–≤—ã—á–∫–∏ - 1 –º–µ—Å—è—Ü
        targetDate.setMonth(today.getMonth() + 1);
      } else if (goalLower.includes('–∞–Ω–∞–ª–∏–∑') || goalLower.includes('–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω')) {
        // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ü–µ–ª–∏ - 2 –Ω–µ–¥–µ–ª–∏
        targetDate.setDate(today.getDate() + 14);
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 2 –º–µ—Å—è—Ü–∞
        targetDate.setMonth(today.getMonth() + 2);
      }

      // –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
      if (healthProfile?.age && healthProfile.age > 50) {
        // –î–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ 50+ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü
        targetDate.setMonth(targetDate.getMonth() + 1);
      }

      // –£—á–∏—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–¥–æ—Ä–æ–≤—å—è
      if (analytics?.healthScore && analytics.healthScore < 60) {
        // –î–ª—è –Ω–∏–∑–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ä–æ–∫
        targetDate.setMonth(targetDate.getMonth() + 1);
      }

      setSuggestedDate(targetDate.toISOString().split('T')[0]);
      toast.success('–ò–ò –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    } catch (error) {
      console.error('Error generating AI date:', error);
      // Fallback –¥–∞—Ç–∞ - 2 –º–µ—Å—è—Ü–∞
      const fallbackDate = new Date();
      fallbackDate.setMonth(fallbackDate.getMonth() + 2);
      setSuggestedDate(fallbackDate.toISOString().split('T')[0]);
      toast.success('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    } finally {
      setIsGeneratingDate(false);
    }
  };

  const handleCreateGoal = async () => {
    if (!goalText.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏');
      return;
    }

    setIsCreating(true);
    try {
      const goalData = {
        title: goalText.length > 50 ? goalText.substring(0, 50) + '...' : goalText,
        description: goalText,
        category: 'custom',
        priority: 'medium' as const,
        start_date: new Date().toISOString().split('T')[0],
        end_date: suggestedDate || undefined
      };

      const success = await createCustomGoal(goalData);
      if (success) {
        setGoalText('');
        setSuggestedDate('');
        toast.success('–¶–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      }
    } catch (error) {
      console.error('Error creating goal:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏');
    } finally {
      setIsCreating(false);
    }
  };

  return (
    <Card className="shadow-sm border-gray-200/80">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center gap-2 text-gray-900">
          <Target className="h-5 w-5 text-green-600" />
          <span className="text-lg font-semibold">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å</span>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="goal-text" className="text-sm font-medium">
            –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å
          </Label>
          <Textarea
            id="goal-text"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–Ω–∏–∑–∏—Ç—å –≤–µ—Å –Ω–∞ 5 –∫–≥, —É–ª—É—á—à–∏—Ç—å —Å–æ–Ω, –Ω–∞—á–∞—Ç—å –±–µ–≥–∞—Ç—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ..."
            value={goalText}
            onChange={(e) => setGoalText(e.target.value)}
            className="min-h-[80px] resize-none"
            maxLength={500}
          />
          <div className="text-xs text-gray-500 text-right">
            {goalText.length}/500
          </div>
        </div>

        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={generateAIDate}
            disabled={isGeneratingDate || !goalText.trim()}
            className="flex-1"
          >
            <Sparkles className="h-4 w-4 mr-2" />
            {isGeneratingDate ? '–ò–ò –¥—É–º–∞–µ—Ç...' : '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–∞—Ç—É –ò–ò'}
          </Button>
        </div>

        {suggestedDate && (
          <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
            <div className="flex items-center gap-2 mb-2">
              <Calendar className="h-4 w-4 text-blue-600" />
              <span className="text-sm font-medium text-blue-800">
                –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
              </span>
            </div>
            <Input
              type="date"
              value={suggestedDate}
              onChange={(e) => setSuggestedDate(e.target.value)}
              className="bg-white border-blue-200"
            />
            <p className="text-xs text-blue-700 mt-2">
              –ò–ò —É—á–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞
            </p>
          </div>
        )}

        <Button
          onClick={handleCreateGoal}
          disabled={isCreating || !goalText.trim()}
          className="w-full bg-green-600 hover:bg-green-700"
        >
          <Save className="h-4 w-4 mr-2" />
          {isCreating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å'}
        </Button>

        <div className="text-xs text-gray-500 space-y-1">
          <p>üí° <strong>–°–æ–≤–µ—Ç:</strong> –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ</p>
          <p>ü§ñ –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</p>
          <p>üìä –°—Ä–æ–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –±–∏–æ–º–∞—Ä–∫–µ—Ä–æ–≤</p>
        </div>
      </CardContent>
    </Card>
  );
};

export default SimpleGoalCreator;
