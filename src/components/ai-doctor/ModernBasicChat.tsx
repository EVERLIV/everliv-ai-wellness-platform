import React, { useEffect, useRef, useState } from "react";
import { Button } from "@/components/ui/button";
import { Plus, Sparkles, ArrowLeft, MessageSquare, Send, Loader2, BookOpen, User, ChevronRight } from "lucide-react";
import { useAuth } from "@/contexts/AuthContext";
import { supabase } from "@/integrations/supabase/client";
import { useIsMobile } from "@/hooks/use-mobile";
import { Microscope, Pill, TrendingUp, Heart, Apple, Brain, Activity } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { cn } from "@/lib/utils";

const iconMap = {
  microscope: Microscope,
  pill: Pill,
  "trending-up": TrendingUp,
  "book-open": BookOpen,
  heart: Heart,
  apple: Apple,
  brain: Brain,
  activity: Activity,
};

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface ModernBasicChatProps {
  onBack: () => void;
}

const ModernBasicChat: React.FC<ModernBasicChatProps> = ({ onBack }) => {
  const { user } = useAuth();
  const isMobile = useIsMobile();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [messageCount, setMessageCount] = useState(0);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const maxMessages = 3;

  const suggestedQuestions = [
    { 
      text: "–£ –º–µ–Ω—è –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞ —É–∂–µ 3 –¥–Ω—è", 
      icon: "brain",
      category: "–°–∏–º–ø—Ç–æ–º—ã",
      description: "–ì–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏, –º–∏–≥—Ä–µ–Ω—å"
    },
    { 
      text: "–ö–∞–∫–∏–µ –≤–∏—Ç–∞–º–∏–Ω—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∏–º–æ–π?", 
      icon: "pill",
      category: "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞",
      description: "–í–∏—Ç–∞–º–∏–Ω—ã –∏ –¥–æ–±–∞–≤–∫–∏"
    },
    { 
      text: "–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞?", 
      icon: "activity",
      category: "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
      description: "–†–µ–∂–∏–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
    },
    { 
      text: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤?", 
      icon: "microscope",
      category: "–ê–Ω–∞–ª–∏–∑—ã",
      description: "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"
    },
  ];

  useEffect(() => {
    if (user) {
      const today = new Date().toDateString();
      const storageKey = `basic_ai_doctor_messages_${user.id}_${today}`;
      const savedCount = localStorage.getItem(storageKey);
      if (savedCount) {
        setMessageCount(parseInt(savedCount, 10));
      }
    }

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage: Message = {
      id: 'welcome',
      role: 'assistant',
      content: '–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ò–ò-–¥–æ–∫—Ç–æ—Ä EVERLIV. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ.\n\n–£ –≤–∞—Å –µ—Å—Ç—å 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è. –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏, —Å–∏–º–ø—Ç–æ–º–∞—Ö –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ.',
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  }, [user]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      const maxHeight = isMobile ? 100 : 120;
      const newHeight = Math.min(textareaRef.current.scrollHeight, maxHeight);
      textareaRef.current.style.height = `${Math.max(newHeight, isMobile ? 44 : 52)}px`;
    }
  }, [inputText, isMobile]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!inputText.trim() || isProcessing || messageCount >= maxMessages) {
      return;
    }

    const userMessage: Message = {
      id: `user-${Date.now()}`,
      role: 'user',
      content: inputText.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText("");
    setIsProcessing(true);
    
    const newCount = messageCount + 1;
    setMessageCount(newCount);
    
    if (user) {
      const today = new Date().toDateString();
      const storageKey = `basic_ai_doctor_messages_${user.id}_${today}`;
      localStorage.setItem(storageKey, newCount.toString());
    }

    try {
      const { data, error } = await supabase.functions.invoke('ai-doctor', {
        body: {
          message: inputText.trim(),
          conversationHistory: messages.map(msg => ({
            role: msg.role,
            content: msg.content
          })),
          systemPrompt: `–í—ã - –ò–ò-–¥–æ–∫—Ç–æ—Ä Everliv, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —á–µ—Ç–∫–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- –î–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ë—É–¥—å—Ç–µ —ç–º–ø–∞—Ç–∏—á–Ω—ã–º–∏ –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–º–∏

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
üîç **–ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤/—Å–∏—Ç—É–∞—Ü–∏–∏**
üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**
‚ö†Ô∏è **–ö–æ–≥–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É**
üìã **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã**

–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏.`
        }
      });

      if (error) throw error;

      const assistantMessage: Message = {
        id: `assistant-${Date.now()}`,
        role: 'assistant',
        content: data.response,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);

      if (newCount >= maxMessages) {
        setTimeout(() => {
          const limitMessage: Message = {
            id: 'limit-reached',
            role: 'assistant',
            content: '‚è∞ **–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω**\n\n–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è.\n\n–î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ò–ò-–¥–æ–∫—Ç–æ—Ä–æ–º –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º - –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É! üöÄ',
            timestamp: new Date()
          };
          setMessages(prev => [...prev, limitMessage]);
        }, 1000);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –ò–ò-–¥–æ–∫—Ç–æ—Ä–∞:', error);
      const errorMessage: Message = {
        id: `error-${Date.now()}`,
        role: 'assistant',
        content: '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleSuggestedQuestion = (question: string) => {
    setInputText(question);
    if (textareaRef.current) {
      textareaRef.current.focus();
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e as any);
    }
  };

  const isLimitReached = messageCount >= maxMessages;
  const showSuggestedQuestions = messages.length <= 1;

  return (
    <div className="h-full flex flex-col bg-gradient-to-br from-background to-muted/20">
      {/* Modern Header */}
      <div className={cn(
        "flex items-center justify-between border-b bg-card/80 backdrop-blur-sm",
        isMobile ? "p-3 safe-area-pt" : "p-4"
      )}>
        <div className="flex items-center gap-3">
          <Button
            variant="ghost"
            size={isMobile ? "sm" : "default"}
            onClick={onBack}
            className="text-muted-foreground hover:text-foreground"
          >
            <ArrowLeft className={cn("mr-2", isMobile ? "h-4 w-4" : "h-5 w-5")} />
            {!isMobile && <span>–ù–∞–∑–∞–¥</span>}
          </Button>
          
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-gradient-to-br from-primary to-primary/80 rounded-xl flex items-center justify-center">
              <Brain className="h-4 w-4 text-primary-foreground" />
            </div>
            <div>
              <h1 className={cn("font-semibold text-foreground", isMobile ? "text-sm" : "text-lg")}>
                –ò–ò-–î–æ–∫—Ç–æ—Ä
              </h1>
              {!isMobile && (
                <p className="text-xs text-muted-foreground">–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</p>
              )}
            </div>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <div className={cn(
            "px-3 py-1.5 bg-primary/10 text-primary rounded-full font-medium",
            isMobile ? "text-xs" : "text-sm"
          )}>
            {maxMessages - messageCount} –∏–∑ {maxMessages}
          </div>
        </div>
      </div>

      {/* Messages Area */}
      <div className={cn(
        "flex-1 overflow-y-auto scroll-smooth",
        isMobile ? "p-3 space-y-4" : "p-6 space-y-6"
      )}>
        {messages.map((message) => (
          <div key={message.id} className="flex items-start gap-3">
            <div className={cn(
              "flex-shrink-0 rounded-xl flex items-center justify-center",
              isMobile ? "w-8 h-8" : "w-10 h-10",
              message.role === "user" 
                ? "bg-muted text-foreground" 
                : "bg-gradient-to-br from-primary to-primary/80 text-primary-foreground"
            )}>
              {message.role === "user" ? (
                <User className={cn(isMobile ? "h-4 w-4" : "h-5 w-5")} />
              ) : (
                <Brain className={cn(isMobile ? "h-4 w-4" : "h-5 w-5")} />
              )}
            </div>

            <div className="flex-1 min-w-0">
              <div className="flex items-center gap-2 mb-2">
                <span className={cn("font-medium text-foreground", isMobile ? "text-sm" : "text-base")}>
                  {message.role === "user" ? "–í—ã" : "–ò–ò-–î–æ–∫—Ç–æ—Ä"}
                </span>
                <span className={cn("text-muted-foreground", isMobile ? "text-xs" : "text-sm")}>
                  {message.timestamp.toLocaleTimeString([], {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </span>
              </div>
              
              <Card className={cn(
                "shadow-sm border-l-4",
                message.role === "user" 
                  ? "border-l-muted bg-muted/30" 
                  : "border-l-primary bg-card"
              )}>
                <CardContent className={cn(isMobile ? "p-3" : "p-4")}>
                  <div className={cn(
                    "text-foreground leading-relaxed whitespace-pre-wrap",
                    isMobile ? "text-sm" : "text-base"
                  )}>
                    {message.content}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        ))}
        
        {isProcessing && (
          <div className="flex items-start gap-3">
            <div className={cn(
              "flex-shrink-0 rounded-xl flex items-center justify-center bg-gradient-to-br from-primary to-primary/80 text-primary-foreground",
              isMobile ? "w-8 h-8" : "w-10 h-10"
            )}>
              <Brain className={cn(isMobile ? "h-4 w-4" : "h-5 w-5")} />
            </div>
            
            <div className="flex-1 min-w-0">
              <div className="flex items-center gap-2 mb-2">
                <span className={cn("font-medium text-foreground", isMobile ? "text-sm" : "text-base")}>
                  –ò–ò-–î–æ–∫—Ç–æ—Ä
                </span>
              </div>
              
              <Card className="shadow-sm border-l-4 border-l-primary">
                <CardContent className={cn(isMobile ? "p-3" : "p-4")}>
                  <div className="flex items-center gap-2 text-muted-foreground">
                    <Loader2 className={cn("animate-spin", isMobile ? "h-4 w-4" : "h-5 w-5")} />
                    <span className={cn(isMobile ? "text-sm" : "text-base")}>
                      –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...
                    </span>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Suggested Questions */}
      {showSuggestedQuestions && !isLimitReached && (
        <div className={cn(
          "border-t bg-muted/30 backdrop-blur-sm",
          isMobile ? "p-3" : "p-6"
        )}>
          <div className="text-center mb-4">
            <h3 className={cn("font-semibold text-foreground mb-1", isMobile ? "text-sm" : "text-lg")}>
              üí° –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            </h3>
            <p className={cn("text-muted-foreground", isMobile ? "text-xs" : "text-sm")}>
              –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π
            </p>
          </div>
          
          <div className={cn(
            "grid gap-3",
            isMobile ? "grid-cols-1" : "grid-cols-2"
          )}>
            {suggestedQuestions.map((question, index) => {
              const IconComponent = iconMap[question.icon as keyof typeof iconMap] || BookOpen;
              
              return (
                <Card 
                  key={index}
                  className="hover:shadow-md transition-all duration-200 cursor-pointer group hover:scale-[1.02]"
                  onClick={() => handleSuggestedQuestion(question.text)}
                >
                  <CardContent className={cn(isMobile ? "p-3" : "p-4")}>
                    <div className="flex items-start gap-3">
                      <div className={cn(
                        "flex-shrink-0 rounded-lg bg-primary/10 text-primary flex items-center justify-center",
                        isMobile ? "w-8 h-8" : "w-10 h-10"
                      )}>
                        <IconComponent className={cn(isMobile ? "h-4 w-4" : "h-5 w-5")} />
                      </div>
                      
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-1">
                          <span className={cn("text-primary font-medium", isMobile ? "text-xs" : "text-sm")}>
                            {question.category}
                          </span>
                          <ChevronRight className={cn(
                            "text-muted-foreground group-hover:text-primary transition-colors",
                            isMobile ? "h-3 w-3" : "h-4 w-4"
                          )} />
                        </div>
                        <p className={cn(
                          "text-foreground font-medium leading-tight mb-1",
                          isMobile ? "text-sm" : "text-base"
                        )}>
                          {question.text}
                        </p>
                        <p className={cn("text-muted-foreground", isMobile ? "text-xs" : "text-sm")}>
                          {question.description}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>
      )}

      {/* Input Area */}
      <div className={cn(
        "border-t bg-card/80 backdrop-blur-sm safe-area-pb",
        isMobile ? "p-3" : "p-6"
      )}>
        {isLimitReached ? (
          <Card className="bg-gradient-to-r from-primary/10 to-accent/10">
            <CardContent className={cn(isMobile ? "p-4" : "p-6")}>
              <div className="text-center">
                <h3 className={cn("font-semibold mb-2", isMobile ? "text-sm" : "text-lg")}>
                  ‚è∞ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
                </h3>
                <p className={cn("text-muted-foreground mb-4", isMobile ? "text-xs" : "text-sm")}>
                  –î–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ò–ò-–¥–æ–∫—Ç–æ—Ä–æ–º –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                </p>
                <Button 
                  className="bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70"
                  onClick={() => window.location.href = "/pricing"}
                >
                  üöÄ –û–±–Ω–æ–≤–∏—Ç—å –¥–æ –ü—Ä–µ–º–∏—É–º
                </Button>
              </div>
            </CardContent>
          </Card>
        ) : (
          <div className="flex gap-3 items-end">
            <div className="flex-1 min-w-0">
              <textarea
                ref={textareaRef}
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ..."
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyDown={handleKeyDown}
                disabled={isProcessing}
                className={cn(
                  "w-full resize-none border-0 bg-muted/50 placeholder:text-muted-foreground overflow-hidden focus:ring-2 focus:ring-primary/20 focus:outline-none rounded-xl transition-all duration-200",
                  isMobile 
                    ? "min-h-[44px] p-3 text-sm" 
                    : "min-h-[52px] p-4 text-base"
                )}
                style={{ 
                  lineHeight: '1.5',
                  wordBreak: 'break-word',
                  overflowWrap: 'break-word',
                  maxHeight: isMobile ? '100px' : '120px'
                }}
                rows={1}
              />
            </div>
            <Button
              onClick={handleSubmit}
              disabled={!inputText.trim() || isProcessing}
              className={cn(
                "flex-shrink-0 bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 transition-all duration-200",
                isMobile 
                  ? "h-[44px] w-[44px] rounded-xl" 
                  : "h-[52px] w-[52px] rounded-xl"
              )}
            >
              {isProcessing ? (
                <Loader2 className={cn("animate-spin", isMobile ? "h-4 w-4" : "h-5 w-5")} />
              ) : (
                <Send className={cn(isMobile ? "h-4 w-4" : "h-5 w-5")} />
              )}
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ModernBasicChat;