
import React, { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Camera, Upload, Plus, Loader2 } from "lucide-react";
import { useFoodEntries } from "@/hooks/useFoodEntries";
import { useFoodImageAnalysis } from "@/hooks/useFoodImageAnalysis";
import { toast } from "sonner";

interface MealEntryProps {
  mealType: 'breakfast' | 'lunch' | 'dinner' | 'snack';
  selectedDate: Date;
  trigger?: boolean;
  onHandled?: () => void;
}

const MealEntry: React.FC<MealEntryProps> = ({ 
  mealType, 
  selectedDate, 
  trigger = false,
  onHandled 
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [entryMode, setEntryMode] = useState<'manual' | 'camera' | 'upload'>('manual');
  const [foodData, setFoodData] = useState({
    food_name: '',
    calories: 0,
    protein: 0,
    carbs: 0,
    fat: 0,
    portion_size: ''
  });

  const { addEntry } = useFoodEntries(selectedDate);
  const { analyzeImage, isAnalyzing } = useFoodImageAnalysis();
  const [isSaving, setIsSaving] = useState(false);

  // Handle external trigger
  useEffect(() => {
    if (trigger) {
      setIsOpen(true);
      onHandled?.();
    }
  }, [trigger, onHandled]);

  const mealTitles = {
    breakfast: '–ó–∞–≤—Ç—Ä–∞–∫',
    lunch: '–û–±–µ–¥',
    dinner: '–£–∂–∏–Ω',
    snack: '–ü–µ—Ä–µ–∫—É—Å'
  };

  const handleClose = () => {
    setIsOpen(false);
    setFoodData({
      food_name: '',
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0,
      portion_size: ''
    });
    setEntryMode('manual');
  };

  const handleSave = async () => {
    if (!foodData.food_name.trim()) {
      return;
    }

    setIsSaving(true);
    try {
      await addEntry({
        meal_type: mealType,
        food_name: foodData.food_name,
        calories: foodData.calories,
        protein: foodData.protein,
        carbs: foodData.carbs,
        fat: foodData.fat,
        portion_size: foodData.portion_size,
        image_url: null,
        entry_date: selectedDate.toISOString().split('T')[0]
      });
      handleClose();
    } catch (error) {
      console.error('Error saving food entry:', error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleSaveWithImageUrl = async (imageUrl?: string) => {
    if (!foodData.food_name.trim()) {
      console.log('üì∑ Cannot save - no food name');
      return;
    }

    setIsSaving(true);
    try {
      console.log('üì∑ Saving food entry with image URL:', imageUrl);
      await addEntry({
        meal_type: mealType,
        food_name: foodData.food_name,
        calories: foodData.calories,
        protein: foodData.protein,
        carbs: foodData.carbs,
        fat: foodData.fat,
        portion_size: foodData.portion_size,
        image_url: imageUrl || null,
        entry_date: selectedDate.toISOString().split('T')[0]
      });
      
      console.log('üì∑ Food entry saved successfully');
      handleClose();
    } catch (error) {
      console.error('üì∑ Error saving food entry:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
    } finally {
      setIsSaving(false);
    }
  };

  const requestCameraPermission = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'environment' // –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –¥–ª—è —Å—ä–µ–º–∫–∏ –µ–¥—ã
        } 
      });
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      stream.getTracks().forEach(track => track.stop());
      
      toast.success("–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω!");
      return true;
    } catch (error) {
      console.error('Camera permission denied:', error);
      toast.error("–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.");
      return false;
    }
  };

  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      try {
        console.log('üì∑ Starting image analysis for file:', file.name);
        const analysis = await analyzeImage(file);
        
        if (analysis) {
          console.log('üì∑ Analysis completed:', analysis);
          
          // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const imageUrl = URL.createObjectURL(file);
          
          setFoodData({
            food_name: analysis.food_name,
            calories: analysis.calories,
            protein: analysis.protein,
            carbs: analysis.carbs,
            fat: analysis.fat,
            portion_size: analysis.portion_size
          });
          
          // –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Ä–µ–∂–∏–º–µ, –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
          console.log('üì∑ Food data updated, staying in current mode');
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
          if (analysis.food_name) {
            console.log('üì∑ Auto-saving analyzed food entry');
            await handleSaveWithImageUrl(imageUrl);
          }
        } else {
          console.log('üì∑ Analysis failed - no results');
          toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        }
      } catch (error) {
        console.error('üì∑ Error during image analysis:', error);
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
    event.target.value = '';
  };

  const handleCameraMode = async () => {
    const hasPermission = await requestCameraPermission();
    if (hasPermission) {
      setEntryMode('camera');
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" className="gap-1 px-2 py-1 h-auto text-xs rounded-none border-gray-300">
          <Plus className="h-3 w-3" />
          +
        </Button>
      </DialogTrigger>
      <DialogContent className="w-[95vw] max-w-lg max-h-[90vh] mx-auto overflow-hidden">
        <DialogHeader>
          <DialogTitle className="text-lg">–î–æ–±–∞–≤–∏—Ç—å {mealTitles[mealType]}</DialogTitle>
        </DialogHeader>

        <div className="space-y-4 overflow-y-auto max-h-[60vh] px-1">
          {/* –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
          <div className="flex flex-col gap-2">
            <Button
              variant={entryMode === 'manual' ? 'default' : 'outline'}
              onClick={() => setEntryMode('manual')}
              className="w-full h-auto py-2 text-xs rounded-none"
            >
              <Plus className="h-3 w-3 mr-1" />
              –í—Ä—É—á–Ω—É—é
            </Button>
            <Button
              variant={entryMode === 'camera' ? 'default' : 'outline'}
              onClick={handleCameraMode}
              className="w-full h-auto py-2 text-xs rounded-none"
            >
              <Camera className="h-3 w-3 mr-1" />
              –ö–∞–º–µ—Ä–∞
            </Button>
            <Button
              variant={entryMode === 'upload' ? 'default' : 'outline'}
              onClick={() => setEntryMode('upload')}
              className="w-full h-auto py-2 text-xs rounded-none"
            >
              <Upload className="h-3 w-3 mr-1" />
              –ó–∞–≥—Ä—É–∑–∏—Ç—å
            </Button>
          </div>

          {/* –†—É—á–Ω–æ–π –≤–≤–æ–¥ */}
          {entryMode === 'manual' && (
            <div className="space-y-3">
              <div>
                <Label htmlFor="food_name" className="text-sm">–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞</Label>
                <Input
                  id="food_name"
                  value={foodData.food_name}
                  onChange={(e) => setFoodData({...foodData, food_name: e.target.value})}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç"
                  className="mt-1 text-sm"
                />
              </div>
              <div>
                <Label htmlFor="portion_size" className="text-sm">–†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏</Label>
                <Input
                  id="portion_size"
                  value={foodData.portion_size}
                  onChange={(e) => setFoodData({...foodData, portion_size: e.target.value})}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 200–≥"
                  className="mt-1 text-sm"
                />
              </div>
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <Label htmlFor="calories" className="text-sm">–ö–∞–ª–æ—Ä–∏–∏</Label>
                  <Input
                    id="calories"
                    type="number"
                    value={foodData.calories}
                    onChange={(e) => setFoodData({...foodData, calories: Number(e.target.value)})}
                    className="mt-1 text-sm"
                  />
                </div>
                <div>
                  <Label htmlFor="protein" className="text-sm">–ë–µ–ª–∫–∏ (–≥)</Label>
                  <Input
                    id="protein"
                    type="number"
                    step="0.1"
                    value={foodData.protein}
                    onChange={(e) => setFoodData({...foodData, protein: Number(e.target.value)})}
                    className="mt-1 text-sm"
                  />
                </div>
                <div>
                  <Label htmlFor="carbs" className="text-sm">–£–≥–ª–µ–≤–æ–¥—ã (–≥)</Label>
                  <Input
                    id="carbs"
                    type="number"
                    step="0.1"
                    value={foodData.carbs}
                    onChange={(e) => setFoodData({...foodData, carbs: Number(e.target.value)})}
                    className="mt-1 text-sm"
                  />
                </div>
                <div>
                  <Label htmlFor="fat" className="text-sm">–ñ–∏—Ä—ã (–≥)</Label>
                  <Input
                    id="fat"
                    type="number"
                    step="0.1"
                    value={foodData.fat}
                    onChange={(e) => setFoodData({...foodData, fat: Number(e.target.value)})}
                    className="mt-1 text-sm"
                  />
                </div>
              </div>
            </div>
          )}

          {/* –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          {(entryMode === 'camera' || entryMode === 'upload') && (
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <input
                type="file"
                accept="image/*"
                capture={entryMode === 'camera' ? 'environment' : undefined}
                onChange={handleImageUpload}
                className="hidden"
                id="image-upload"
                disabled={isAnalyzing}
              />
              <Label htmlFor="image-upload" className="cursor-pointer">
                <div className="space-y-2">
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="h-10 w-10 mx-auto text-blue-500 animate-spin" />
                      <p className="text-blue-600 text-sm font-medium">
                        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...
                      </p>
                      <p className="text-xs text-blue-400">
                        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –æ–∫–Ω–æ
                      </p>
                    </>
                  ) : entryMode === 'camera' ? (
                    <>
                      <Camera className="h-10 w-10 mx-auto text-gray-400" />
                      <p className="text-gray-600 text-sm">
                        –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ
                      </p>
                    </>
                  ) : (
                    <>
                      <Upload className="h-10 w-10 mx-auto text-gray-400" />
                      <p className="text-gray-600 text-sm">
                        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞
                      </p>
                    </>
                  )}
                  {!isAnalyzing && (
                    <p className="text-xs text-gray-500">
                      –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Å–æ—Å—Ç–∞–≤ –ë–ñ–£
                    </p>
                  )}
                </div>
              </Label>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex flex-col gap-2 pt-4 border-t">
          <Button 
            variant="outline" 
            onClick={handleClose} 
            className="w-full text-xs py-2 rounded-none" 
            disabled={isSaving || isAnalyzing}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
          {!isAnalyzing && (
            <Button 
              onClick={handleSave} 
              className="w-full text-xs py-2 rounded-none" 
              disabled={isSaving || !foodData.food_name.trim()}
            >
              {isSaving ? (
                <>
                  <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...
                </>
              ) : (
                '–î–æ–±–∞–≤–∏—Ç—å'
              )}
            </Button>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default MealEntry;
