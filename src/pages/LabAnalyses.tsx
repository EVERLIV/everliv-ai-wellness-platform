
import React, { useState, useEffect } from "react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { Plus, ArrowLeft, Calendar, FileText, Eye, TrendingUp, AlertCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { getMedicalAnalysesHistory } from "@/services/ai/medical-analysis";
import MedicalAnalysisForm from "@/components/medical-analysis/MedicalAnalysisForm";
import MedicalAnalysisResults from "@/components/medical-analysis/MedicalAnalysisResults";
import { useMedicalAnalysis } from "@/hooks/useMedicalAnalysis";
import { toast } from "sonner";

const LabAnalyses = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [showNewAnalysis, setShowNewAnalysis] = useState(false);
  const [analysisHistory, setAnalysisHistory] = useState([]);
  const [loadingHistory, setLoadingHistory] = useState(true);
  
  const { 
    results, 
    isAnalyzing, 
    activeTab, 
    apiError, 
    setActiveTab, 
    setResults, 
    analyzeMedicalTest 
  } = useMedicalAnalysis();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
  useEffect(() => {
    const loadHistory = async () => {
      if (!user) return;
      
      try {
        setLoadingHistory(true);
        const history = await getMedicalAnalysesHistory(user.id);
        setAnalysisHistory(history);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", error);
        toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤");
      } finally {
        setLoadingHistory(false);
      }
    };

    loadHistory();
  }, [user]);

  const handleViewAnalysis = (analysisId: string) => {
    navigate(`/analytics?id=${analysisId}`);
  };

  const getAnalysisTypeLabel = (type: string) => {
    const types = {
      blood: "–ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏",
      urine: "–ê–Ω–∞–ª–∏–∑ –º–æ—á–∏", 
      biochemistry: "–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
      hormones: "–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å",
      vitamins: "–í–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã",
      immunology: "–ò–º–º—É–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
      oncology: "–û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã",
      cardiology: "–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã",
      other: "–î—Ä—É–≥–æ–π –∞–Ω–∞–ª–∏–∑"
    };
    return types[type] || type;
  };

  const getRiskIcon = (level: string) => {
    switch (level) {
      case 'high':
        return "üî¥";
      case 'medium':
        return "üü°";
      default:
        return "üü¢";
    }
  };

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'high':
        return 'destructive';
      case 'medium':
        return 'secondary';
      default:
        return 'default';
    }
  };

  const getRiskText = (level: string) => {
    switch (level) {
      case 'high':
        return '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫';
      case 'medium':
        return '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫';
      default:
        return '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫';
    }
  };

  const handleNewAnalysisComplete = () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    if (user) {
      getMedicalAnalysesHistory(user.id).then(setAnalysisHistory);
    }
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
    if (results) {
      setShowNewAnalysis(false);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  useEffect(() => {
    if (results?.analysisId && user) {
      getMedicalAnalysesHistory(user.id).then(setAnalysisHistory);
    }
  }, [results, user]);

  if (showNewAnalysis) {
    return (
      <div className="min-h-screen flex flex-col bg-gray-50">
        <Header />
        
        <div className="flex-grow pt-16">
          <div className="container mx-auto px-4 py-6 max-w-4xl">
            <div className="flex items-center gap-4 mb-6">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => {
                  setShowNewAnalysis(false);
                  setResults(null);
                  setActiveTab("input");
                }}
                className="flex items-center gap-2"
              >
                <ArrowLeft className="h-4 w-4" />
                –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
              </Button>
              
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                  <Plus className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <h1 className="text-2xl font-semibold text-gray-900">–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</h1>
                  <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
                </div>
              </div>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤</CardTitle>
              </CardHeader>
              <CardContent>
                {activeTab === "input" && (
                  <MedicalAnalysisForm 
                    onAnalyze={analyzeMedicalTest}
                    isAnalyzing={isAnalyzing}
                  />
                )}
                
                {activeTab === "results" && (
                  <MedicalAnalysisResults
                    results={results}
                    isAnalyzing={isAnalyzing}
                    apiError={apiError}
                    onBack={() => {
                      setActiveTab("input");
                      handleNewAnalysisComplete();
                    }}
                  />
                )}
              </CardContent>
            </Card>
          </div>
        </div>

        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Header />
      
      <div className="flex-grow pt-16">
        <div className="container mx-auto px-4 py-6 max-w-7xl">
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center gap-4">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => navigate("/dashboard")}
                className="flex items-center gap-2"
              >
                <ArrowLeft className="h-4 w-4" />
                –ù–∞–∑–∞–¥
              </Button>
              
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-emerald-100 rounded-xl flex items-center justify-center">
                  <FileText className="h-6 w-6 text-emerald-600" />
                </div>
                <div>
                  <h1 className="text-3xl font-bold text-gray-900">–í–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã</h1>
                  <p className="text-gray-600">–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
                </div>
              </div>
            </div>

            <Button 
              onClick={() => setShowNewAnalysis(true)}
              className="gap-2 bg-emerald-600 hover:bg-emerald-700"
            >
              <Plus className="h-4 w-4" />
              –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
            </Button>
          </div>

          {/* –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ */}
          {loadingHistory ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[1,2,3].map(i => (
                <Card key={i} className="animate-pulse">
                  <CardHeader className="pb-3">
                    <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                    <div className="h-3 bg-gray-200 rounded w-1/2 mt-2"></div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div className="h-3 bg-gray-200 rounded"></div>
                      <div className="h-3 bg-gray-200 rounded w-2/3"></div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : analysisHistory.length === 0 ? (
            <Card className="text-center py-12">
              <CardContent>
                <div className="text-6xl mb-4">üî¨</div>
                <h3 className="text-xl font-semibold mb-2">–ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤</h3>
                <p className="text-gray-600 mb-6">
                  –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
                </p>
                <Button 
                  onClick={() => setShowNewAnalysis(true)}
                  className="gap-2"
                >
                  <Plus className="h-4 w-4" />
                  –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑
                </Button>
              </CardContent>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {analysisHistory.map((analysis) => (
                <Card key={analysis.id} className="hover:shadow-lg transition-shadow cursor-pointer">
                  <CardHeader className="pb-3">
                    <div className="flex items-start justify-between">
                      <div className="flex items-center gap-3">
                        <div className="text-2xl">{getRiskIcon(analysis.results?.riskLevel || 'low')}</div>
                        <div>
                          <CardTitle className="text-lg">
                            {getAnalysisTypeLabel(analysis.analysis_type)}
                          </CardTitle>
                          <div className="flex items-center gap-2 text-sm text-gray-500 mt-1">
                            <Calendar className="h-4 w-4" />
                            {new Date(analysis.created_at).toLocaleDateString('ru-RU')}
                          </div>
                        </div>
                      </div>
                      <Badge variant={getRiskColor(analysis.results?.riskLevel || 'low')} className="text-xs">
                        {getRiskText(analysis.results?.riskLevel || 'low')}
                      </Badge>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="pt-0">
                    {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π */}
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center gap-4">
                        <div className="text-center">
                          <div className="text-lg font-bold text-green-600">
                            {analysis.results?.markers?.filter(m => m.status === 'normal').length || 0}
                          </div>
                          <div className="text-xs text-gray-500">–ù–æ—Ä–º–∞</div>
                        </div>
                        <div className="text-center">
                          <div className="text-lg font-bold text-red-600">
                            {analysis.results?.markers?.filter(m => m.status !== 'normal').length || 0}
                          </div>
                          <div className="text-xs text-gray-500">–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</div>
                        </div>
                        <div className="text-center">
                          <div className="text-lg font-bold text-gray-700">
                            {analysis.results?.markers?.length || 0}
                          </div>
                          <div className="text-xs text-gray-500">–í—Å–µ–≥–æ</div>
                        </div>
                      </div>
                    </div>

                    {/* –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ */}
                    {analysis.results?.summary && (
                      <div className="text-sm text-gray-600 mb-4 line-clamp-2">
                        {analysis.results.summary}
                      </div>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="w-full gap-2"
                      onClick={() => handleViewAnalysis(analysis.id)}
                    >
                      <Eye className="h-4 w-4" />
                      –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>
      </div>

      <Footer />
    </div>
  );
};

export default LabAnalyses;
